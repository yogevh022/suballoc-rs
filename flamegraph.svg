<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="68826"><g><title>`0x7FF97E77D79A (7 samples, 0.01%)</title><rect x="0.0029%" y="421" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="7"/><text x="0.2529%" y="431.50"></text></g><g><title>`0x7FF97E793720 (7 samples, 0.01%)</title><rect x="0.0029%" y="405" width="0.0102%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="7"/><text x="0.2529%" y="415.50"></text></g><g><title>`0x7FF97E7900D3 (7 samples, 0.01%)</title><rect x="0.0029%" y="389" width="0.0102%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="7"/><text x="0.2529%" y="399.50"></text></g><g><title>`0x7FF97BDF05A2 (7 samples, 0.01%)</title><rect x="0.0160%" y="389" width="0.0102%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="7"/><text x="0.2660%" y="399.50"></text></g><g><title>`0x7FF97BDF19C7 (7 samples, 0.01%)</title><rect x="0.0160%" y="373" width="0.0102%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="7"/><text x="0.2660%" y="383.50"></text></g><g><title>`0x7FF97BDEC050 (7 samples, 0.01%)</title><rect x="0.0160%" y="357" width="0.0102%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="7"/><text x="0.2660%" y="367.50"></text></g><g><title>`0x7FF97C05DB72 (7 samples, 0.01%)</title><rect x="0.0160%" y="341" width="0.0102%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="7"/><text x="0.2660%" y="351.50"></text></g><g><title>`0x7FF97E746AF4 (7 samples, 0.01%)</title><rect x="0.0160%" y="325" width="0.0102%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="7"/><text x="0.2660%" y="335.50"></text></g><g><title>`0x7FF97E7473E4 (7 samples, 0.01%)</title><rect x="0.0160%" y="309" width="0.0102%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="7"/><text x="0.2660%" y="319.50"></text></g><g><title>`0x7FF97BDF045F (8 samples, 0.01%)</title><rect x="0.0160%" y="405" width="0.0116%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="8"/><text x="0.2660%" y="415.50"></text></g><g><title>suballoc.exe`core::time::impl$2::add_assign (201 samples, 0.29%)</title><rect x="0.0305%" y="341" width="0.2920%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="201"/><text x="0.2805%" y="351.50"></text></g><g><title>suballoc.exe`core::time::impl$1::add (201 samples, 0.29%)</title><rect x="0.0305%" y="325" width="0.2920%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="201"/><text x="0.2805%" y="335.50"></text></g><g><title>suballoc.exe`core::time::Duration::checked_add (201 samples, 0.29%)</title><rect x="0.0305%" y="309" width="0.2920%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="201"/><text x="0.2805%" y="319.50"></text></g><g><title>suballoc.exe`core::num::impl$9::checked_add (201 samples, 0.29%)</title><rect x="0.0305%" y="293" width="0.2920%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="201"/><text x="0.2805%" y="303.50"></text></g><g><title>`0x7FF97E7547B1 (201 samples, 0.29%)</title><rect x="0.0305%" y="277" width="0.2920%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="201"/><text x="0.2805%" y="287.50"></text></g><g><title>`0x7FF97E755B74 (201 samples, 0.29%)</title><rect x="0.0305%" y="261" width="0.2920%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="201"/><text x="0.2805%" y="271.50"></text></g><g><title>`0x7FF97E756F37 (201 samples, 0.29%)</title><rect x="0.0305%" y="245" width="0.2920%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="201"/><text x="0.2805%" y="255.50"></text></g><g><title>`0x7FF97E739B1A (201 samples, 0.29%)</title><rect x="0.0305%" y="229" width="0.2920%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="201"/><text x="0.2805%" y="239.50"></text></g><g><title>`0x7FF97E7CD8B4 (201 samples, 0.29%)</title><rect x="0.0305%" y="213" width="0.2920%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="201"/><text x="0.2805%" y="223.50"></text></g><g><title>`0x7FF97E7CCD8E (14 samples, 0.02%)</title><rect x="3.0788%" y="101" width="0.0203%" height="15" fill="rgb(226,26,5)" fg:x="2119" fg:w="14"/><text x="3.3288%" y="111.50"></text></g><g><title>`0x7FF97E7CD7F4 (14 samples, 0.02%)</title><rect x="3.0788%" y="85" width="0.0203%" height="15" fill="rgb(249,33,26)" fg:x="2119" fg:w="14"/><text x="3.3288%" y="95.50"></text></g><g><title>`0x7FF97E75EEEE (32 samples, 0.05%)</title><rect x="3.0788%" y="117" width="0.0465%" height="15" fill="rgb(235,183,28)" fg:x="2119" fg:w="32"/><text x="3.3288%" y="127.50"></text></g><g><title>`0x7FF97E7CCDDB (14 samples, 0.02%)</title><rect x="3.1049%" y="101" width="0.0203%" height="15" fill="rgb(221,5,38)" fg:x="2137" fg:w="14"/><text x="3.3549%" y="111.50"></text></g><g><title>`0x7FF97E739B1A (14 samples, 0.02%)</title><rect x="3.1049%" y="85" width="0.0203%" height="15" fill="rgb(247,18,42)" fg:x="2137" fg:w="14"/><text x="3.3549%" y="95.50"></text></g><g><title>`0x7FF97E7CD8B4 (14 samples, 0.02%)</title><rect x="3.1049%" y="69" width="0.0203%" height="15" fill="rgb(241,131,45)" fg:x="2137" fg:w="14"/><text x="3.3549%" y="79.50"></text></g><g><title>`0x7FF97E752615 (44 samples, 0.06%)</title><rect x="3.0686%" y="149" width="0.0639%" height="15" fill="rgb(249,31,29)" fg:x="2112" fg:w="44"/><text x="3.3186%" y="159.50"></text></g><g><title>`0x7FF97E75B44D (43 samples, 0.06%)</title><rect x="3.0701%" y="133" width="0.0625%" height="15" fill="rgb(225,111,53)" fg:x="2113" fg:w="43"/><text x="3.3201%" y="143.50"></text></g><g><title>`0x7FF97E7D450E (32 samples, 0.05%)</title><rect x="3.1456%" y="133" width="0.0465%" height="15" fill="rgb(238,160,17)" fg:x="2165" fg:w="32"/><text x="3.3956%" y="143.50"></text></g><g><title>`0x7FF97E7D4513 (1,168 samples, 1.70%)</title><rect x="3.1921%" y="133" width="1.6970%" height="15" fill="rgb(214,148,48)" fg:x="2197" fg:w="1168"/><text x="3.4421%" y="143.50"></text></g><g><title>`0x7FF97E7D4517 (34 samples, 0.05%)</title><rect x="4.8891%" y="133" width="0.0494%" height="15" fill="rgb(232,36,49)" fg:x="3365" fg:w="34"/><text x="5.1391%" y="143.50"></text></g><g><title>`0x7FF97E7D4527 (10 samples, 0.01%)</title><rect x="4.9444%" y="133" width="0.0145%" height="15" fill="rgb(209,103,24)" fg:x="3403" fg:w="10"/><text x="5.1944%" y="143.50"></text></g><g><title>`0x7FF97E7D452B (18 samples, 0.03%)</title><rect x="4.9589%" y="133" width="0.0262%" height="15" fill="rgb(229,88,8)" fg:x="3413" fg:w="18"/><text x="5.2089%" y="143.50"></text></g><g><title>`0x7FF97E7D452F (13 samples, 0.02%)</title><rect x="4.9850%" y="133" width="0.0189%" height="15" fill="rgb(213,181,19)" fg:x="3431" fg:w="13"/><text x="5.2350%" y="143.50"></text></g><g><title>`0x7FF97E7527D9 (1,292 samples, 1.88%)</title><rect x="3.1325%" y="149" width="1.8772%" height="15" fill="rgb(254,191,54)" fg:x="2156" fg:w="1292"/><text x="3.3825%" y="159.50">`..</text></g><g><title>`0x7FF97E756F37 (259 samples, 0.38%)</title><rect x="5.0155%" y="101" width="0.3763%" height="15" fill="rgb(241,83,37)" fg:x="3452" fg:w="259"/><text x="5.2655%" y="111.50"></text></g><g><title>`0x7FF97E739B1A (259 samples, 0.38%)</title><rect x="5.0155%" y="85" width="0.3763%" height="15" fill="rgb(233,36,39)" fg:x="3452" fg:w="259"/><text x="5.2655%" y="95.50"></text></g><g><title>`0x7FF97E7CD8B4 (259 samples, 0.38%)</title><rect x="5.0155%" y="69" width="0.3763%" height="15" fill="rgb(226,3,54)" fg:x="3452" fg:w="259"/><text x="5.2655%" y="79.50"></text></g><g><title>`0x7FF97E7538E3 (1,609 samples, 2.34%)</title><rect x="3.0555%" y="165" width="2.3378%" height="15" fill="rgb(245,192,40)" fg:x="2103" fg:w="1609"/><text x="3.3055%" y="175.50">`..</text></g><g><title>`0x7FF97E7527F0 (264 samples, 0.38%)</title><rect x="5.0097%" y="149" width="0.3836%" height="15" fill="rgb(238,167,29)" fg:x="3448" fg:w="264"/><text x="5.2597%" y="159.50"></text></g><g><title>`0x7FF97E7547B1 (263 samples, 0.38%)</title><rect x="5.0112%" y="133" width="0.3821%" height="15" fill="rgb(232,182,51)" fg:x="3449" fg:w="263"/><text x="5.2612%" y="143.50"></text></g><g><title>`0x7FF97E755B74 (262 samples, 0.38%)</title><rect x="5.0126%" y="117" width="0.3807%" height="15" fill="rgb(231,60,39)" fg:x="3450" fg:w="262"/><text x="5.2626%" y="127.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVec&lt;u32,alloc::alloc::Global&gt;::grow_one&lt;u32,alloc::alloc::Global&gt; (1,611 samples, 2.34%)</title><rect x="3.0541%" y="309" width="2.3407%" height="15" fill="rgb(208,69,12)" fg:x="2102" fg:w="1611"/><text x="3.3041%" y="319.50">s..</text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,611 samples, 2.34%)</title><rect x="3.0541%" y="293" width="2.3407%" height="15" fill="rgb(235,93,37)" fg:x="2102" fg:w="1611"/><text x="3.3041%" y="303.50">s..</text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,611 samples, 2.34%)</title><rect x="3.0541%" y="277" width="2.3407%" height="15" fill="rgb(213,116,39)" fg:x="2102" fg:w="1611"/><text x="3.3041%" y="287.50">s..</text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,611 samples, 2.34%)</title><rect x="3.0541%" y="261" width="2.3407%" height="15" fill="rgb(222,207,29)" fg:x="2102" fg:w="1611"/><text x="3.3041%" y="271.50">s..</text></g><g><title>suballoc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,611 samples, 2.34%)</title><rect x="3.0541%" y="245" width="2.3407%" height="15" fill="rgb(206,96,30)" fg:x="2102" fg:w="1611"/><text x="3.3041%" y="255.50">s..</text></g><g><title>suballoc.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,610 samples, 2.34%)</title><rect x="3.0555%" y="229" width="2.3392%" height="15" fill="rgb(218,138,4)" fg:x="2103" fg:w="1610"/><text x="3.3055%" y="239.50">s..</text></g><g><title>suballoc.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,610 samples, 2.34%)</title><rect x="3.0555%" y="213" width="2.3392%" height="15" fill="rgb(250,191,14)" fg:x="2103" fg:w="1610"/><text x="3.3055%" y="223.50">s..</text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,610 samples, 2.34%)</title><rect x="3.0555%" y="197" width="2.3392%" height="15" fill="rgb(239,60,40)" fg:x="2103" fg:w="1610"/><text x="3.3055%" y="207.50">s..</text></g><g><title>`0x7FF97E7536BD (1,610 samples, 2.34%)</title><rect x="3.0555%" y="181" width="2.3392%" height="15" fill="rgb(206,27,48)" fg:x="2103" fg:w="1610"/><text x="3.3055%" y="191.50">`..</text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::push (4,350 samples, 6.32%)</title><rect x="0.3269%" y="325" width="6.3203%" height="15" fill="rgb(225,35,8)" fg:x="225" fg:w="4350"/><text x="0.5769%" y="335.50">suballoc..</text></g><g><title>suballoc.exe`core::ptr::write (861 samples, 1.25%)</title><rect x="5.3962%" y="309" width="1.2510%" height="15" fill="rgb(250,213,24)" fg:x="3714" fg:w="861"/><text x="5.6462%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::set_len (48 samples, 0.07%)</title><rect x="6.6646%" y="309" width="0.0697%" height="15" fill="rgb(247,123,22)" fg:x="4587" fg:w="48"/><text x="6.9146%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::swap_remove (87 samples, 0.13%)</title><rect x="6.6472%" y="325" width="0.1264%" height="15" fill="rgb(231,138,38)" fg:x="4575" fg:w="87"/><text x="6.8972%" y="335.50"></text></g><g><title>suballoc.exe`core::ptr::copy (27 samples, 0.04%)</title><rect x="6.7344%" y="309" width="0.0392%" height="15" fill="rgb(231,145,46)" fg:x="4635" fg:w="27"/><text x="6.9844%" y="319.50"></text></g><g><title>suballoc.exe`core::hint::black_box(tuple$ (12 samples, 0.02%)</title><rect x="6.7736%" y="325" width="0.0174%" height="15" fill="rgb(251,118,11)" fg:x="4662" fg:w="12"/><text x="7.0236%" y="335.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$6::next(core::ops::range::Range (20 samples, 0.03%)</title><rect x="6.7910%" y="325" width="0.0291%" height="15" fill="rgb(217,147,25)" fg:x="4674" fg:w="20"/><text x="7.0410%" y="335.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (20 samples, 0.03%)</title><rect x="6.7910%" y="309" width="0.0291%" height="15" fill="rgb(247,81,37)" fg:x="4674" fg:w="20"/><text x="7.0410%" y="319.50"></text></g><g><title>suballoc.exe`core::cmp::impls::impl$58::lt (10 samples, 0.01%)</title><rect x="6.8056%" y="293" width="0.0145%" height="15" fill="rgb(209,12,38)" fg:x="4684" fg:w="10"/><text x="7.0556%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place(alloc::boxed::Box&lt;slice2$ (203 samples, 0.29%)</title><rect x="6.8201%" y="309" width="0.2949%" height="15" fill="rgb(227,1,9)" fg:x="4694" fg:w="203"/><text x="7.0701%" y="319.50"></text></g><g><title>suballoc.exe`alloc::boxed::impl$8::drop(alloc::boxed::Box&lt;slice2$ (203 samples, 0.29%)</title><rect x="6.8201%" y="293" width="0.2949%" height="15" fill="rgb(248,47,43)" fg:x="4694" fg:w="203"/><text x="7.0701%" y="303.50"></text></g><g><title>`0x7FF97E7547B1 (201 samples, 0.29%)</title><rect x="6.8230%" y="277" width="0.2920%" height="15" fill="rgb(221,10,30)" fg:x="4696" fg:w="201"/><text x="7.0730%" y="287.50"></text></g><g><title>`0x7FF97E755B74 (201 samples, 0.29%)</title><rect x="6.8230%" y="261" width="0.2920%" height="15" fill="rgb(210,229,1)" fg:x="4696" fg:w="201"/><text x="7.0730%" y="271.50"></text></g><g><title>`0x7FF97E756F37 (201 samples, 0.29%)</title><rect x="6.8230%" y="245" width="0.2920%" height="15" fill="rgb(222,148,37)" fg:x="4696" fg:w="201"/><text x="7.0730%" y="255.50"></text></g><g><title>`0x7FF97E739B1A (201 samples, 0.29%)</title><rect x="6.8230%" y="229" width="0.2920%" height="15" fill="rgb(234,67,33)" fg:x="4696" fg:w="201"/><text x="7.0730%" y="239.50"></text></g><g><title>`0x7FF97E7CD8B4 (201 samples, 0.29%)</title><rect x="6.8230%" y="213" width="0.2920%" height="15" fill="rgb(247,98,35)" fg:x="4696" fg:w="201"/><text x="7.0730%" y="223.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place (204 samples, 0.30%)</title><rect x="6.8201%" y="325" width="0.2964%" height="15" fill="rgb(247,138,52)" fg:x="4694" fg:w="204"/><text x="7.0701%" y="335.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_neg (120 samples, 0.17%)</title><rect x="7.2124%" y="245" width="0.1744%" height="15" fill="rgb(213,79,30)" fg:x="4964" fg:w="120"/><text x="7.4624%" y="255.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_sub (120 samples, 0.17%)</title><rect x="7.2124%" y="229" width="0.1744%" height="15" fill="rgb(246,177,23)" fg:x="4964" fg:w="120"/><text x="7.4624%" y="239.50"></text></g><g><title>suballoc.exe`rand::distr::utils::impl$5::wmul (89 samples, 0.13%)</title><rect x="7.3867%" y="245" width="0.1293%" height="15" fill="rgb(230,62,27)" fg:x="5084" fg:w="89"/><text x="7.6367%" y="255.50"></text></g><g><title>suballoc.exe`chacha20::ChaChaCore&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::generate&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt; (57 samples, 0.08%)</title><rect x="7.7485%" y="117" width="0.0828%" height="15" fill="rgb(216,154,8)" fg:x="5333" fg:w="57"/><text x="7.9985%" y="127.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (135 samples, 0.20%)</title><rect x="7.9752%" y="37" width="0.1961%" height="15" fill="rgb(244,35,45)" fg:x="5489" fg:w="135"/><text x="8.2252%" y="47.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (80 samples, 0.12%)</title><rect x="8.1713%" y="37" width="0.1162%" height="15" fill="rgb(251,115,12)" fg:x="5624" fg:w="80"/><text x="8.4213%" y="47.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (154 samples, 0.22%)</title><rect x="8.2876%" y="37" width="0.2238%" height="15" fill="rgb(240,54,50)" fg:x="5704" fg:w="154"/><text x="8.5376%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::add_xor_rot (373 samples, 0.54%)</title><rect x="7.9752%" y="53" width="0.5419%" height="15" fill="rgb(233,84,52)" fg:x="5489" fg:w="373"/><text x="8.2252%" y="63.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::cols_to_rows (14 samples, 0.02%)</title><rect x="8.5171%" y="53" width="0.0203%" height="15" fill="rgb(207,117,47)" fg:x="5862" fg:w="14"/><text x="8.7671%" y="63.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (14 samples, 0.02%)</title><rect x="8.5171%" y="37" width="0.0203%" height="15" fill="rgb(249,43,39)" fg:x="5862" fg:w="14"/><text x="8.7671%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::double_quarter_round (400 samples, 0.58%)</title><rect x="7.9752%" y="69" width="0.5812%" height="15" fill="rgb(209,38,44)" fg:x="5489" fg:w="400"/><text x="8.2252%" y="79.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rows_to_cols (13 samples, 0.02%)</title><rect x="8.5375%" y="53" width="0.0189%" height="15" fill="rgb(236,212,23)" fg:x="5876" fg:w="13"/><text x="8.7875%" y="63.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (13 samples, 0.02%)</title><rect x="8.5375%" y="37" width="0.0189%" height="15" fill="rgb(242,79,21)" fg:x="5876" fg:w="13"/><text x="8.7875%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rounds (403 samples, 0.59%)</title><rect x="7.9752%" y="85" width="0.5855%" height="15" fill="rgb(211,96,35)" fg:x="5489" fg:w="403"/><text x="8.2252%" y="95.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (418 samples, 0.61%)</title><rect x="7.9752%" y="101" width="0.6073%" height="15" fill="rgb(253,215,40)" fg:x="5489" fg:w="418"/><text x="8.2252%" y="111.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::sse2::_mm_storeu_si128 (15 samples, 0.02%)</title><rect x="8.5607%" y="85" width="0.0218%" height="15" fill="rgb(211,81,21)" fg:x="5892" fg:w="15"/><text x="8.8107%" y="95.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::write_unaligned (15 samples, 0.02%)</title><rect x="8.5607%" y="69" width="0.0218%" height="15" fill="rgb(208,190,38)" fg:x="5892" fg:w="15"/><text x="8.8107%" y="79.50"></text></g><g><title>suballoc.exe`core::ptr::write_unaligned (15 samples, 0.02%)</title><rect x="8.5607%" y="53" width="0.0218%" height="15" fill="rgb(235,213,38)" fg:x="5892" fg:w="15"/><text x="8.8107%" y="63.50"></text></g><g><title>suballoc.exe`core::ptr::copy_nonoverlapping (15 samples, 0.02%)</title><rect x="8.5607%" y="37" width="0.0218%" height="15" fill="rgb(237,122,38)" fg:x="5892" fg:w="15"/><text x="8.8107%" y="47.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi64 (8 samples, 0.01%)</title><rect x="8.5825%" y="101" width="0.0116%" height="15" fill="rgb(244,218,35)" fg:x="5907" fg:w="8"/><text x="8.8325%" y="111.50"></text></g><g><title>suballoc.exe`chacha20::rng::impl$42::generate (583 samples, 0.85%)</title><rect x="7.7485%" y="133" width="0.8471%" height="15" fill="rgb(240,68,47)" fg:x="5333" fg:w="583"/><text x="7.9985%" y="143.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (526 samples, 0.76%)</title><rect x="7.8313%" y="117" width="0.7642%" height="15" fill="rgb(210,16,53)" fg:x="5390" fg:w="526"/><text x="8.0813%" y="127.50"></text></g><g><title>`0x7FF97BF1513C (16 samples, 0.02%)</title><rect x="8.6188%" y="85" width="0.0232%" height="15" fill="rgb(235,124,12)" fg:x="5932" fg:w="16"/><text x="8.8688%" y="95.50"></text></g><g><title>`0x7FF97BF153DF (8 samples, 0.01%)</title><rect x="8.6305%" y="69" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="5940" fg:w="8"/><text x="8.8805%" y="79.50"></text></g><g><title>`0x7FF97BF16849 (8 samples, 0.01%)</title><rect x="8.6305%" y="53" width="0.0116%" height="15" fill="rgb(250,166,2)" fg:x="5940" fg:w="8"/><text x="8.8805%" y="63.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (1,054 samples, 1.53%)</title><rect x="7.1165%" y="325" width="1.5314%" height="15" fill="rgb(242,216,29)" fg:x="4898" fg:w="1054"/><text x="7.3665%" y="335.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::impl$8::sample_single(core::ops::range::Range (1,033 samples, 1.50%)</title><rect x="7.1470%" y="309" width="1.5009%" height="15" fill="rgb(230,116,27)" fg:x="4919" fg:w="1033"/><text x="7.3970%" y="319.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$1::sample_single (1,033 samples, 1.50%)</title><rect x="7.1470%" y="293" width="1.5009%" height="15" fill="rgb(228,99,48)" fg:x="4919" fg:w="1033"/><text x="7.3970%" y="303.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single (1,001 samples, 1.45%)</title><rect x="7.1935%" y="277" width="1.4544%" height="15" fill="rgb(253,11,6)" fg:x="4951" fg:w="1001"/><text x="7.4435%" y="287.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (1,001 samples, 1.45%)</title><rect x="7.1935%" y="261" width="1.4544%" height="15" fill="rgb(247,143,39)" fg:x="4951" fg:w="1001"/><text x="7.4435%" y="271.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random (779 samples, 1.13%)</title><rect x="7.5161%" y="245" width="1.1318%" height="15" fill="rgb(236,97,10)" fg:x="5173" fg:w="779"/><text x="7.7661%" y="255.50"></text></g><g><title>suballoc.exe`rand::distr::integer::impl$2::sample (779 samples, 1.13%)</title><rect x="7.5161%" y="229" width="1.1318%" height="15" fill="rgb(233,208,19)" fg:x="5173" fg:w="779"/><text x="7.7661%" y="239.50"></text></g><g><title>suballoc.exe`rand::rngs::thread::impl$3::next_u32 (779 samples, 1.13%)</title><rect x="7.5161%" y="213" width="1.1318%" height="15" fill="rgb(216,164,2)" fg:x="5173" fg:w="779"/><text x="7.7661%" y="223.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (779 samples, 1.13%)</title><rect x="7.5161%" y="197" width="1.1318%" height="15" fill="rgb(220,129,5)" fg:x="5173" fg:w="779"/><text x="7.7661%" y="207.50"></text></g><g><title>suballoc.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (779 samples, 1.13%)</title><rect x="7.5161%" y="181" width="1.1318%" height="15" fill="rgb(242,17,10)" fg:x="5173" fg:w="779"/><text x="7.7661%" y="191.50"></text></g><g><title>suballoc.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (626 samples, 0.91%)</title><rect x="7.7384%" y="165" width="0.9095%" height="15" fill="rgb(242,107,0)" fg:x="5326" fg:w="626"/><text x="7.9884%" y="175.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (626 samples, 0.91%)</title><rect x="7.7384%" y="149" width="0.9095%" height="15" fill="rgb(251,28,31)" fg:x="5326" fg:w="626"/><text x="7.9884%" y="159.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed_and_generate&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; (36 samples, 0.05%)</title><rect x="8.5956%" y="133" width="0.0523%" height="15" fill="rgb(233,223,10)" fg:x="5916" fg:w="36"/><text x="8.8456%" y="143.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed (33 samples, 0.05%)</title><rect x="8.5999%" y="117" width="0.0479%" height="15" fill="rgb(215,21,27)" fg:x="5919" fg:w="33"/><text x="8.8499%" y="127.50"></text></g><g><title>suballoc.exe`rand_core::SeedableRng::try_from_rng (33 samples, 0.05%)</title><rect x="8.5999%" y="101" width="0.0479%" height="15" fill="rgb(232,23,21)" fg:x="5919" fg:w="33"/><text x="8.8499%" y="111.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::mapping_search (390 samples, 0.57%)</title><rect x="8.6552%" y="309" width="0.5666%" height="15" fill="rgb(244,5,23)" fg:x="5957" fg:w="390"/><text x="8.9052%" y="319.50"></text></g><g><title>suballoc.exe`enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;::take (1,925 samples, 2.80%)</title><rect x="15.2718%" y="293" width="2.7969%" height="15" fill="rgb(226,81,46)" fg:x="10511" fg:w="1925"/><text x="15.5218%" y="303.50">su..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::popf_free_link (6,522 samples, 9.48%)</title><rect x="9.2218%" y="309" width="9.4761%" height="15" fill="rgb(247,70,30)" fg:x="6347" fg:w="6522"/><text x="9.4718%" y="319.50">suballoc.exe`s..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::set_bitmap_index_empty (433 samples, 0.63%)</title><rect x="18.0688%" y="293" width="0.6291%" height="15" fill="rgb(212,68,19)" fg:x="12436" fg:w="433"/><text x="18.3188%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::or_flags (357 samples, 0.52%)</title><rect x="19.2921%" y="293" width="0.5187%" height="15" fill="rgb(240,187,13)" fg:x="13278" fg:w="357"/><text x="19.5421%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (19 samples, 0.03%)</title><rect x="19.8108%" y="293" width="0.0276%" height="15" fill="rgb(223,113,26)" fg:x="13635" fg:w="19"/><text x="20.0608%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (717 samples, 1.04%)</title><rect x="19.8384%" y="293" width="1.0418%" height="15" fill="rgb(206,192,2)" fg:x="13654" fg:w="717"/><text x="20.0884%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (25 samples, 0.04%)</title><rect x="20.8802%" y="293" width="0.0363%" height="15" fill="rgb(241,108,4)" fg:x="14371" fg:w="25"/><text x="21.1302%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (25 samples, 0.04%)</title><rect x="20.8802%" y="277" width="0.0363%" height="15" fill="rgb(247,173,49)" fg:x="14371" fg:w="25"/><text x="21.1302%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (25 samples, 0.04%)</title><rect x="20.8802%" y="261" width="0.0363%" height="15" fill="rgb(224,114,35)" fg:x="14371" fg:w="25"/><text x="21.1302%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_sub (304 samples, 0.44%)</title><rect x="20.9165%" y="293" width="0.4417%" height="15" fill="rgb(245,159,27)" fg:x="14396" fg:w="304"/><text x="21.1665%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_sub (304 samples, 0.44%)</title><rect x="20.9165%" y="277" width="0.4417%" height="15" fill="rgb(245,172,44)" fg:x="14396" fg:w="304"/><text x="21.1665%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::sub (304 samples, 0.44%)</title><rect x="20.9165%" y="261" width="0.4417%" height="15" fill="rgb(236,23,11)" fg:x="14396" fg:w="304"/><text x="21.1665%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::ptr_eq_mem_start (11 samples, 0.02%)</title><rect x="21.3582%" y="293" width="0.0160%" height="15" fill="rgb(205,117,38)" fg:x="14700" fg:w="11"/><text x="21.6082%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (7,713 samples, 11.21%)</title><rect x="21.3742%" y="277" width="11.2065%" height="15" fill="rgb(237,72,25)" fg:x="14711" fg:w="7713"/><text x="21.6242%" y="287.50">suballoc.exe`sub..</text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull (1,711 samples, 2.49%)</title><rect x="34.1223%" y="261" width="2.4860%" height="15" fill="rgb(244,70,9)" fg:x="23485" fg:w="1711"/><text x="34.3723%" y="271.50">su..</text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (288 samples, 0.42%)</title><rect x="36.6083%" y="261" width="0.4184%" height="15" fill="rgb(217,125,39)" fg:x="25196" fg:w="288"/><text x="36.8583%" y="271.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (397 samples, 0.58%)</title><rect x="37.0470%" y="245" width="0.5768%" height="15" fill="rgb(235,36,10)" fg:x="25498" fg:w="397"/><text x="37.2970%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::mapping_insert (1,884 samples, 2.74%)</title><rect x="37.0267%" y="261" width="2.7373%" height="15" fill="rgb(251,123,47)" fg:x="25484" fg:w="1884"/><text x="37.2767%" y="271.50">su..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::calc_sl_index_for_fl (1,473 samples, 2.14%)</title><rect x="37.6239%" y="245" width="2.1402%" height="15" fill="rgb(221,13,13)" fg:x="25895" fg:w="1473"/><text x="37.8739%" y="255.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::pushf_free_link(core::ptr::non_null::NonNull (5,396 samples, 7.84%)</title><rect x="32.5807%" y="277" width="7.8401%" height="15" fill="rgb(238,131,9)" fg:x="22424" fg:w="5396"/><text x="32.8307%" y="287.50">suballoc.ex..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::set_bitmap_index_available (452 samples, 0.66%)</title><rect x="39.7640%" y="261" width="0.6567%" height="15" fill="rgb(211,50,8)" fg:x="27368" fg:w="452"/><text x="40.0140%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::push_leftover_block (14,655 samples, 21.29%)</title><rect x="21.3742%" y="293" width="21.2928%" height="15" fill="rgb(245,182,24)" fg:x="14711" fg:w="14655"/><text x="21.6242%" y="303.50">suballoc.exe`suballoc::tlsf::TLSF:..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_head (1,546 samples, 2.25%)</title><rect x="40.4208%" y="277" width="2.2462%" height="15" fill="rgb(242,14,37)" fg:x="27820" fg:w="1546"/><text x="40.6708%" y="287.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::allocate (23,516 samples, 34.17%)</title><rect x="8.6552%" y="325" width="34.1673%" height="15" fill="rgb(246,228,12)" fg:x="5957" fg:w="23516"/><text x="8.9052%" y="335.50">suballoc.exe`suballoc::tlsf::TLSF::allocate</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::use_block (16,604 samples, 24.12%)</title><rect x="18.6979%" y="309" width="24.1246%" height="15" fill="rgb(213,55,15)" fg:x="12869" fg:w="16604"/><text x="18.9479%" y="319.50">suballoc.exe`suballoc::tlsf::TLSF::use..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_head (107 samples, 0.16%)</title><rect x="42.6670%" y="293" width="0.1555%" height="15" fill="rgb(209,9,3)" fg:x="29366" fg:w="107"/><text x="42.9170%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (22 samples, 0.03%)</title><rect x="43.1479%" y="309" width="0.0320%" height="15" fill="rgb(230,59,30)" fg:x="29697" fg:w="22"/><text x="43.3979%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (28,472 samples, 41.37%)</title><rect x="43.1799%" y="309" width="41.3681%" height="15" fill="rgb(209,121,21)" fg:x="29719" fg:w="28472"/><text x="43.4299%" y="319.50">suballoc.exe`suballoc::block::BlockInterface::size</text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::clear_or_flags (524 samples, 0.76%)</title><rect x="84.6933%" y="293" width="0.7613%" height="15" fill="rgb(220,109,13)" fg:x="58291" fg:w="524"/><text x="84.9433%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (2,436 samples, 3.54%)</title><rect x="85.4546%" y="293" width="3.5394%" height="15" fill="rgb(232,18,1)" fg:x="58815" fg:w="2436"/><text x="85.7046%" y="303.50">sub..</text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (127 samples, 0.18%)</title><rect x="88.9940%" y="293" width="0.1845%" height="15" fill="rgb(215,41,42)" fg:x="61251" fg:w="127"/><text x="89.2440%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (127 samples, 0.18%)</title><rect x="88.9940%" y="277" width="0.1845%" height="15" fill="rgb(224,123,36)" fg:x="61251" fg:w="127"/><text x="89.2440%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (127 samples, 0.18%)</title><rect x="88.9940%" y="261" width="0.1845%" height="15" fill="rgb(240,125,3)" fg:x="61251" fg:w="127"/><text x="89.2440%" y="271.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (206 samples, 0.30%)</title><rect x="89.1916%" y="277" width="0.2993%" height="15" fill="rgb(205,98,50)" fg:x="61387" fg:w="206"/><text x="89.4416%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::mapping_insert (312 samples, 0.45%)</title><rect x="89.1785%" y="293" width="0.4533%" height="15" fill="rgb(205,185,37)" fg:x="61378" fg:w="312"/><text x="89.4285%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::calc_sl_index_for_fl (97 samples, 0.14%)</title><rect x="89.4909%" y="277" width="0.1409%" height="15" fill="rgb(238,207,15)" fg:x="61593" fg:w="97"/><text x="89.7409%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::remove_free_link (1,356 samples, 1.97%)</title><rect x="89.6318%" y="293" width="1.9702%" height="15" fill="rgb(213,199,42)" fg:x="61690" fg:w="1356"/><text x="89.8818%" y="303.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::coalesce_next (4,987 samples, 7.25%)</title><rect x="84.5480%" y="309" width="7.2458%" height="15" fill="rgb(235,201,11)" fg:x="58191" fg:w="4987"/><text x="84.7980%" y="319.50">suballoc.e..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_head (132 samples, 0.19%)</title><rect x="91.6020%" y="293" width="0.1918%" height="15" fill="rgb(207,46,11)" fg:x="63046" fg:w="132"/><text x="91.8520%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::clear_or_flags (132 samples, 0.19%)</title><rect x="91.8447%" y="293" width="0.1918%" height="15" fill="rgb(241,35,35)" fg:x="63213" fg:w="132"/><text x="92.0947%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (1,622 samples, 2.36%)</title><rect x="92.0364%" y="293" width="2.3567%" height="15" fill="rgb(243,32,47)" fg:x="63345" fg:w="1622"/><text x="92.2864%" y="303.50">s..</text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_sub (86 samples, 0.12%)</title><rect x="94.3931%" y="293" width="0.1250%" height="15" fill="rgb(247,202,23)" fg:x="64967" fg:w="86"/><text x="94.6431%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_sub (86 samples, 0.12%)</title><rect x="94.3931%" y="277" width="0.1250%" height="15" fill="rgb(219,102,11)" fg:x="64967" fg:w="86"/><text x="94.6431%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::sub (86 samples, 0.12%)</title><rect x="94.3931%" y="261" width="0.1250%" height="15" fill="rgb(243,110,44)" fg:x="64967" fg:w="86"/><text x="94.6431%" y="271.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (96 samples, 0.14%)</title><rect x="94.5573%" y="277" width="0.1395%" height="15" fill="rgb(222,74,54)" fg:x="65080" fg:w="96"/><text x="94.8073%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::mapping_insert (185 samples, 0.27%)</title><rect x="94.5181%" y="293" width="0.2688%" height="15" fill="rgb(216,99,12)" fg:x="65053" fg:w="185"/><text x="94.7681%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::calc_sl_index_for_fl (62 samples, 0.09%)</title><rect x="94.6968%" y="277" width="0.0901%" height="15" fill="rgb(226,22,26)" fg:x="65176" fg:w="62"/><text x="94.9468%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::remove_free_link (1,379 samples, 2.00%)</title><rect x="94.7869%" y="293" width="2.0036%" height="15" fill="rgb(217,163,10)" fg:x="65238" fg:w="1379"/><text x="95.0369%" y="303.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::coalesce_prev (3,453 samples, 5.02%)</title><rect x="91.7938%" y="309" width="5.0170%" height="15" fill="rgb(213,25,53)" fg:x="63178" fg:w="3453"/><text x="92.0438%" y="319.50">suball..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_head (14 samples, 0.02%)</title><rect x="96.7905%" y="293" width="0.0203%" height="15" fill="rgb(252,105,26)" fg:x="66617" fg:w="14"/><text x="97.0405%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::ptr_eq_mem_end (12 samples, 0.02%)</title><rect x="96.8108%" y="309" width="0.0174%" height="15" fill="rgb(220,39,43)" fg:x="66631" fg:w="12"/><text x="97.0608%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::ptr_from_offset (67 samples, 0.10%)</title><rect x="96.8282%" y="309" width="0.0973%" height="15" fill="rgb(229,68,48)" fg:x="66643" fg:w="67"/><text x="97.0782%" y="319.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::offset (67 samples, 0.10%)</title><rect x="96.8282%" y="293" width="0.0973%" height="15" fill="rgb(252,8,32)" fg:x="66643" fg:w="67"/><text x="97.0782%" y="303.50"></text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull (316 samples, 0.46%)</title><rect x="97.3745%" y="293" width="0.4591%" height="15" fill="rgb(223,20,43)" fg:x="67019" fg:w="316"/><text x="97.6245%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (65 samples, 0.09%)</title><rect x="97.8337%" y="293" width="0.0944%" height="15" fill="rgb(229,81,49)" fg:x="67335" fg:w="65"/><text x="98.0837%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_next(enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull (10 samples, 0.01%)</title><rect x="97.9281%" y="293" width="0.0145%" height="15" fill="rgb(236,28,36)" fg:x="67400" fg:w="10"/><text x="98.1781%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_prev(enum2$&lt;core::option::Option&lt;core::ptr::non_null::NonNull (267 samples, 0.39%)</title><rect x="97.9426%" y="293" width="0.3879%" height="15" fill="rgb(249,185,26)" fg:x="67410" fg:w="267"/><text x="98.1926%" y="303.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (145 samples, 0.21%)</title><rect x="98.3553%" y="277" width="0.2107%" height="15" fill="rgb(249,174,33)" fg:x="67694" fg:w="145"/><text x="98.6053%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::mapping_insert (380 samples, 0.55%)</title><rect x="98.3306%" y="293" width="0.5521%" height="15" fill="rgb(233,201,37)" fg:x="67677" fg:w="380"/><text x="98.5806%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::calc_sl_index_for_fl (218 samples, 0.32%)</title><rect x="98.5659%" y="277" width="0.3167%" height="15" fill="rgb(221,78,26)" fg:x="67839" fg:w="218"/><text x="98.8159%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::pushf_free_link(core::ptr::non_null::NonNull (1,789 samples, 2.60%)</title><rect x="96.9256%" y="309" width="2.5993%" height="15" fill="rgb(250,127,30)" fg:x="66710" fg:w="1789"/><text x="97.1756%" y="319.50">su..</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::set_bitmap_index_available (442 samples, 0.64%)</title><rect x="98.8827%" y="293" width="0.6422%" height="15" fill="rgb(230,49,44)" fg:x="68057" fg:w="442"/><text x="99.1327%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::size_between_meta_ptrs (19 samples, 0.03%)</title><rect x="99.5249%" y="309" width="0.0276%" height="15" fill="rgb(229,67,23)" fg:x="68499" fg:w="19"/><text x="99.7749%" y="319.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::byte_offset_from (19 samples, 0.03%)</title><rect x="99.5249%" y="293" width="0.0276%" height="15" fill="rgb(249,83,47)" fg:x="68499" fg:w="19"/><text x="99.7749%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::offset_from (19 samples, 0.03%)</title><rect x="99.5249%" y="277" width="0.0276%" height="15" fill="rgb(215,43,3)" fg:x="68499" fg:w="19"/><text x="99.7749%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_head (109 samples, 0.16%)</title><rect x="99.5525%" y="309" width="0.1584%" height="15" fill="rgb(238,154,13)" fg:x="68518" fg:w="109"/><text x="99.8025%" y="319.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (77 samples, 0.11%)</title><rect x="99.5990%" y="293" width="0.1119%" height="15" fill="rgb(219,56,2)" fg:x="68550" fg:w="77"/><text x="99.8490%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (77 samples, 0.11%)</title><rect x="99.5990%" y="277" width="0.1119%" height="15" fill="rgb(233,0,4)" fg:x="68550" fg:w="77"/><text x="99.8490%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::deallocate (39,327 samples, 57.14%)</title><rect x="42.8225%" y="325" width="57.1397%" height="15" fill="rgb(235,30,7)" fg:x="29473" fg:w="39327"/><text x="43.0725%" y="335.50">suballoc.exe`suballoc::tlsf::TLSF::deallocate</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::with_meta (173 samples, 0.25%)</title><rect x="99.7109%" y="309" width="0.2514%" height="15" fill="rgb(250,79,13)" fg:x="68627" fg:w="173"/><text x="99.9609%" y="319.50"></text></g><g><title>`0x7FF97E77CC91 (68,810 samples, 99.98%)</title><rect x="0.0029%" y="453" width="99.9768%" height="15" fill="rgb(211,146,34)" fg:x="2" fg:w="68810"/><text x="0.2529%" y="463.50">`0x7FF97E77CC91</text></g><g><title>`0x7FF97C897374 (68,810 samples, 99.98%)</title><rect x="0.0029%" y="437" width="99.9768%" height="15" fill="rgb(228,22,38)" fg:x="2" fg:w="68810"/><text x="0.2529%" y="447.50">`0x7FF97C897374</text></g><g><title>suballoc.exe`__scrt_common_main_seh() (68,802 samples, 99.97%)</title><rect x="0.0145%" y="421" width="99.9651%" height="15" fill="rgb(235,168,5)" fg:x="10" fg:w="68802"/><text x="0.2645%" y="431.50">suballoc.exe`__scrt_common_main_seh()</text></g><g><title>suballoc.exe`invoke_main() (68,793 samples, 99.95%)</title><rect x="0.0276%" y="405" width="99.9521%" height="15" fill="rgb(221,155,16)" fg:x="19" fg:w="68793"/><text x="0.2776%" y="415.50">suballoc.exe`invoke_main()</text></g><g><title>suballoc.exe`main (68,793 samples, 99.95%)</title><rect x="0.0276%" y="389" width="99.9521%" height="15" fill="rgb(215,215,53)" fg:x="19" fg:w="68793"/><text x="0.2776%" y="399.50">suballoc.exe`main</text></g><g><title>suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (68,793 samples, 99.95%)</title><rect x="0.0276%" y="373" width="99.9521%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="68793"/><text x="0.2776%" y="383.50">suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>suballoc.exe`suballoc::main (68,793 samples, 99.95%)</title><rect x="0.0276%" y="357" width="99.9521%" height="15" fill="rgb(234,103,6)" fg:x="19" fg:w="68793"/><text x="0.2776%" y="367.50">suballoc.exe`suballoc::main</text></g><g><title>suballoc.exe`suballoc::test::test_tlsf (68,590 samples, 99.66%)</title><rect x="0.3226%" y="341" width="99.6571%" height="15" fill="rgb(227,97,0)" fg:x="222" fg:w="68590"/><text x="0.5726%" y="351.50">suballoc.exe`suballoc::test::test_tlsf</text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::new (12 samples, 0.02%)</title><rect x="99.9622%" y="325" width="0.0174%" height="15" fill="rgb(234,150,53)" fg:x="68800" fg:w="12"/><text x="100.2122%" y="335.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::TLSF::init_mem (11 samples, 0.02%)</title><rect x="99.9637%" y="309" width="0.0160%" height="15" fill="rgb(228,201,54)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::from_elem (11 samples, 0.02%)</title><rect x="99.9637%" y="293" width="0.0160%" height="15" fill="rgb(222,22,37)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="303.50"></text></g><g><title>suballoc.exe`alloc::vec::spec_from_elem::impl$3::from_elem (11 samples, 0.02%)</title><rect x="99.9637%" y="277" width="0.0160%" height="15" fill="rgb(237,53,32)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="287.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_zeroed_in (11 samples, 0.02%)</title><rect x="99.9637%" y="261" width="0.0160%" height="15" fill="rgb(233,25,53)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="271.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (11 samples, 0.02%)</title><rect x="99.9637%" y="245" width="0.0160%" height="15" fill="rgb(210,40,34)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="255.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (11 samples, 0.02%)</title><rect x="99.9637%" y="229" width="0.0160%" height="15" fill="rgb(241,220,44)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="239.50"></text></g><g><title>`0x7FF97E75B44D (11 samples, 0.02%)</title><rect x="99.9637%" y="213" width="0.0160%" height="15" fill="rgb(235,28,35)" fg:x="68801" fg:w="11"/><text x="100.2137%" y="223.50"></text></g><g><title>all (68,826 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="68826"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FF97E7A5C1E (14 samples, 0.02%)</title><rect x="99.9797%" y="453" width="0.0203%" height="15" fill="rgb(224,130,29)" fg:x="68812" fg:w="14"/><text x="100.2297%" y="463.50"></text></g><g><title>`0x7FF97E7A5C73 (14 samples, 0.02%)</title><rect x="99.9797%" y="437" width="0.0203%" height="15" fill="rgb(235,212,8)" fg:x="68812" fg:w="14"/><text x="100.2297%" y="447.50"></text></g><g><title>`0x7FF97E7A5DEB (14 samples, 0.02%)</title><rect x="99.9797%" y="421" width="0.0203%" height="15" fill="rgb(223,33,50)" fg:x="68812" fg:w="14"/><text x="100.2297%" y="431.50"></text></g></svg></svg>