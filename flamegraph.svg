<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="6572"><g><title>`0x7FFFBFD5CC70 (1 samples, 0.02%)</title><rect x="0.0000%" y="549" width="0.0152%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FFFBFD426C6 (1 samples, 0.02%)</title><rect x="0.0152%" y="453" width="0.0152%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2652%" y="463.50"></text></g><g><title>`0x7FFFBFD42714 (1 samples, 0.02%)</title><rect x="0.0304%" y="453" width="0.0152%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2804%" y="463.50"></text></g><g><title>`0x7FFFBFD70128 (3 samples, 0.05%)</title><rect x="0.0152%" y="469" width="0.0456%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.2652%" y="479.50"></text></g><g><title>`0x7FFFBFD4288A (1 samples, 0.02%)</title><rect x="0.0456%" y="453" width="0.0152%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.2956%" y="463.50"></text></g><g><title>`0x7FFFBFD64549 (1 samples, 0.02%)</title><rect x="0.0456%" y="437" width="0.0152%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.2956%" y="447.50"></text></g><g><title>`0x7FFFBFD64733 (1 samples, 0.02%)</title><rect x="0.0456%" y="421" width="0.0152%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.2956%" y="431.50"></text></g><g><title>`0x7FFFBFD64DE0 (1 samples, 0.02%)</title><rect x="0.0456%" y="405" width="0.0152%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.2956%" y="415.50"></text></g><g><title>`0x7FFFBFD706C6 (1 samples, 0.02%)</title><rect x="0.0609%" y="421" width="0.0152%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.3109%" y="431.50"></text></g><g><title>`0x7FFFBFD7092E (1 samples, 0.02%)</title><rect x="0.0609%" y="405" width="0.0152%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.3109%" y="415.50"></text></g><g><title>`0x7FFFBFD3B44D (1 samples, 0.02%)</title><rect x="0.0609%" y="389" width="0.0152%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.3109%" y="399.50"></text></g><g><title>`0x7FFFBFD3D37A (1 samples, 0.02%)</title><rect x="0.0609%" y="373" width="0.0152%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.3109%" y="383.50"></text></g><g><title>`0x7FFFBFD54D2F (1 samples, 0.02%)</title><rect x="0.0609%" y="357" width="0.0152%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.3109%" y="367.50"></text></g><g><title>`0x7FFFBFD54B80 (1 samples, 0.02%)</title><rect x="0.0609%" y="341" width="0.0152%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.3109%" y="351.50"></text></g><g><title>`0x7FFFBFD54810 (1 samples, 0.02%)</title><rect x="0.0609%" y="325" width="0.0152%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="0.3109%" y="335.50"></text></g><g><title>`0x7FFFBFD54739 (1 samples, 0.02%)</title><rect x="0.0609%" y="309" width="0.0152%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.3109%" y="319.50"></text></g><g><title>`0x7FFFBFD538C0 (1 samples, 0.02%)</title><rect x="0.0609%" y="293" width="0.0152%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.3109%" y="303.50"></text></g><g><title>`0x7FFFBFD8D612 (1 samples, 0.02%)</title><rect x="0.0609%" y="277" width="0.0152%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3109%" y="287.50"></text></g><g><title>`0x7FFFBFDAD734 (1 samples, 0.02%)</title><rect x="0.0609%" y="261" width="0.0152%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3109%" y="271.50"></text></g><g><title>`0x7FFFBFD70BD6 (2 samples, 0.03%)</title><rect x="0.0609%" y="453" width="0.0304%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="2"/><text x="0.3109%" y="463.50"></text></g><g><title>`0x7FFFBFD70516 (2 samples, 0.03%)</title><rect x="0.0609%" y="437" width="0.0304%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="2"/><text x="0.3109%" y="447.50"></text></g><g><title>`0x7FFFBFD706F7 (1 samples, 0.02%)</title><rect x="0.0761%" y="421" width="0.0152%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3261%" y="431.50"></text></g><g><title>`0x7FFFBFD7086B (1 samples, 0.02%)</title><rect x="0.0761%" y="405" width="0.0152%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3261%" y="415.50"></text></g><g><title>`0x7FFFBFDADC94 (1 samples, 0.02%)</title><rect x="0.0761%" y="389" width="0.0152%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="0.3261%" y="399.50"></text></g><g><title>`0x7FFFBFD5D79A (6 samples, 0.09%)</title><rect x="0.0152%" y="517" width="0.0913%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="6"/><text x="0.2652%" y="527.50"></text></g><g><title>`0x7FFFBFD73720 (6 samples, 0.09%)</title><rect x="0.0152%" y="501" width="0.0913%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="6"/><text x="0.2652%" y="511.50"></text></g><g><title>`0x7FFFBFD700D3 (6 samples, 0.09%)</title><rect x="0.0152%" y="485" width="0.0913%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="6"/><text x="0.2652%" y="495.50"></text></g><g><title>`0x7FFFBFD70160 (3 samples, 0.05%)</title><rect x="0.0609%" y="469" width="0.0456%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="3"/><text x="0.3109%" y="479.50"></text></g><g><title>`0x7FFFBFD70CA0 (1 samples, 0.02%)</title><rect x="0.0913%" y="453" width="0.0152%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="0.3413%" y="463.50"></text></g><g><title>`0x7FFFBFD71258 (1 samples, 0.02%)</title><rect x="0.0913%" y="437" width="0.0152%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="0.3413%" y="447.50"></text></g><g><title>`0x7FFFBFDAD6D4 (1 samples, 0.02%)</title><rect x="0.0913%" y="421" width="0.0152%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.3413%" y="431.50"></text></g><g><title>`0x7FFFBDC5E4C3 (1 samples, 0.02%)</title><rect x="0.1065%" y="501" width="0.0152%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="0.3565%" y="511.50"></text></g><g><title>suballoc.exe`pre_c_initialization() (1 samples, 0.02%)</title><rect x="0.1065%" y="485" width="0.0152%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="0.3565%" y="495.50"></text></g><g><title>suballoc.exe`__scrt_file_policy::set_fmode (1 samples, 0.02%)</title><rect x="0.1065%" y="469" width="0.0152%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="0.3565%" y="479.50"></text></g><g><title>`0x7FFFBDC631F0 (1 samples, 0.02%)</title><rect x="0.1065%" y="453" width="0.0152%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.3565%" y="463.50"></text></g><g><title>`0x7FFFBDC619A9 (1 samples, 0.02%)</title><rect x="0.1217%" y="469" width="0.0152%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.3717%" y="479.50"></text></g><g><title>`0x7FFFBD608115 (1 samples, 0.02%)</title><rect x="0.1217%" y="453" width="0.0152%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.3717%" y="463.50"></text></g><g><title>`0x7FFFBD608168 (1 samples, 0.02%)</title><rect x="0.1217%" y="437" width="0.0152%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="0.3717%" y="447.50"></text></g><g><title>`0x7FFFBD60580E (1 samples, 0.02%)</title><rect x="0.1217%" y="421" width="0.0152%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="0.3717%" y="431.50"></text></g><g><title>`0x7FFFBFD7AB0C (1 samples, 0.02%)</title><rect x="0.1217%" y="405" width="0.0152%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.3717%" y="415.50"></text></g><g><title>`0x7FFFBFD7AC9C (1 samples, 0.02%)</title><rect x="0.1217%" y="389" width="0.0152%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.3717%" y="399.50"></text></g><g><title>`0x7FFFBFDB0044 (1 samples, 0.02%)</title><rect x="0.1217%" y="373" width="0.0152%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.3717%" y="383.50"></text></g><g><title>`0x7FFFBFD70F02 (1 samples, 0.02%)</title><rect x="0.1369%" y="357" width="0.0152%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.3869%" y="367.50"></text></g><g><title>`0x7FFFBFD706F7 (1 samples, 0.02%)</title><rect x="0.1369%" y="341" width="0.0152%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="0.3869%" y="351.50"></text></g><g><title>`0x7FFFBFD7086B (1 samples, 0.02%)</title><rect x="0.1369%" y="325" width="0.0152%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="0.3869%" y="335.50"></text></g><g><title>`0x7FFFBFDADC94 (1 samples, 0.02%)</title><rect x="0.1369%" y="309" width="0.0152%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="0.3869%" y="319.50"></text></g><g><title>`0x7FFFBFD24AAA (1 samples, 0.02%)</title><rect x="0.1522%" y="325" width="0.0152%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="0.4022%" y="335.50"></text></g><g><title>`0x7FFFBFD24D42 (1 samples, 0.02%)</title><rect x="0.1522%" y="309" width="0.0152%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="0.4022%" y="319.50"></text></g><g><title>`0x7FFFBFDAD9F4 (1 samples, 0.02%)</title><rect x="0.1522%" y="293" width="0.0152%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="0.4022%" y="303.50"></text></g><g><title>`0x7FFFBFD24AAA (1 samples, 0.02%)</title><rect x="0.1674%" y="261" width="0.0152%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="0.4174%" y="271.50"></text></g><g><title>`0x7FFFBFD24D42 (1 samples, 0.02%)</title><rect x="0.1674%" y="245" width="0.0152%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="0.4174%" y="255.50"></text></g><g><title>`0x7FFFBFDAD9F4 (1 samples, 0.02%)</title><rect x="0.1674%" y="229" width="0.0152%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.4174%" y="239.50"></text></g><g><title>`0x7FFFBFD2FB53 (4 samples, 0.06%)</title><rect x="0.1369%" y="389" width="0.0609%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="4"/><text x="0.3869%" y="399.50"></text></g><g><title>`0x7FFFBFD7020F (4 samples, 0.06%)</title><rect x="0.1369%" y="373" width="0.0609%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="4"/><text x="0.3869%" y="383.50"></text></g><g><title>`0x7FFFBFD70F70 (3 samples, 0.05%)</title><rect x="0.1522%" y="357" width="0.0456%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="3"/><text x="0.4022%" y="367.50"></text></g><g><title>`0x7FFFBFD71243 (3 samples, 0.05%)</title><rect x="0.1522%" y="341" width="0.0456%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="3"/><text x="0.4022%" y="351.50"></text></g><g><title>`0x7FFFBFD24C14 (2 samples, 0.03%)</title><rect x="0.1674%" y="325" width="0.0304%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="2"/><text x="0.4174%" y="335.50"></text></g><g><title>`0x7FFFBFD27B29 (2 samples, 0.03%)</title><rect x="0.1674%" y="309" width="0.0304%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="2"/><text x="0.4174%" y="319.50"></text></g><g><title>`0x7FFFBFD288A8 (2 samples, 0.03%)</title><rect x="0.1674%" y="293" width="0.0304%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="2"/><text x="0.4174%" y="303.50"></text></g><g><title>`0x7FFFBFD24479 (2 samples, 0.03%)</title><rect x="0.1674%" y="277" width="0.0304%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="2"/><text x="0.4174%" y="287.50"></text></g><g><title>`0x7FFFBFD24C14 (1 samples, 0.02%)</title><rect x="0.1826%" y="261" width="0.0152%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="0.4326%" y="271.50"></text></g><g><title>`0x7FFFBFD27B29 (1 samples, 0.02%)</title><rect x="0.1826%" y="245" width="0.0152%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="0.4326%" y="255.50"></text></g><g><title>`0x7FFFBFD27EC7 (1 samples, 0.02%)</title><rect x="0.1826%" y="229" width="0.0152%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="0.4326%" y="239.50"></text></g><g><title>`0x7FFFBFD2A7DD (1 samples, 0.02%)</title><rect x="0.1826%" y="213" width="0.0152%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="0.4326%" y="223.50"></text></g><g><title>`0x7FFFBFD2D7CB (1 samples, 0.02%)</title><rect x="0.1826%" y="197" width="0.0152%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="0.4326%" y="207.50"></text></g><g><title>`0x7FFFBFD26036 (1 samples, 0.02%)</title><rect x="0.1826%" y="181" width="0.0152%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="0.4326%" y="191.50"></text></g><g><title>`0x7FFFBE5F78A7 (1 samples, 0.02%)</title><rect x="0.1978%" y="293" width="0.0152%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="1"/><text x="0.4478%" y="303.50"></text></g><g><title>`0x7FFFBE5F7BA3 (1 samples, 0.02%)</title><rect x="0.1978%" y="277" width="0.0152%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="0.4478%" y="287.50"></text></g><g><title>`0x7FFFBE609780 (1 samples, 0.02%)</title><rect x="0.1978%" y="261" width="0.0152%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="0.4478%" y="271.50"></text></g><g><title>`0x7FFFBDC6045F (7 samples, 0.11%)</title><rect x="0.1217%" y="501" width="0.1065%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="7"/><text x="0.3717%" y="511.50"></text></g><g><title>`0x7FFFBDC605A2 (7 samples, 0.11%)</title><rect x="0.1217%" y="485" width="0.1065%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="7"/><text x="0.3717%" y="495.50"></text></g><g><title>`0x7FFFBDC619C7 (6 samples, 0.09%)</title><rect x="0.1369%" y="469" width="0.0913%" height="15" fill="rgb(244,35,45)" fg:x="9" fg:w="6"/><text x="0.3869%" y="479.50"></text></g><g><title>`0x7FFFBDC5C050 (6 samples, 0.09%)</title><rect x="0.1369%" y="453" width="0.0913%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="6"/><text x="0.3869%" y="463.50"></text></g><g><title>`0x7FFFBD5BDB72 (6 samples, 0.09%)</title><rect x="0.1369%" y="437" width="0.0913%" height="15" fill="rgb(240,54,50)" fg:x="9" fg:w="6"/><text x="0.3869%" y="447.50"></text></g><g><title>`0x7FFFBFD26AF4 (6 samples, 0.09%)</title><rect x="0.1369%" y="421" width="0.0913%" height="15" fill="rgb(233,84,52)" fg:x="9" fg:w="6"/><text x="0.3869%" y="431.50"></text></g><g><title>`0x7FFFBFD273E4 (6 samples, 0.09%)</title><rect x="0.1369%" y="405" width="0.0913%" height="15" fill="rgb(207,117,47)" fg:x="9" fg:w="6"/><text x="0.3869%" y="415.50"></text></g><g><title>`0x7FFFBFD2FBAE (2 samples, 0.03%)</title><rect x="0.1978%" y="389" width="0.0304%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="2"/><text x="0.4478%" y="399.50"></text></g><g><title>`0x7FFFBFD4D947 (2 samples, 0.03%)</title><rect x="0.1978%" y="373" width="0.0304%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="2"/><text x="0.4478%" y="383.50"></text></g><g><title>`0x7FFFBFD7D110 (2 samples, 0.03%)</title><rect x="0.1978%" y="357" width="0.0304%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="2"/><text x="0.4478%" y="367.50"></text></g><g><title>`0x7FFFBFD7D08A (2 samples, 0.03%)</title><rect x="0.1978%" y="341" width="0.0304%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="2"/><text x="0.4478%" y="351.50"></text></g><g><title>`0x7FFFBFD7D2F7 (2 samples, 0.03%)</title><rect x="0.1978%" y="325" width="0.0304%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="2"/><text x="0.4478%" y="335.50"></text></g><g><title>`0x7FFFBFD29A1D (2 samples, 0.03%)</title><rect x="0.1978%" y="309" width="0.0304%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="2"/><text x="0.4478%" y="319.50"></text></g><g><title>`0x7FFFBE5F78CA (1 samples, 0.02%)</title><rect x="0.2130%" y="293" width="0.0152%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="0.4630%" y="303.50"></text></g><g><title>`0x7FFFBE6209B1 (1 samples, 0.02%)</title><rect x="0.2130%" y="277" width="0.0152%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="1"/><text x="0.4630%" y="287.50"></text></g><g><title>`0x7FFFBFD347B1 (1 samples, 0.02%)</title><rect x="0.2130%" y="261" width="0.0152%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="0.4630%" y="271.50"></text></g><g><title>`0x7FFFBFD35B74 (1 samples, 0.02%)</title><rect x="0.2130%" y="245" width="0.0152%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="0.4630%" y="255.50"></text></g><g><title>`0x7FFFBFD365F6 (1 samples, 0.02%)</title><rect x="0.2130%" y="229" width="0.0152%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="1"/><text x="0.4630%" y="239.50"></text></g><g><title>`0x7FFFBFD2E412 (1 samples, 0.02%)</title><rect x="0.2130%" y="213" width="0.0152%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="0.4630%" y="223.50"></text></g><g><title>`0x7FFFBFD2F35E (1 samples, 0.02%)</title><rect x="0.2130%" y="197" width="0.0152%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="1"/><text x="0.4630%" y="207.50"></text></g><g><title>`0x7FFFBFD3095C (1 samples, 0.02%)</title><rect x="0.2130%" y="181" width="0.0152%" height="15" fill="rgb(235,124,12)" fg:x="14" fg:w="1"/><text x="0.4630%" y="191.50"></text></g><g><title>`0x7FFFBFD19B1A (1 samples, 0.02%)</title><rect x="0.2130%" y="165" width="0.0152%" height="15" fill="rgb(224,169,11)" fg:x="14" fg:w="1"/><text x="0.4630%" y="175.50"></text></g><g><title>`0x7FFFBFDAD8B4 (1 samples, 0.02%)</title><rect x="0.2130%" y="149" width="0.0152%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="1"/><text x="0.4630%" y="159.50"></text></g><g><title>`0x7FFFBFD347B1 (1 samples, 0.02%)</title><rect x="0.2282%" y="437" width="0.0152%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="0.4782%" y="447.50"></text></g><g><title>`0x7FFFBFD35B74 (1 samples, 0.02%)</title><rect x="0.2282%" y="421" width="0.0152%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="0.4782%" y="431.50"></text></g><g><title>`0x7FFFBFD36F37 (1 samples, 0.02%)</title><rect x="0.2282%" y="405" width="0.0152%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="0.4782%" y="415.50"></text></g><g><title>`0x7FFFBFD19B1A (1 samples, 0.02%)</title><rect x="0.2282%" y="389" width="0.0152%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="0.4782%" y="399.50"></text></g><g><title>`0x7FFFBFDAD8B4 (1 samples, 0.02%)</title><rect x="0.2282%" y="373" width="0.0152%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="0.4782%" y="383.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::grow_one&lt;usize,alloc::alloc::Global&gt; (1 samples, 0.02%)</title><rect x="0.4565%" y="405" width="0.0152%" height="15" fill="rgb(236,97,10)" fg:x="30" fg:w="1"/><text x="0.7065%" y="415.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1 samples, 0.02%)</title><rect x="0.4565%" y="389" width="0.0152%" height="15" fill="rgb(233,208,19)" fg:x="30" fg:w="1"/><text x="0.7065%" y="399.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="0.4565%" y="373" width="0.0152%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="1"/><text x="0.7065%" y="383.50"></text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1 samples, 0.02%)</title><rect x="0.4565%" y="357" width="0.0152%" height="15" fill="rgb(220,129,5)" fg:x="30" fg:w="1"/><text x="0.7065%" y="367.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1 samples, 0.02%)</title><rect x="0.4565%" y="341" width="0.0152%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="1"/><text x="0.7065%" y="351.50"></text></g><g><title>suballoc.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 0.02%)</title><rect x="0.4565%" y="325" width="0.0152%" height="15" fill="rgb(242,107,0)" fg:x="30" fg:w="1"/><text x="0.7065%" y="335.50"></text></g><g><title>suballoc.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1 samples, 0.02%)</title><rect x="0.4565%" y="309" width="0.0152%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="1"/><text x="0.7065%" y="319.50"></text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1 samples, 0.02%)</title><rect x="0.4565%" y="293" width="0.0152%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="1"/><text x="0.7065%" y="303.50"></text></g><g><title>`0x7FFFBFD336BD (1 samples, 0.02%)</title><rect x="0.4565%" y="277" width="0.0152%" height="15" fill="rgb(215,21,27)" fg:x="30" fg:w="1"/><text x="0.7065%" y="287.50"></text></g><g><title>`0x7FFFBFD338E3 (1 samples, 0.02%)</title><rect x="0.4565%" y="261" width="0.0152%" height="15" fill="rgb(232,23,21)" fg:x="30" fg:w="1"/><text x="0.7065%" y="271.50"></text></g><g><title>`0x7FFFBFD327D9 (1 samples, 0.02%)</title><rect x="0.4565%" y="245" width="0.0152%" height="15" fill="rgb(244,5,23)" fg:x="30" fg:w="1"/><text x="0.7065%" y="255.50"></text></g><g><title>`0x7FFFBFDB4513 (1 samples, 0.02%)</title><rect x="0.4565%" y="229" width="0.0152%" height="15" fill="rgb(226,81,46)" fg:x="30" fg:w="1"/><text x="0.7065%" y="239.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push (12 samples, 0.18%)</title><rect x="0.3652%" y="421" width="0.1826%" height="15" fill="rgb(247,70,30)" fg:x="24" fg:w="12"/><text x="0.6152%" y="431.50"></text></g><g><title>suballoc.exe`core::ptr::write (5 samples, 0.08%)</title><rect x="0.4717%" y="405" width="0.0761%" height="15" fill="rgb(212,68,19)" fg:x="31" fg:w="5"/><text x="0.7217%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::swap_remove (40 samples, 0.61%)</title><rect x="0.5478%" y="421" width="0.6086%" height="15" fill="rgb(240,187,13)" fg:x="36" fg:w="40"/><text x="0.7978%" y="431.50"></text></g><g><title>suballoc.exe`core::ptr::copy (40 samples, 0.61%)</title><rect x="0.5478%" y="405" width="0.6086%" height="15" fill="rgb(223,113,26)" fg:x="36" fg:w="40"/><text x="0.7978%" y="415.50"></text></g><g><title>suballoc.exe`core::hint::black_box(tuple$ (1 samples, 0.02%)</title><rect x="1.1564%" y="421" width="0.0152%" height="15" fill="rgb(206,192,2)" fg:x="76" fg:w="1"/><text x="1.4064%" y="431.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$6::next(core::ops::range::Range (1 samples, 0.02%)</title><rect x="1.1716%" y="421" width="0.0152%" height="15" fill="rgb(241,108,4)" fg:x="77" fg:w="1"/><text x="1.4216%" y="431.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (1 samples, 0.02%)</title><rect x="1.1716%" y="405" width="0.0152%" height="15" fill="rgb(247,173,49)" fg:x="77" fg:w="1"/><text x="1.4216%" y="415.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place (2 samples, 0.03%)</title><rect x="1.1869%" y="421" width="0.0304%" height="15" fill="rgb(224,114,35)" fg:x="78" fg:w="2"/><text x="1.4369%" y="431.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place(alloc::vec::Vec (2 samples, 0.03%)</title><rect x="1.1869%" y="405" width="0.0304%" height="15" fill="rgb(245,159,27)" fg:x="78" fg:w="2"/><text x="1.4369%" y="415.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (2 samples, 0.03%)</title><rect x="1.1869%" y="389" width="0.0304%" height="15" fill="rgb(245,172,44)" fg:x="78" fg:w="2"/><text x="1.4369%" y="399.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (2 samples, 0.03%)</title><rect x="1.1869%" y="373" width="0.0304%" height="15" fill="rgb(236,23,11)" fg:x="78" fg:w="2"/><text x="1.4369%" y="383.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2 samples, 0.03%)</title><rect x="1.1869%" y="357" width="0.0304%" height="15" fill="rgb(205,117,38)" fg:x="78" fg:w="2"/><text x="1.4369%" y="367.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (2 samples, 0.03%)</title><rect x="1.1869%" y="341" width="0.0304%" height="15" fill="rgb(237,72,25)" fg:x="78" fg:w="2"/><text x="1.4369%" y="351.50"></text></g><g><title>`0x7FFFBFD347B1 (2 samples, 0.03%)</title><rect x="1.1869%" y="325" width="0.0304%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="2"/><text x="1.4369%" y="335.50"></text></g><g><title>`0x7FFFBFD35B74 (2 samples, 0.03%)</title><rect x="1.1869%" y="309" width="0.0304%" height="15" fill="rgb(217,125,39)" fg:x="78" fg:w="2"/><text x="1.4369%" y="319.50"></text></g><g><title>`0x7FFFBFD36F37 (2 samples, 0.03%)</title><rect x="1.1869%" y="293" width="0.0304%" height="15" fill="rgb(235,36,10)" fg:x="78" fg:w="2"/><text x="1.4369%" y="303.50"></text></g><g><title>`0x7FFFBFD19B1A (2 samples, 0.03%)</title><rect x="1.1869%" y="277" width="0.0304%" height="15" fill="rgb(251,123,47)" fg:x="78" fg:w="2"/><text x="1.4369%" y="287.50"></text></g><g><title>`0x7FFFBFDAD8B4 (2 samples, 0.03%)</title><rect x="1.1869%" y="261" width="0.0304%" height="15" fill="rgb(221,13,13)" fg:x="78" fg:w="2"/><text x="1.4369%" y="271.50"></text></g><g><title>suballoc.exe`rand::distr::utils::impl$9::cast_from_int (2 samples, 0.03%)</title><rect x="1.2173%" y="389" width="0.0304%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="2"/><text x="1.4673%" y="399.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (3 samples, 0.05%)</title><rect x="1.4455%" y="181" width="0.0456%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="3"/><text x="1.6955%" y="191.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1 samples, 0.02%)</title><rect x="1.4912%" y="181" width="0.0152%" height="15" fill="rgb(245,182,24)" fg:x="98" fg:w="1"/><text x="1.7412%" y="191.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::add_xor_rot (5 samples, 0.08%)</title><rect x="1.4455%" y="197" width="0.0761%" height="15" fill="rgb(242,14,37)" fg:x="95" fg:w="5"/><text x="1.6955%" y="207.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (1 samples, 0.02%)</title><rect x="1.5064%" y="181" width="0.0152%" height="15" fill="rgb(246,228,12)" fg:x="99" fg:w="1"/><text x="1.7564%" y="191.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random (21 samples, 0.32%)</title><rect x="1.2173%" y="421" width="0.3195%" height="15" fill="rgb(213,55,15)" fg:x="80" fg:w="21"/><text x="1.4673%" y="431.50"></text></g><g><title>suballoc.exe`rand::distr::float::impl$9::sample (21 samples, 0.32%)</title><rect x="1.2173%" y="405" width="0.3195%" height="15" fill="rgb(209,9,3)" fg:x="80" fg:w="21"/><text x="1.4673%" y="415.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random (19 samples, 0.29%)</title><rect x="1.2477%" y="389" width="0.2891%" height="15" fill="rgb(230,59,30)" fg:x="82" fg:w="19"/><text x="1.4977%" y="399.50"></text></g><g><title>suballoc.exe`rand::distr::integer::impl$2::sample (19 samples, 0.29%)</title><rect x="1.2477%" y="373" width="0.2891%" height="15" fill="rgb(209,121,21)" fg:x="82" fg:w="19"/><text x="1.4977%" y="383.50"></text></g><g><title>suballoc.exe`rand::rngs::thread::impl$3::next_u32 (19 samples, 0.29%)</title><rect x="1.2477%" y="357" width="0.2891%" height="15" fill="rgb(220,109,13)" fg:x="82" fg:w="19"/><text x="1.4977%" y="367.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (19 samples, 0.29%)</title><rect x="1.2477%" y="341" width="0.2891%" height="15" fill="rgb(232,18,1)" fg:x="82" fg:w="19"/><text x="1.4977%" y="351.50"></text></g><g><title>suballoc.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (19 samples, 0.29%)</title><rect x="1.2477%" y="325" width="0.2891%" height="15" fill="rgb(215,41,42)" fg:x="82" fg:w="19"/><text x="1.4977%" y="335.50"></text></g><g><title>suballoc.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (6 samples, 0.09%)</title><rect x="1.4455%" y="309" width="0.0913%" height="15" fill="rgb(224,123,36)" fg:x="95" fg:w="6"/><text x="1.6955%" y="319.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (6 samples, 0.09%)</title><rect x="1.4455%" y="293" width="0.0913%" height="15" fill="rgb(240,125,3)" fg:x="95" fg:w="6"/><text x="1.6955%" y="303.50"></text></g><g><title>suballoc.exe`chacha20::rng::impl$42::generate (6 samples, 0.09%)</title><rect x="1.4455%" y="277" width="0.0913%" height="15" fill="rgb(205,98,50)" fg:x="95" fg:w="6"/><text x="1.6955%" y="287.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (6 samples, 0.09%)</title><rect x="1.4455%" y="261" width="0.0913%" height="15" fill="rgb(205,185,37)" fg:x="95" fg:w="6"/><text x="1.6955%" y="271.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (6 samples, 0.09%)</title><rect x="1.4455%" y="245" width="0.0913%" height="15" fill="rgb(238,207,15)" fg:x="95" fg:w="6"/><text x="1.6955%" y="255.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rounds (6 samples, 0.09%)</title><rect x="1.4455%" y="229" width="0.0913%" height="15" fill="rgb(213,199,42)" fg:x="95" fg:w="6"/><text x="1.6955%" y="239.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::double_quarter_round (6 samples, 0.09%)</title><rect x="1.4455%" y="213" width="0.0913%" height="15" fill="rgb(235,201,11)" fg:x="95" fg:w="6"/><text x="1.6955%" y="223.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::cols_to_rows (1 samples, 0.02%)</title><rect x="1.5216%" y="197" width="0.0152%" height="15" fill="rgb(207,46,11)" fg:x="100" fg:w="1"/><text x="1.7716%" y="207.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (1 samples, 0.02%)</title><rect x="1.5216%" y="181" width="0.0152%" height="15" fill="rgb(241,35,35)" fg:x="100" fg:w="1"/><text x="1.7716%" y="191.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (4 samples, 0.06%)</title><rect x="1.6433%" y="149" width="0.0609%" height="15" fill="rgb(243,32,47)" fg:x="108" fg:w="4"/><text x="1.8933%" y="159.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.03%)</title><rect x="1.7042%" y="149" width="0.0304%" height="15" fill="rgb(247,202,23)" fg:x="112" fg:w="2"/><text x="1.9542%" y="159.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$13::sample_single (16 samples, 0.24%)</title><rect x="1.5368%" y="389" width="0.2435%" height="15" fill="rgb(219,102,11)" fg:x="101" fg:w="16"/><text x="1.7868%" y="399.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$13::sample_single_inclusive (16 samples, 0.24%)</title><rect x="1.5368%" y="373" width="0.2435%" height="15" fill="rgb(243,110,44)" fg:x="101" fg:w="16"/><text x="1.7868%" y="383.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random (16 samples, 0.24%)</title><rect x="1.5368%" y="357" width="0.2435%" height="15" fill="rgb(222,74,54)" fg:x="101" fg:w="16"/><text x="1.7868%" y="367.50"></text></g><g><title>suballoc.exe`rand::distr::integer::impl$2::sample (16 samples, 0.24%)</title><rect x="1.5368%" y="341" width="0.2435%" height="15" fill="rgb(216,99,12)" fg:x="101" fg:w="16"/><text x="1.7868%" y="351.50"></text></g><g><title>suballoc.exe`rand::rngs::thread::impl$3::next_u32 (16 samples, 0.24%)</title><rect x="1.5368%" y="325" width="0.2435%" height="15" fill="rgb(226,22,26)" fg:x="101" fg:w="16"/><text x="1.7868%" y="335.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (16 samples, 0.24%)</title><rect x="1.5368%" y="309" width="0.2435%" height="15" fill="rgb(217,163,10)" fg:x="101" fg:w="16"/><text x="1.7868%" y="319.50"></text></g><g><title>suballoc.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (16 samples, 0.24%)</title><rect x="1.5368%" y="293" width="0.2435%" height="15" fill="rgb(213,25,53)" fg:x="101" fg:w="16"/><text x="1.7868%" y="303.50"></text></g><g><title>suballoc.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (9 samples, 0.14%)</title><rect x="1.6433%" y="277" width="0.1369%" height="15" fill="rgb(252,105,26)" fg:x="108" fg:w="9"/><text x="1.8933%" y="287.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (9 samples, 0.14%)</title><rect x="1.6433%" y="261" width="0.1369%" height="15" fill="rgb(220,39,43)" fg:x="108" fg:w="9"/><text x="1.8933%" y="271.50"></text></g><g><title>suballoc.exe`chacha20::rng::impl$42::generate (9 samples, 0.14%)</title><rect x="1.6433%" y="245" width="0.1369%" height="15" fill="rgb(229,68,48)" fg:x="108" fg:w="9"/><text x="1.8933%" y="255.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (9 samples, 0.14%)</title><rect x="1.6433%" y="229" width="0.1369%" height="15" fill="rgb(252,8,32)" fg:x="108" fg:w="9"/><text x="1.8933%" y="239.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (9 samples, 0.14%)</title><rect x="1.6433%" y="213" width="0.1369%" height="15" fill="rgb(223,20,43)" fg:x="108" fg:w="9"/><text x="1.8933%" y="223.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rounds (9 samples, 0.14%)</title><rect x="1.6433%" y="197" width="0.1369%" height="15" fill="rgb(229,81,49)" fg:x="108" fg:w="9"/><text x="1.8933%" y="207.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::double_quarter_round (9 samples, 0.14%)</title><rect x="1.6433%" y="181" width="0.1369%" height="15" fill="rgb(236,28,36)" fg:x="108" fg:w="9"/><text x="1.8933%" y="191.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::add_xor_rot (9 samples, 0.14%)</title><rect x="1.6433%" y="165" width="0.1369%" height="15" fill="rgb(249,185,26)" fg:x="108" fg:w="9"/><text x="1.8933%" y="175.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (3 samples, 0.05%)</title><rect x="1.7346%" y="149" width="0.0456%" height="15" fill="rgb(249,174,33)" fg:x="114" fg:w="3"/><text x="1.9846%" y="159.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_neg (3 samples, 0.05%)</title><rect x="1.8107%" y="341" width="0.0456%" height="15" fill="rgb(233,201,37)" fg:x="119" fg:w="3"/><text x="2.0607%" y="351.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_sub (3 samples, 0.05%)</title><rect x="1.8107%" y="325" width="0.0456%" height="15" fill="rgb(221,78,26)" fg:x="119" fg:w="3"/><text x="2.0607%" y="335.50"></text></g><g><title>suballoc.exe`rand::distr::utils::impl$5::wmul (1 samples, 0.02%)</title><rect x="1.8564%" y="341" width="0.0152%" height="15" fill="rgb(250,127,30)" fg:x="122" fg:w="1"/><text x="2.1064%" y="351.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (1 samples, 0.02%)</title><rect x="1.9933%" y="133" width="0.0152%" height="15" fill="rgb(230,49,44)" fg:x="131" fg:w="1"/><text x="2.2433%" y="143.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::add_xor_rot (5 samples, 0.08%)</title><rect x="1.9933%" y="149" width="0.0761%" height="15" fill="rgb(229,67,23)" fg:x="131" fg:w="5"/><text x="2.2433%" y="159.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (4 samples, 0.06%)</title><rect x="2.0085%" y="133" width="0.0609%" height="15" fill="rgb(249,83,47)" fg:x="132" fg:w="4"/><text x="2.2585%" y="143.50"></text></g><g><title>suballoc.exe`chacha20::rng::impl$42::generate (6 samples, 0.09%)</title><rect x="1.9933%" y="229" width="0.0913%" height="15" fill="rgb(215,43,3)" fg:x="131" fg:w="6"/><text x="2.2433%" y="239.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (6 samples, 0.09%)</title><rect x="1.9933%" y="213" width="0.0913%" height="15" fill="rgb(238,154,13)" fg:x="131" fg:w="6"/><text x="2.2433%" y="223.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (6 samples, 0.09%)</title><rect x="1.9933%" y="197" width="0.0913%" height="15" fill="rgb(219,56,2)" fg:x="131" fg:w="6"/><text x="2.2433%" y="207.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rounds (6 samples, 0.09%)</title><rect x="1.9933%" y="181" width="0.0913%" height="15" fill="rgb(233,0,4)" fg:x="131" fg:w="6"/><text x="2.2433%" y="191.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::double_quarter_round (6 samples, 0.09%)</title><rect x="1.9933%" y="165" width="0.0913%" height="15" fill="rgb(235,30,7)" fg:x="131" fg:w="6"/><text x="2.2433%" y="175.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rows_to_cols (1 samples, 0.02%)</title><rect x="2.0694%" y="149" width="0.0152%" height="15" fill="rgb(250,79,13)" fg:x="136" fg:w="1"/><text x="2.3194%" y="159.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (1 samples, 0.02%)</title><rect x="2.0694%" y="133" width="0.0152%" height="15" fill="rgb(211,146,34)" fg:x="136" fg:w="1"/><text x="2.3194%" y="143.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (37 samples, 0.56%)</title><rect x="1.5368%" y="421" width="0.5630%" height="15" fill="rgb(228,22,38)" fg:x="101" fg:w="37"/><text x="1.7868%" y="431.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::impl$8::sample_single(core::ops::range::Range (37 samples, 0.56%)</title><rect x="1.5368%" y="405" width="0.5630%" height="15" fill="rgb(235,168,5)" fg:x="101" fg:w="37"/><text x="1.7868%" y="415.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$1::sample_single (21 samples, 0.32%)</title><rect x="1.7803%" y="389" width="0.3195%" height="15" fill="rgb(221,155,16)" fg:x="117" fg:w="21"/><text x="2.0303%" y="399.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single (21 samples, 0.32%)</title><rect x="1.7803%" y="373" width="0.3195%" height="15" fill="rgb(215,215,53)" fg:x="117" fg:w="21"/><text x="2.0303%" y="383.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (21 samples, 0.32%)</title><rect x="1.7803%" y="357" width="0.3195%" height="15" fill="rgb(223,4,10)" fg:x="117" fg:w="21"/><text x="2.0303%" y="367.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random (15 samples, 0.23%)</title><rect x="1.8716%" y="341" width="0.2282%" height="15" fill="rgb(234,103,6)" fg:x="123" fg:w="15"/><text x="2.1216%" y="351.50"></text></g><g><title>suballoc.exe`rand::distr::integer::impl$2::sample (15 samples, 0.23%)</title><rect x="1.8716%" y="325" width="0.2282%" height="15" fill="rgb(227,97,0)" fg:x="123" fg:w="15"/><text x="2.1216%" y="335.50"></text></g><g><title>suballoc.exe`rand::rngs::thread::impl$3::next_u32 (15 samples, 0.23%)</title><rect x="1.8716%" y="309" width="0.2282%" height="15" fill="rgb(234,150,53)" fg:x="123" fg:w="15"/><text x="2.1216%" y="319.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (15 samples, 0.23%)</title><rect x="1.8716%" y="293" width="0.2282%" height="15" fill="rgb(228,201,54)" fg:x="123" fg:w="15"/><text x="2.1216%" y="303.50"></text></g><g><title>suballoc.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (15 samples, 0.23%)</title><rect x="1.8716%" y="277" width="0.2282%" height="15" fill="rgb(222,22,37)" fg:x="123" fg:w="15"/><text x="2.1216%" y="287.50"></text></g><g><title>suballoc.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (8 samples, 0.12%)</title><rect x="1.9781%" y="261" width="0.1217%" height="15" fill="rgb(237,53,32)" fg:x="130" fg:w="8"/><text x="2.2281%" y="271.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (8 samples, 0.12%)</title><rect x="1.9781%" y="245" width="0.1217%" height="15" fill="rgb(233,25,53)" fg:x="130" fg:w="8"/><text x="2.2281%" y="255.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed_and_generate&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; (1 samples, 0.02%)</title><rect x="2.0846%" y="229" width="0.0152%" height="15" fill="rgb(210,40,34)" fg:x="137" fg:w="1"/><text x="2.3346%" y="239.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed (1 samples, 0.02%)</title><rect x="2.0846%" y="213" width="0.0152%" height="15" fill="rgb(241,220,44)" fg:x="137" fg:w="1"/><text x="2.3346%" y="223.50"></text></g><g><title>suballoc.exe`rand_core::SeedableRng::try_from_rng (1 samples, 0.02%)</title><rect x="2.0846%" y="197" width="0.0152%" height="15" fill="rgb(235,28,35)" fg:x="137" fg:w="1"/><text x="2.3346%" y="207.50"></text></g><g><title>`0x7FFFBD3F509D (1 samples, 0.02%)</title><rect x="2.0846%" y="181" width="0.0152%" height="15" fill="rgb(210,56,17)" fg:x="137" fg:w="1"/><text x="2.3346%" y="191.50"></text></g><g><title>`0x7FFFBFDB21C8 (1 samples, 0.02%)</title><rect x="2.0846%" y="165" width="0.0152%" height="15" fill="rgb(224,130,29)" fg:x="137" fg:w="1"/><text x="2.3346%" y="175.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (7 samples, 0.11%)</title><rect x="2.2063%" y="405" width="0.1065%" height="15" fill="rgb(235,212,8)" fg:x="145" fg:w="7"/><text x="2.4563%" y="415.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="2.2824%" y="389" width="0.0304%" height="15" fill="rgb(223,33,50)" fg:x="150" fg:w="2"/><text x="2.5324%" y="399.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="2.2824%" y="373" width="0.0304%" height="15" fill="rgb(219,149,13)" fg:x="150" fg:w="2"/><text x="2.5324%" y="383.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="2.3128%" y="405" width="0.0152%" height="15" fill="rgb(250,156,29)" fg:x="152" fg:w="1"/><text x="2.5628%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="2.3128%" y="389" width="0.0152%" height="15" fill="rgb(216,193,19)" fg:x="152" fg:w="1"/><text x="2.5628%" y="399.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (1 samples, 0.02%)</title><rect x="2.3128%" y="373" width="0.0152%" height="15" fill="rgb(216,135,14)" fg:x="152" fg:w="1"/><text x="2.5628%" y="383.50"></text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::allocate (17 samples, 0.26%)</title><rect x="2.0998%" y="421" width="0.2587%" height="15" fill="rgb(241,47,5)" fg:x="138" fg:w="17"/><text x="2.3498%" y="431.50"></text></g><g><title>suballoc.exe`core::iter::adapters::enumerate::impl$1::next(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="2.3281%" y="405" width="0.0304%" height="15" fill="rgb(233,42,35)" fg:x="153" fg:w="2"/><text x="2.5781%" y="415.50"></text></g><g><title>suballoc.exe`core::slice::iter::impl$183::next(core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="2.3281%" y="389" width="0.0304%" height="15" fill="rgb(231,13,6)" fg:x="153" fg:w="2"/><text x="2.5781%" y="399.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push (6 samples, 0.09%)</title><rect x="7.0450%" y="405" width="0.0913%" height="15" fill="rgb(207,181,40)" fg:x="463" fg:w="6"/><text x="7.2950%" y="415.50"></text></g><g><title>suballoc.exe`core::ptr::write (1 samples, 0.02%)</title><rect x="7.1211%" y="389" width="0.0152%" height="15" fill="rgb(254,173,49)" fg:x="468" fg:w="1"/><text x="7.3711%" y="399.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::swap_remove (22 samples, 0.33%)</title><rect x="7.1363%" y="405" width="0.3348%" height="15" fill="rgb(221,1,38)" fg:x="469" fg:w="22"/><text x="7.3863%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::set_len (1 samples, 0.02%)</title><rect x="7.4559%" y="389" width="0.0152%" height="15" fill="rgb(206,124,46)" fg:x="490" fg:w="1"/><text x="7.7059%" y="399.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$13::index(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="7.4711%" y="405" width="0.0152%" height="15" fill="rgb(249,21,11)" fg:x="491" fg:w="1"/><text x="7.7211%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="7.4711%" y="389" width="0.0152%" height="15" fill="rgb(222,201,40)" fg:x="491" fg:w="1"/><text x="7.7211%" y="399.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (1 samples, 0.02%)</title><rect x="7.4711%" y="373" width="0.0152%" height="15" fill="rgb(235,61,29)" fg:x="491" fg:w="1"/><text x="7.7211%" y="383.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;suballoc::core::MemBlock,alloc::alloc::Global&gt;::as_mut_slice (1 samples, 0.02%)</title><rect x="7.4863%" y="373" width="0.0152%" height="15" fill="rgb(219,207,3)" fg:x="492" fg:w="1"/><text x="7.7363%" y="383.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (3 samples, 0.05%)</title><rect x="7.4863%" y="405" width="0.0456%" height="15" fill="rgb(222,56,46)" fg:x="492" fg:w="3"/><text x="7.7363%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (3 samples, 0.05%)</title><rect x="7.4863%" y="389" width="0.0456%" height="15" fill="rgb(239,76,54)" fg:x="492" fg:w="3"/><text x="7.7363%" y="399.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (2 samples, 0.03%)</title><rect x="7.5015%" y="373" width="0.0304%" height="15" fill="rgb(231,124,27)" fg:x="493" fg:w="2"/><text x="7.7515%" y="383.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="7.5320%" y="389" width="0.0304%" height="15" fill="rgb(249,195,6)" fg:x="495" fg:w="2"/><text x="7.7820%" y="399.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="7.5320%" y="373" width="0.0304%" height="15" fill="rgb(237,174,47)" fg:x="495" fg:w="2"/><text x="7.7820%" y="383.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (6 samples, 0.09%)</title><rect x="7.5320%" y="405" width="0.0913%" height="15" fill="rgb(206,201,31)" fg:x="495" fg:w="6"/><text x="7.7820%" y="415.50"></text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;suballoc::core::MemBlock&gt; &gt;*, enum2$&lt;core::option::Option (4 samples, 0.06%)</title><rect x="7.5624%" y="389" width="0.0609%" height="15" fill="rgb(231,57,52)" fg:x="497" fg:w="4"/><text x="7.8124%" y="399.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (2 samples, 0.03%)</title><rect x="7.6233%" y="405" width="0.0304%" height="15" fill="rgb(248,177,22)" fg:x="501" fg:w="2"/><text x="7.8733%" y="415.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_slice (2 samples, 0.03%)</title><rect x="7.6233%" y="389" width="0.0304%" height="15" fill="rgb(215,211,37)" fg:x="501" fg:w="2"/><text x="7.8733%" y="399.50"></text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::deallocate (4,912 samples, 74.74%)</title><rect x="2.3585%" y="421" width="74.7413%" height="15" fill="rgb(241,128,51)" fg:x="155" fg:w="4912"/><text x="2.6085%" y="431.50">suballoc.exe`suballoc::core::SubAllocator::deallocate</text></g><g><title>suballoc.exe`core::slice::iter::impl$183::position(core::slice::iter::Iter (4,564 samples, 69.45%)</title><rect x="7.6537%" y="405" width="69.4461%" height="15" fill="rgb(227,165,31)" fg:x="503" fg:w="4564"/><text x="7.9037%" y="415.50">suballoc.exe`core::slice::iter::impl$183::position(core::slice::iter::Iter</text></g><g><title>suballoc.exe`core::slice::iter::impl$183::next(core::slice::iter::Iter (4 samples, 0.06%)</title><rect x="77.0390%" y="389" width="0.0609%" height="15" fill="rgb(228,167,24)" fg:x="5063" fg:w="4"/><text x="77.2890%" y="399.50"></text></g><g><title>suballoc.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,usize,suballoc::core::impl$2::free::closure_env$0,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="77.0998%" y="341" width="0.0304%" height="15" fill="rgb(228,143,12)" fg:x="5067" fg:w="2"/><text x="77.3498%" y="351.50"></text></g><g><title>suballoc.exe`suballoc::core::impl$2::free::closure$0 (2 samples, 0.03%)</title><rect x="77.0998%" y="325" width="0.0304%" height="15" fill="rgb(249,149,8)" fg:x="5067" fg:w="2"/><text x="77.3498%" y="335.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="77.0998%" y="309" width="0.0304%" height="15" fill="rgb(243,35,44)" fg:x="5067" fg:w="2"/><text x="77.3498%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::free (3 samples, 0.05%)</title><rect x="77.0998%" y="421" width="0.0456%" height="15" fill="rgb(246,89,9)" fg:x="5067" fg:w="3"/><text x="77.3498%" y="431.50"></text></g><g><title>suballoc.exe`core::iter::traits::iterator::Iterator::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (3 samples, 0.05%)</title><rect x="77.0998%" y="405" width="0.0456%" height="15" fill="rgb(233,213,13)" fg:x="5067" fg:w="3"/><text x="77.3498%" y="415.50"></text></g><g><title>suballoc.exe`core::iter::traits::accum::impl$48::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (3 samples, 0.05%)</title><rect x="77.0998%" y="389" width="0.0456%" height="15" fill="rgb(233,141,41)" fg:x="5067" fg:w="3"/><text x="77.3498%" y="399.50"></text></g><g><title>suballoc.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;usize&gt;,suballoc::core::impl$2::free::closure_env$0&gt;, unsigned long long, core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (3 samples, 0.05%)</title><rect x="77.0998%" y="373" width="0.0456%" height="15" fill="rgb(239,167,4)" fg:x="5067" fg:w="3"/><text x="77.3498%" y="383.50"></text></g><g><title>suballoc.exe`core::slice::iter::impl$183::fold(core::slice::iter::Iter&lt;usize&gt;, unsigned long long, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,usize,suballoc::core::impl$2::free::closure_env$0,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (3 samples, 0.05%)</title><rect x="77.0998%" y="357" width="0.0456%" height="15" fill="rgb(209,217,16)" fg:x="5067" fg:w="3"/><text x="77.3498%" y="367.50"></text></g><g><title>suballoc.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (1 samples, 0.02%)</title><rect x="77.1302%" y="341" width="0.0152%" height="15" fill="rgb(219,88,35)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="351.50"></text></g><g><title>suballoc.exe`std::io::stdio::_print (1 samples, 0.02%)</title><rect x="77.1302%" y="325" width="0.0152%" height="15" fill="rgb(220,193,23)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="335.50"></text></g><g><title>suballoc.exe`std::io::stdio::print_to (1 samples, 0.02%)</title><rect x="77.1302%" y="309" width="0.0152%" height="15" fill="rgb(230,90,52)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="319.50"></text></g><g><title>suballoc.exe`std::io::stdio::impl$15::write_fmt (1 samples, 0.02%)</title><rect x="77.1302%" y="293" width="0.0152%" height="15" fill="rgb(252,106,19)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="303.50"></text></g><g><title>suballoc.exe`std::io::stdio::impl$16::write_fmt (1 samples, 0.02%)</title><rect x="77.1302%" y="277" width="0.0152%" height="15" fill="rgb(206,74,20)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="287.50"></text></g><g><title>suballoc.exe`std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="77.1302%" y="261" width="0.0152%" height="15" fill="rgb(230,138,44)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="271.50"></text></g><g><title>suballoc.exe`std::io::default_write_fmt (1 samples, 0.02%)</title><rect x="77.1302%" y="245" width="0.0152%" height="15" fill="rgb(235,182,43)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="255.50"></text></g><g><title>suballoc.exe`core::fmt::write (1 samples, 0.02%)</title><rect x="77.1302%" y="229" width="0.0152%" height="15" fill="rgb(242,16,51)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="239.50"></text></g><g><title>suballoc.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.02%)</title><rect x="77.1302%" y="213" width="0.0152%" height="15" fill="rgb(248,9,4)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="223.50"></text></g><g><title>suballoc.exe`std::io::stdio::impl$19::write_all (1 samples, 0.02%)</title><rect x="77.1302%" y="197" width="0.0152%" height="15" fill="rgb(210,31,22)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="207.50"></text></g><g><title>suballoc.exe`core::cell::RefCell::borrow_mut (1 samples, 0.02%)</title><rect x="77.1302%" y="181" width="0.0152%" height="15" fill="rgb(239,54,39)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="191.50"></text></g><g><title>suballoc.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 0.02%)</title><rect x="77.1302%" y="165" width="0.0152%" height="15" fill="rgb(230,99,41)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="175.50"></text></g><g><title>suballoc.exe`core::result::impl$27::branch (1 samples, 0.02%)</title><rect x="77.1302%" y="149" width="0.0152%" height="15" fill="rgb(253,106,12)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="159.50"></text></g><g><title>suballoc.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 0.02%)</title><rect x="77.1302%" y="133" width="0.0152%" height="15" fill="rgb(213,46,41)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="143.50"></text></g><g><title>suballoc.exe`std::io::stdio::impl$1::write (1 samples, 0.02%)</title><rect x="77.1302%" y="117" width="0.0152%" height="15" fill="rgb(215,133,35)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="127.50"></text></g><g><title>suballoc.exe`std::io::stdio::handle_ebadf (1 samples, 0.02%)</title><rect x="77.1302%" y="101" width="0.0152%" height="15" fill="rgb(213,28,5)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="111.50"></text></g><g><title>suballoc.exe`std::sys::stdio::windows::write (1 samples, 0.02%)</title><rect x="77.1302%" y="85" width="0.0152%" height="15" fill="rgb(215,77,49)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="95.50"></text></g><g><title>suballoc.exe`std::sys::stdio::windows::is_console (1 samples, 0.02%)</title><rect x="77.1302%" y="69" width="0.0152%" height="15" fill="rgb(248,100,22)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="79.50"></text></g><g><title>`0x7FFFBD5F3D50 (1 samples, 0.02%)</title><rect x="77.1302%" y="53" width="0.0152%" height="15" fill="rgb(208,67,9)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="63.50"></text></g><g><title>`0x7FFFBFDAD5D4 (1 samples, 0.02%)</title><rect x="77.1302%" y="37" width="0.0152%" height="15" fill="rgb(219,133,21)" fg:x="5069" fg:w="1"/><text x="77.3802%" y="47.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$6::next(core::ops::range::Range (2 samples, 0.03%)</title><rect x="77.1455%" y="357" width="0.0304%" height="15" fill="rgb(246,46,29)" fg:x="5070" fg:w="2"/><text x="77.3955%" y="367.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (2 samples, 0.03%)</title><rect x="77.1455%" y="341" width="0.0304%" height="15" fill="rgb(246,185,52)" fg:x="5070" fg:w="2"/><text x="77.3955%" y="351.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add(enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="77.1759%" y="357" width="0.0304%" height="15" fill="rgb(252,136,11)" fg:x="5072" fg:w="2"/><text x="77.4259%" y="367.50"></text></g><g><title>suballoc.exe`alloc::vec::from_elem(enum2$&lt;core::option::Option (760 samples, 11.56%)</title><rect x="77.1455%" y="405" width="11.5642%" height="15" fill="rgb(219,138,53)" fg:x="5070" fg:w="760"/><text x="77.3955%" y="415.50">suballoc.exe`allo..</text></g><g><title>suballoc.exe`alloc::vec::spec_from_elem::impl$0::from_elem(enum2$&lt;core::option::Option (760 samples, 11.56%)</title><rect x="77.1455%" y="389" width="11.5642%" height="15" fill="rgb(211,51,23)" fg:x="5070" fg:w="760"/><text x="77.3955%" y="399.50">suballoc.exe`allo..</text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;enum2$&lt;core::option::Option&lt;suballoc::core::MemBlock&gt; &gt;,alloc::alloc::Global&gt;::extend_with(unsigned long long, enum2$&lt;core::option::Option (760 samples, 11.56%)</title><rect x="77.1455%" y="373" width="11.5642%" height="15" fill="rgb(247,221,28)" fg:x="5070" fg:w="760"/><text x="77.3955%" y="383.50">suballoc.exe`allo..</text></g><g><title>suballoc.exe`core::ptr::write(enum2$&lt;core::option::Option&lt;suballoc::core::MemBlock&gt; &gt;*, enum2$&lt;core::option::Option (756 samples, 11.50%)</title><rect x="77.2063%" y="357" width="11.5033%" height="15" fill="rgb(251,222,45)" fg:x="5074" fg:w="756"/><text x="77.4563%" y="367.50">suballoc.exe`core..</text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (6 samples, 0.09%)</title><rect x="88.7097%" y="357" width="0.0913%" height="15" fill="rgb(217,162,53)" fg:x="5830" fg:w="6"/><text x="88.9597%" y="367.50"></text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::new (1,486 samples, 22.61%)</title><rect x="77.1455%" y="421" width="22.6111%" height="15" fill="rgb(229,93,14)" fg:x="5070" fg:w="1486"/><text x="77.3955%" y="431.50">suballoc.exe`suballoc::core::SubAllo..</text></g><g><title>suballoc.exe`alloc::vec::from_elem (726 samples, 11.05%)</title><rect x="88.7097%" y="405" width="11.0469%" height="15" fill="rgb(209,67,49)" fg:x="5830" fg:w="726"/><text x="88.9597%" y="415.50">suballoc.exe`all..</text></g><g><title>suballoc.exe`alloc::vec::spec_from_elem::impl$0::from_elem (726 samples, 11.05%)</title><rect x="88.7097%" y="389" width="11.0469%" height="15" fill="rgb(213,87,29)" fg:x="5830" fg:w="726"/><text x="88.9597%" y="399.50">suballoc.exe`all..</text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;suballoc::core::MemBlock,alloc::alloc::Global&gt;::extend_with (726 samples, 11.05%)</title><rect x="88.7097%" y="373" width="11.0469%" height="15" fill="rgb(205,151,52)" fg:x="5830" fg:w="726"/><text x="88.9597%" y="383.50">suballoc.exe`all..</text></g><g><title>suballoc.exe`core::ptr::write (720 samples, 10.96%)</title><rect x="88.8010%" y="357" width="10.9556%" height="15" fill="rgb(253,215,39)" fg:x="5836" fg:w="720"/><text x="89.0510%" y="367.50">suballoc.exe`cor..</text></g><g><title>`0x7FFFBFD5CC91 (6,557 samples, 99.77%)</title><rect x="0.0152%" y="549" width="99.7718%" height="15" fill="rgb(221,220,41)" fg:x="1" fg:w="6557"/><text x="0.2652%" y="559.50">`0x7FFFBFD5CC91</text></g><g><title>`0x7FFFBECF7374 (6,557 samples, 99.77%)</title><rect x="0.0152%" y="533" width="99.7718%" height="15" fill="rgb(218,133,21)" fg:x="1" fg:w="6557"/><text x="0.2652%" y="543.50">`0x7FFFBECF7374</text></g><g><title>suballoc.exe`__scrt_common_main_seh() (6,551 samples, 99.68%)</title><rect x="0.1065%" y="517" width="99.6805%" height="15" fill="rgb(221,193,43)" fg:x="7" fg:w="6551"/><text x="0.3565%" y="527.50">suballoc.exe`__scrt_common_main_seh()</text></g><g><title>suballoc.exe`invoke_main() (6,543 samples, 99.56%)</title><rect x="0.2282%" y="501" width="99.5587%" height="15" fill="rgb(240,128,52)" fg:x="15" fg:w="6543"/><text x="0.4782%" y="511.50">suballoc.exe`invoke_main()</text></g><g><title>suballoc.exe`main (6,543 samples, 99.56%)</title><rect x="0.2282%" y="485" width="99.5587%" height="15" fill="rgb(253,114,12)" fg:x="15" fg:w="6543"/><text x="0.4782%" y="495.50">suballoc.exe`main</text></g><g><title>suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (6,543 samples, 99.56%)</title><rect x="0.2282%" y="469" width="99.5587%" height="15" fill="rgb(215,223,47)" fg:x="15" fg:w="6543"/><text x="0.4782%" y="479.50">suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>suballoc.exe`suballoc::main (6,543 samples, 99.56%)</title><rect x="0.2282%" y="453" width="99.5587%" height="15" fill="rgb(248,225,23)" fg:x="15" fg:w="6543"/><text x="0.4782%" y="463.50">suballoc.exe`suballoc::main</text></g><g><title>suballoc.exe`suballoc::test::test_suballoc_de (6,542 samples, 99.54%)</title><rect x="0.2435%" y="437" width="99.5435%" height="15" fill="rgb(250,108,0)" fg:x="16" fg:w="6542"/><text x="0.4935%" y="447.50">suballoc.exe`suballoc::test::test_suballoc_de</text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::used (2 samples, 0.03%)</title><rect x="99.7565%" y="421" width="0.0304%" height="15" fill="rgb(228,208,7)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="431.50"></text></g><g><title>suballoc.exe`suballoc::core::SubAllocator::free (2 samples, 0.03%)</title><rect x="99.7565%" y="405" width="0.0304%" height="15" fill="rgb(244,45,10)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="415.50"></text></g><g><title>suballoc.exe`core::iter::traits::iterator::Iterator::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="99.7565%" y="389" width="0.0304%" height="15" fill="rgb(207,125,25)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="399.50"></text></g><g><title>suballoc.exe`core::iter::traits::accum::impl$48::sum(core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="99.7565%" y="373" width="0.0304%" height="15" fill="rgb(210,195,18)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="383.50"></text></g><g><title>suballoc.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;usize&gt;,suballoc::core::impl$2::free::closure_env$0&gt;, unsigned long long, core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="99.7565%" y="357" width="0.0304%" height="15" fill="rgb(249,80,12)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="367.50"></text></g><g><title>suballoc.exe`core::slice::iter::impl$183::fold(core::slice::iter::Iter&lt;usize&gt;, unsigned long long, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,usize,suballoc::core::impl$2::free::closure_env$0,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="99.7565%" y="341" width="0.0304%" height="15" fill="rgb(221,65,9)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="351.50"></text></g><g><title>suballoc.exe`core::iter::adapters::map::map_fold::closure$0(core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,usize,suballoc::core::impl$2::free::closure_env$0,core::iter::traits::accum::impl$48::sum::closure_env$0&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter (2 samples, 0.03%)</title><rect x="99.7565%" y="325" width="0.0304%" height="15" fill="rgb(235,49,36)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="335.50"></text></g><g><title>suballoc.exe`suballoc::core::impl$2::free::closure$0 (2 samples, 0.03%)</title><rect x="99.7565%" y="309" width="0.0304%" height="15" fill="rgb(225,32,20)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;enum2$&lt;core::option::Option (2 samples, 0.03%)</title><rect x="99.7565%" y="293" width="0.0304%" height="15" fill="rgb(215,141,46)" fg:x="6556" fg:w="2"/><text x="100.0065%" y="303.50"></text></g><g><title>`0x7FFFBFD85C10 (1 samples, 0.02%)</title><rect x="99.7870%" y="549" width="0.0152%" height="15" fill="rgb(250,160,47)" fg:x="6558" fg:w="1"/><text x="100.0370%" y="559.50"></text></g><g><title>`0x7FFFBFDE26BC (1 samples, 0.02%)</title><rect x="99.8022%" y="501" width="0.0152%" height="15" fill="rgb(216,222,40)" fg:x="6559" fg:w="1"/><text x="100.0522%" y="511.50"></text></g><g><title>`0x7FFFBFE026E5 (1 samples, 0.02%)</title><rect x="99.8022%" y="485" width="0.0152%" height="15" fill="rgb(234,217,39)" fg:x="6559" fg:w="1"/><text x="100.0522%" y="495.50"></text></g><g><title>`0x7FFFBFD1A073 (1 samples, 0.02%)</title><rect x="99.8022%" y="469" width="0.0152%" height="15" fill="rgb(207,178,40)" fg:x="6559" fg:w="1"/><text x="100.0522%" y="479.50"></text></g><g><title>`0x7FFFBFD1A4EB (1 samples, 0.02%)</title><rect x="99.8022%" y="453" width="0.0152%" height="15" fill="rgb(221,136,13)" fg:x="6559" fg:w="1"/><text x="100.0522%" y="463.50"></text></g><g><title>`0x7FFFBFDE2723 (1 samples, 0.02%)</title><rect x="99.8174%" y="501" width="0.0152%" height="15" fill="rgb(249,199,10)" fg:x="6560" fg:w="1"/><text x="100.0674%" y="511.50"></text></g><g><title>`0x7FFFBFDE407F (1 samples, 0.02%)</title><rect x="99.8174%" y="485" width="0.0152%" height="15" fill="rgb(249,222,13)" fg:x="6560" fg:w="1"/><text x="100.0674%" y="495.50"></text></g><g><title>`0x7FFFBFD1AC87 (1 samples, 0.02%)</title><rect x="99.8174%" y="469" width="0.0152%" height="15" fill="rgb(244,185,38)" fg:x="6560" fg:w="1"/><text x="100.0674%" y="479.50"></text></g><g><title>`0x7FFFBFD19B1A (1 samples, 0.02%)</title><rect x="99.8174%" y="453" width="0.0152%" height="15" fill="rgb(236,202,9)" fg:x="6560" fg:w="1"/><text x="100.0674%" y="463.50"></text></g><g><title>`0x7FFFBFDAD8B4 (1 samples, 0.02%)</title><rect x="99.8174%" y="437" width="0.0152%" height="15" fill="rgb(250,229,37)" fg:x="6560" fg:w="1"/><text x="100.0674%" y="447.50"></text></g><g><title>`0x7FFFBFD24AAA (1 samples, 0.02%)</title><rect x="99.8326%" y="405" width="0.0152%" height="15" fill="rgb(206,174,23)" fg:x="6561" fg:w="1"/><text x="100.0826%" y="415.50"></text></g><g><title>`0x7FFFBFD24D42 (1 samples, 0.02%)</title><rect x="99.8326%" y="389" width="0.0152%" height="15" fill="rgb(211,33,43)" fg:x="6561" fg:w="1"/><text x="100.0826%" y="399.50"></text></g><g><title>`0x7FFFBFDAD9F4 (1 samples, 0.02%)</title><rect x="99.8326%" y="373" width="0.0152%" height="15" fill="rgb(245,58,50)" fg:x="6561" fg:w="1"/><text x="100.0826%" y="383.50"></text></g><g><title>`0x7FFFBFD27B29 (1 samples, 0.02%)</title><rect x="99.8478%" y="389" width="0.0152%" height="15" fill="rgb(244,68,36)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="399.50"></text></g><g><title>`0x7FFFBFD288A8 (1 samples, 0.02%)</title><rect x="99.8478%" y="373" width="0.0152%" height="15" fill="rgb(232,229,15)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="383.50"></text></g><g><title>`0x7FFFBFD24479 (1 samples, 0.02%)</title><rect x="99.8478%" y="357" width="0.0152%" height="15" fill="rgb(254,30,23)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="367.50"></text></g><g><title>`0x7FFFBFD24BCF (1 samples, 0.02%)</title><rect x="99.8478%" y="341" width="0.0152%" height="15" fill="rgb(235,160,14)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="351.50"></text></g><g><title>`0x7FFFBFD1FAD8 (1 samples, 0.02%)</title><rect x="99.8478%" y="325" width="0.0152%" height="15" fill="rgb(212,155,44)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="335.50"></text></g><g><title>`0x7FFFBFD1FEC4 (1 samples, 0.02%)</title><rect x="99.8478%" y="309" width="0.0152%" height="15" fill="rgb(226,2,50)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="319.50"></text></g><g><title>`0x7FFFBFD1F2C1 (1 samples, 0.02%)</title><rect x="99.8478%" y="293" width="0.0152%" height="15" fill="rgb(234,177,6)" fg:x="6562" fg:w="1"/><text x="100.0978%" y="303.50"></text></g><g><title>`0x7FFFBFD2FB31 (3 samples, 0.05%)</title><rect x="99.8326%" y="453" width="0.0456%" height="15" fill="rgb(217,24,9)" fg:x="6561" fg:w="3"/><text x="100.0826%" y="463.50"></text></g><g><title>`0x7FFFBFD7C2ED (3 samples, 0.05%)</title><rect x="99.8326%" y="437" width="0.0456%" height="15" fill="rgb(220,13,46)" fg:x="6561" fg:w="3"/><text x="100.0826%" y="447.50"></text></g><g><title>`0x7FFFBFD24479 (3 samples, 0.05%)</title><rect x="99.8326%" y="421" width="0.0456%" height="15" fill="rgb(239,221,27)" fg:x="6561" fg:w="3"/><text x="100.0826%" y="431.50"></text></g><g><title>`0x7FFFBFD24C14 (2 samples, 0.03%)</title><rect x="99.8478%" y="405" width="0.0304%" height="15" fill="rgb(222,198,25)" fg:x="6562" fg:w="2"/><text x="100.0978%" y="415.50"></text></g><g><title>`0x7FFFBFD27BC4 (1 samples, 0.02%)</title><rect x="99.8631%" y="389" width="0.0152%" height="15" fill="rgb(211,99,13)" fg:x="6563" fg:w="1"/><text x="100.1131%" y="399.50"></text></g><g><title>`0x7FFFBFD426C6 (1 samples, 0.02%)</title><rect x="99.8631%" y="373" width="0.0152%" height="15" fill="rgb(232,111,31)" fg:x="6563" fg:w="1"/><text x="100.1131%" y="383.50"></text></g><g><title>`0x7FFFBFD2FB5D (1 samples, 0.02%)</title><rect x="99.8783%" y="453" width="0.0152%" height="15" fill="rgb(245,82,37)" fg:x="6564" fg:w="1"/><text x="100.1283%" y="463.50"></text></g><g><title>`0x7FFFBFD70048 (1 samples, 0.02%)</title><rect x="99.8783%" y="437" width="0.0152%" height="15" fill="rgb(227,149,46)" fg:x="6564" fg:w="1"/><text x="100.1283%" y="447.50"></text></g><g><title>`0x7FFFBFD70128 (1 samples, 0.02%)</title><rect x="99.8783%" y="421" width="0.0152%" height="15" fill="rgb(218,36,50)" fg:x="6564" fg:w="1"/><text x="100.1283%" y="431.50"></text></g><g><title>`0x7FFFBFD4263A (1 samples, 0.02%)</title><rect x="99.8783%" y="405" width="0.0152%" height="15" fill="rgb(226,80,48)" fg:x="6564" fg:w="1"/><text x="100.1283%" y="415.50"></text></g><g><title>`0x7FFFBD5D9577 (1 samples, 0.02%)</title><rect x="99.8935%" y="357" width="0.0152%" height="15" fill="rgb(238,224,15)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="367.50"></text></g><g><title>`0x7FFFBD625D72 (1 samples, 0.02%)</title><rect x="99.8935%" y="341" width="0.0152%" height="15" fill="rgb(241,136,10)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="351.50"></text></g><g><title>`0x7FFFBD6250BE (1 samples, 0.02%)</title><rect x="99.8935%" y="325" width="0.0152%" height="15" fill="rgb(208,32,45)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="335.50"></text></g><g><title>`0x7FFFBD62352D (1 samples, 0.02%)</title><rect x="99.8935%" y="309" width="0.0152%" height="15" fill="rgb(207,135,9)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="319.50"></text></g><g><title>`0x7FFFBD6231B8 (1 samples, 0.02%)</title><rect x="99.8935%" y="293" width="0.0152%" height="15" fill="rgb(206,86,44)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="303.50"></text></g><g><title>`0x7FFFBD623E69 (1 samples, 0.02%)</title><rect x="99.8935%" y="277" width="0.0152%" height="15" fill="rgb(245,177,15)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="287.50"></text></g><g><title>`0x7FFFBD5CC910 (1 samples, 0.02%)</title><rect x="99.8935%" y="261" width="0.0152%" height="15" fill="rgb(206,64,50)" fg:x="6565" fg:w="1"/><text x="100.1435%" y="271.50"></text></g><g><title>`0x7FFFBFDE37CE (6 samples, 0.09%)</title><rect x="99.8326%" y="501" width="0.0913%" height="15" fill="rgb(234,36,40)" fg:x="6561" fg:w="6"/><text x="100.0826%" y="511.50"></text></g><g><title>`0x7FFFBFD26AF4 (6 samples, 0.09%)</title><rect x="99.8326%" y="485" width="0.0913%" height="15" fill="rgb(213,64,8)" fg:x="6561" fg:w="6"/><text x="100.0826%" y="495.50"></text></g><g><title>`0x7FFFBFD273E4 (6 samples, 0.09%)</title><rect x="99.8326%" y="469" width="0.0913%" height="15" fill="rgb(210,75,36)" fg:x="6561" fg:w="6"/><text x="100.0826%" y="479.50"></text></g><g><title>`0x7FFFBFD2FBAE (2 samples, 0.03%)</title><rect x="99.8935%" y="453" width="0.0304%" height="15" fill="rgb(229,88,21)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="463.50"></text></g><g><title>`0x7FFFBFD4D947 (2 samples, 0.03%)</title><rect x="99.8935%" y="437" width="0.0304%" height="15" fill="rgb(252,204,47)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="447.50"></text></g><g><title>`0x7FFFBFD7D110 (2 samples, 0.03%)</title><rect x="99.8935%" y="421" width="0.0304%" height="15" fill="rgb(208,77,27)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="431.50"></text></g><g><title>`0x7FFFBFD7D08A (2 samples, 0.03%)</title><rect x="99.8935%" y="405" width="0.0304%" height="15" fill="rgb(221,76,26)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="415.50"></text></g><g><title>`0x7FFFBFD7D2F7 (2 samples, 0.03%)</title><rect x="99.8935%" y="389" width="0.0304%" height="15" fill="rgb(225,139,18)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="399.50"></text></g><g><title>`0x7FFFBFD29A1D (2 samples, 0.03%)</title><rect x="99.8935%" y="373" width="0.0304%" height="15" fill="rgb(230,137,11)" fg:x="6565" fg:w="2"/><text x="100.1435%" y="383.50"></text></g><g><title>`0x7FFFBD5D9598 (1 samples, 0.02%)</title><rect x="99.9087%" y="357" width="0.0152%" height="15" fill="rgb(212,28,1)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="367.50"></text></g><g><title>`0x7FFFBD5DB1FA (1 samples, 0.02%)</title><rect x="99.9087%" y="341" width="0.0152%" height="15" fill="rgb(248,164,17)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="351.50"></text></g><g><title>`0x7FFFBD60202B (1 samples, 0.02%)</title><rect x="99.9087%" y="325" width="0.0152%" height="15" fill="rgb(222,171,42)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="335.50"></text></g><g><title>`0x7FFFBFD52EA0 (1 samples, 0.02%)</title><rect x="99.9087%" y="309" width="0.0152%" height="15" fill="rgb(243,84,45)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="319.50"></text></g><g><title>`0x7FFFBFD530E5 (1 samples, 0.02%)</title><rect x="99.9087%" y="293" width="0.0152%" height="15" fill="rgb(252,49,23)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="303.50"></text></g><g><title>`0x7FFFBFD52F86 (1 samples, 0.02%)</title><rect x="99.9087%" y="277" width="0.0152%" height="15" fill="rgb(215,19,7)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="287.50"></text></g><g><title>`0x7FFFBFDB0D84 (1 samples, 0.02%)</title><rect x="99.9087%" y="261" width="0.0152%" height="15" fill="rgb(238,81,41)" fg:x="6566" fg:w="1"/><text x="100.1587%" y="271.50"></text></g><g><title>`0x7FFFBFDE389D (1 samples, 0.02%)</title><rect x="99.9239%" y="501" width="0.0152%" height="15" fill="rgb(210,199,37)" fg:x="6567" fg:w="1"/><text x="100.1739%" y="511.50"></text></g><g><title>`0x7FFFBFD27010 (1 samples, 0.02%)</title><rect x="99.9239%" y="485" width="0.0152%" height="15" fill="rgb(244,192,49)" fg:x="6567" fg:w="1"/><text x="100.1739%" y="495.50"></text></g><g><title>`0x7FFFBFD2A7DD (1 samples, 0.02%)</title><rect x="99.9239%" y="469" width="0.0152%" height="15" fill="rgb(226,211,11)" fg:x="6567" fg:w="1"/><text x="100.1739%" y="479.50"></text></g><g><title>`0x7FFFBFD2D781 (1 samples, 0.02%)</title><rect x="99.9239%" y="453" width="0.0152%" height="15" fill="rgb(236,162,54)" fg:x="6567" fg:w="1"/><text x="100.1739%" y="463.50"></text></g><g><title>`0x7FFFBFD24AAA (1 samples, 0.02%)</title><rect x="99.9391%" y="437" width="0.0152%" height="15" fill="rgb(220,229,9)" fg:x="6568" fg:w="1"/><text x="100.1891%" y="447.50"></text></g><g><title>`0x7FFFBFD24D42 (1 samples, 0.02%)</title><rect x="99.9391%" y="421" width="0.0152%" height="15" fill="rgb(250,87,22)" fg:x="6568" fg:w="1"/><text x="100.1891%" y="431.50"></text></g><g><title>`0x7FFFBFDAD9F4 (1 samples, 0.02%)</title><rect x="99.9391%" y="405" width="0.0152%" height="15" fill="rgb(239,43,17)" fg:x="6568" fg:w="1"/><text x="100.1891%" y="415.50"></text></g><g><title>`0x7FFFBFDE3B6D (2 samples, 0.03%)</title><rect x="99.9391%" y="501" width="0.0304%" height="15" fill="rgb(231,177,25)" fg:x="6568" fg:w="2"/><text x="100.1891%" y="511.50"></text></g><g><title>`0x7FFFBFD27B29 (2 samples, 0.03%)</title><rect x="99.9391%" y="485" width="0.0304%" height="15" fill="rgb(219,179,1)" fg:x="6568" fg:w="2"/><text x="100.1891%" y="495.50"></text></g><g><title>`0x7FFFBFD288A8 (2 samples, 0.03%)</title><rect x="99.9391%" y="469" width="0.0304%" height="15" fill="rgb(238,219,53)" fg:x="6568" fg:w="2"/><text x="100.1891%" y="479.50"></text></g><g><title>`0x7FFFBFD24479 (2 samples, 0.03%)</title><rect x="99.9391%" y="453" width="0.0304%" height="15" fill="rgb(232,167,36)" fg:x="6568" fg:w="2"/><text x="100.1891%" y="463.50"></text></g><g><title>`0x7FFFBFD24BCF (1 samples, 0.02%)</title><rect x="99.9544%" y="437" width="0.0152%" height="15" fill="rgb(244,19,51)" fg:x="6569" fg:w="1"/><text x="100.2044%" y="447.50"></text></g><g><title>`0x7FFFBFD1FA99 (1 samples, 0.02%)</title><rect x="99.9544%" y="421" width="0.0152%" height="15" fill="rgb(224,6,22)" fg:x="6569" fg:w="1"/><text x="100.2044%" y="431.50"></text></g><g><title>`0x7FFFBFD206E7 (1 samples, 0.02%)</title><rect x="99.9544%" y="405" width="0.0152%" height="15" fill="rgb(224,145,5)" fg:x="6569" fg:w="1"/><text x="100.2044%" y="415.50"></text></g><g><title>`0x7FFFBFD85C73 (12 samples, 0.18%)</title><rect x="99.8022%" y="533" width="0.1826%" height="15" fill="rgb(234,130,49)" fg:x="6559" fg:w="12"/><text x="100.0522%" y="543.50"></text></g><g><title>`0x7FFFBFD85DEB (12 samples, 0.18%)</title><rect x="99.8022%" y="517" width="0.1826%" height="15" fill="rgb(254,6,2)" fg:x="6559" fg:w="12"/><text x="100.0522%" y="527.50"></text></g><g><title>`0x7FFFBFDE3CB2 (1 samples, 0.02%)</title><rect x="99.9696%" y="501" width="0.0152%" height="15" fill="rgb(208,96,46)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="511.50"></text></g><g><title>`0x7FFFBFD7D110 (1 samples, 0.02%)</title><rect x="99.9696%" y="485" width="0.0152%" height="15" fill="rgb(239,3,39)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="495.50"></text></g><g><title>`0x7FFFBFD7D110 (1 samples, 0.02%)</title><rect x="99.9696%" y="469" width="0.0152%" height="15" fill="rgb(233,210,1)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="479.50"></text></g><g><title>`0x7FFFBFD7D08A (1 samples, 0.02%)</title><rect x="99.9696%" y="453" width="0.0152%" height="15" fill="rgb(244,137,37)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="463.50"></text></g><g><title>`0x7FFFBFD7D2F7 (1 samples, 0.02%)</title><rect x="99.9696%" y="437" width="0.0152%" height="15" fill="rgb(240,136,2)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="447.50"></text></g><g><title>`0x7FFFBFD29A1D (1 samples, 0.02%)</title><rect x="99.9696%" y="421" width="0.0152%" height="15" fill="rgb(239,18,37)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="431.50"></text></g><g><title>`0x7FFFBDC56216 (1 samples, 0.02%)</title><rect x="99.9696%" y="405" width="0.0152%" height="15" fill="rgb(218,185,22)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="415.50"></text></g><g><title>`0x7FFFBDC57704 (1 samples, 0.02%)</title><rect x="99.9696%" y="389" width="0.0152%" height="15" fill="rgb(225,218,4)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="399.50"></text></g><g><title>`0x7FFFBDC896A1 (1 samples, 0.02%)</title><rect x="99.9696%" y="373" width="0.0152%" height="15" fill="rgb(230,182,32)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="383.50"></text></g><g><title>`0x7FFFBDC89864 (1 samples, 0.02%)</title><rect x="99.9696%" y="357" width="0.0152%" height="15" fill="rgb(242,56,43)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="367.50"></text></g><g><title>`0x7FFFBD6056B4 (1 samples, 0.02%)</title><rect x="99.9696%" y="341" width="0.0152%" height="15" fill="rgb(233,99,24)" fg:x="6570" fg:w="1"/><text x="100.2196%" y="351.50"></text></g><g><title>all (6,572 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="6572"/><text x="0.2500%" y="575.50"></text></g><g><title>`0x7FFFBFD85C1E (13 samples, 0.20%)</title><rect x="99.8022%" y="549" width="0.1978%" height="15" fill="rgb(227,7,12)" fg:x="6559" fg:w="13"/><text x="100.0522%" y="559.50"></text></g><g><title>`0x7FFFBFD85C84 (1 samples, 0.02%)</title><rect x="99.9848%" y="533" width="0.0152%" height="15" fill="rgb(245,203,43)" fg:x="6571" fg:w="1"/><text x="100.2348%" y="543.50"></text></g><g><title>`0x7FFFBFDE0401 (1 samples, 0.02%)</title><rect x="99.9848%" y="517" width="0.0152%" height="15" fill="rgb(238,205,33)" fg:x="6571" fg:w="1"/><text x="100.2348%" y="527.50"></text></g><g><title>`0x7FFFBFD206A3 (1 samples, 0.02%)</title><rect x="99.9848%" y="501" width="0.0152%" height="15" fill="rgb(231,56,7)" fg:x="6571" fg:w="1"/><text x="100.2348%" y="511.50"></text></g></svg></svg>