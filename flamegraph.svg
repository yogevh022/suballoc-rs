<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="141351"><g><title>suballoc.exe`core::time::impl$2::add_assign (200 samples, 0.14%)</title><rect x="0.0106%" y="341" width="0.1415%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="200"/><text x="0.2606%" y="351.50"></text></g><g><title>suballoc.exe`core::time::impl$1::add (200 samples, 0.14%)</title><rect x="0.0106%" y="325" width="0.1415%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="200"/><text x="0.2606%" y="335.50"></text></g><g><title>suballoc.exe`core::time::Duration::checked_add (200 samples, 0.14%)</title><rect x="0.0106%" y="309" width="0.1415%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="200"/><text x="0.2606%" y="319.50"></text></g><g><title>suballoc.exe`core::num::impl$9::checked_add (200 samples, 0.14%)</title><rect x="0.0106%" y="293" width="0.1415%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="200"/><text x="0.2606%" y="303.50"></text></g><g><title>`0x7FFCD82B47B1 (200 samples, 0.14%)</title><rect x="0.0106%" y="277" width="0.1415%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="200"/><text x="0.2606%" y="287.50"></text></g><g><title>`0x7FFCD82B5B74 (200 samples, 0.14%)</title><rect x="0.0106%" y="261" width="0.1415%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="200"/><text x="0.2606%" y="271.50"></text></g><g><title>`0x7FFCD82B6F37 (200 samples, 0.14%)</title><rect x="0.0106%" y="245" width="0.1415%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="200"/><text x="0.2606%" y="255.50"></text></g><g><title>`0x7FFCD8299B1A (200 samples, 0.14%)</title><rect x="0.0106%" y="229" width="0.1415%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="200"/><text x="0.2606%" y="239.50"></text></g><g><title>`0x7FFCD832D8B4 (200 samples, 0.14%)</title><rect x="0.0106%" y="213" width="0.1415%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="200"/><text x="0.2606%" y="223.50"></text></g><g><title>`0x7FFCD82BEEEE (25 samples, 0.02%)</title><rect x="0.2936%" y="117" width="0.0177%" height="15" fill="rgb(220,122,19)" fg:x="415" fg:w="25"/><text x="0.5436%" y="127.50"></text></g><g><title>`0x7FFCD82B2615 (33 samples, 0.02%)</title><rect x="0.2915%" y="149" width="0.0233%" height="15" fill="rgb(250,228,42)" fg:x="412" fg:w="33"/><text x="0.5415%" y="159.50"></text></g><g><title>`0x7FFCD82BB44D (33 samples, 0.02%)</title><rect x="0.2915%" y="133" width="0.0233%" height="15" fill="rgb(240,193,28)" fg:x="412" fg:w="33"/><text x="0.5415%" y="143.50"></text></g><g><title>`0x7FFCD833450E (21 samples, 0.01%)</title><rect x="0.3184%" y="133" width="0.0149%" height="15" fill="rgb(216,20,37)" fg:x="450" fg:w="21"/><text x="0.5684%" y="143.50"></text></g><g><title>`0x7FFCD8334513 (1,230 samples, 0.87%)</title><rect x="0.3332%" y="133" width="0.8702%" height="15" fill="rgb(206,188,39)" fg:x="471" fg:w="1230"/><text x="0.5832%" y="143.50"></text></g><g><title>`0x7FFCD8334517 (33 samples, 0.02%)</title><rect x="1.2034%" y="133" width="0.0233%" height="15" fill="rgb(217,207,13)" fg:x="1701" fg:w="33"/><text x="1.4534%" y="143.50"></text></g><g><title>`0x7FFCD833452B (16 samples, 0.01%)</title><rect x="1.2402%" y="133" width="0.0113%" height="15" fill="rgb(231,73,38)" fg:x="1753" fg:w="16"/><text x="1.4902%" y="143.50"></text></g><g><title>`0x7FFCD82B27D9 (1,332 samples, 0.94%)</title><rect x="0.3148%" y="149" width="0.9423%" height="15" fill="rgb(225,20,46)" fg:x="445" fg:w="1332"/><text x="0.5648%" y="159.50"></text></g><g><title>`0x7FFCD82B6F37 (207 samples, 0.15%)</title><rect x="1.2593%" y="101" width="0.1464%" height="15" fill="rgb(210,31,41)" fg:x="1780" fg:w="207"/><text x="1.5093%" y="111.50"></text></g><g><title>`0x7FFCD8299B1A (207 samples, 0.15%)</title><rect x="1.2593%" y="85" width="0.1464%" height="15" fill="rgb(221,200,47)" fg:x="1780" fg:w="207"/><text x="1.5093%" y="95.50"></text></g><g><title>`0x7FFCD832D8B4 (207 samples, 0.15%)</title><rect x="1.2593%" y="69" width="0.1464%" height="15" fill="rgb(226,26,5)" fg:x="1780" fg:w="207"/><text x="1.5093%" y="79.50"></text></g><g><title>`0x7FFCD82B36BD (1,590 samples, 1.12%)</title><rect x="0.2837%" y="181" width="1.1249%" height="15" fill="rgb(249,33,26)" fg:x="401" fg:w="1590"/><text x="0.5337%" y="191.50"></text></g><g><title>`0x7FFCD82B38E3 (1,590 samples, 1.12%)</title><rect x="0.2837%" y="165" width="1.1249%" height="15" fill="rgb(235,183,28)" fg:x="401" fg:w="1590"/><text x="0.5337%" y="175.50"></text></g><g><title>`0x7FFCD82B27F0 (214 samples, 0.15%)</title><rect x="1.2572%" y="149" width="0.1514%" height="15" fill="rgb(221,5,38)" fg:x="1777" fg:w="214"/><text x="1.5072%" y="159.50"></text></g><g><title>`0x7FFCD82B47B1 (214 samples, 0.15%)</title><rect x="1.2572%" y="133" width="0.1514%" height="15" fill="rgb(247,18,42)" fg:x="1777" fg:w="214"/><text x="1.5072%" y="143.50"></text></g><g><title>`0x7FFCD82B5B74 (214 samples, 0.15%)</title><rect x="1.2572%" y="117" width="0.1514%" height="15" fill="rgb(241,131,45)" fg:x="1777" fg:w="214"/><text x="1.5072%" y="127.50"></text></g><g><title>suballoc.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,594 samples, 1.13%)</title><rect x="0.2830%" y="229" width="1.1277%" height="15" fill="rgb(249,31,29)" fg:x="400" fg:w="1594"/><text x="0.5330%" y="239.50"></text></g><g><title>suballoc.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,594 samples, 1.13%)</title><rect x="0.2830%" y="213" width="1.1277%" height="15" fill="rgb(225,111,53)" fg:x="400" fg:w="1594"/><text x="0.5330%" y="223.50"></text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,593 samples, 1.13%)</title><rect x="0.2837%" y="197" width="1.1270%" height="15" fill="rgb(238,160,17)" fg:x="401" fg:w="1593"/><text x="0.5337%" y="207.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVec&lt;u32,alloc::alloc::Global&gt;::grow_one&lt;u32,alloc::alloc::Global&gt; (1,596 samples, 1.13%)</title><rect x="0.2823%" y="309" width="1.1291%" height="15" fill="rgb(214,148,48)" fg:x="399" fg:w="1596"/><text x="0.5323%" y="319.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,596 samples, 1.13%)</title><rect x="0.2823%" y="293" width="1.1291%" height="15" fill="rgb(232,36,49)" fg:x="399" fg:w="1596"/><text x="0.5323%" y="303.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,596 samples, 1.13%)</title><rect x="0.2823%" y="277" width="1.1291%" height="15" fill="rgb(209,103,24)" fg:x="399" fg:w="1596"/><text x="0.5323%" y="287.50"></text></g><g><title>suballoc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,595 samples, 1.13%)</title><rect x="0.2830%" y="261" width="1.1284%" height="15" fill="rgb(229,88,8)" fg:x="400" fg:w="1595"/><text x="0.5330%" y="271.50"></text></g><g><title>suballoc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,595 samples, 1.13%)</title><rect x="0.2830%" y="245" width="1.1284%" height="15" fill="rgb(213,181,19)" fg:x="400" fg:w="1595"/><text x="0.5330%" y="255.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::push (2,467 samples, 1.75%)</title><rect x="0.1535%" y="325" width="1.7453%" height="15" fill="rgb(254,191,54)" fg:x="217" fg:w="2467"/><text x="0.4035%" y="335.50"></text></g><g><title>suballoc.exe`core::ptr::write (689 samples, 0.49%)</title><rect x="1.4114%" y="309" width="0.4874%" height="15" fill="rgb(241,83,37)" fg:x="1995" fg:w="689"/><text x="1.6614%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::set_len (254 samples, 0.18%)</title><rect x="1.9229%" y="309" width="0.1797%" height="15" fill="rgb(233,36,39)" fg:x="2718" fg:w="254"/><text x="2.1729%" y="319.50"></text></g><g><title>suballoc.exe`alloc::vec::Vec&lt;u32,alloc::alloc::Global&gt;::swap_remove (9,530 samples, 6.74%)</title><rect x="1.8988%" y="325" width="6.7421%" height="15" fill="rgb(226,3,54)" fg:x="2684" fg:w="9530"/><text x="2.1488%" y="335.50">suballoc...</text></g><g><title>suballoc.exe`core::ptr::copy (9,242 samples, 6.54%)</title><rect x="2.1026%" y="309" width="6.5383%" height="15" fill="rgb(245,192,40)" fg:x="2972" fg:w="9242"/><text x="2.3526%" y="319.50">suballoc...</text></g><g><title>suballoc.exe`core::hint::black_box(tuple$ (25 samples, 0.02%)</title><rect x="8.6409%" y="325" width="0.0177%" height="15" fill="rgb(238,167,29)" fg:x="12214" fg:w="25"/><text x="8.8909%" y="335.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$6::next(core::ops::range::Range (419 samples, 0.30%)</title><rect x="8.6586%" y="325" width="0.2964%" height="15" fill="rgb(232,182,51)" fg:x="12239" fg:w="419"/><text x="8.9086%" y="335.50"></text></g><g><title>suballoc.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (419 samples, 0.30%)</title><rect x="8.6586%" y="309" width="0.2964%" height="15" fill="rgb(231,60,39)" fg:x="12239" fg:w="419"/><text x="8.9086%" y="319.50"></text></g><g><title>suballoc.exe`core::cmp::impls::impl$58::lt (81 samples, 0.06%)</title><rect x="8.8977%" y="293" width="0.0573%" height="15" fill="rgb(208,69,12)" fg:x="12577" fg:w="81"/><text x="9.1477%" y="303.50"></text></g><g><title>`0x7FFCD82B6F37 (201 samples, 0.14%)</title><rect x="8.9578%" y="245" width="0.1422%" height="15" fill="rgb(235,93,37)" fg:x="12662" fg:w="201"/><text x="9.2078%" y="255.50"></text></g><g><title>`0x7FFCD8299B1A (201 samples, 0.14%)</title><rect x="8.9578%" y="229" width="0.1422%" height="15" fill="rgb(213,116,39)" fg:x="12662" fg:w="201"/><text x="9.2078%" y="239.50"></text></g><g><title>`0x7FFCD832D8B4 (201 samples, 0.14%)</title><rect x="8.9578%" y="213" width="0.1422%" height="15" fill="rgb(222,207,29)" fg:x="12662" fg:w="201"/><text x="9.2078%" y="223.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place(alloc::boxed::Box&lt;slice2$ (206 samples, 0.15%)</title><rect x="8.9550%" y="309" width="0.1457%" height="15" fill="rgb(206,96,30)" fg:x="12658" fg:w="206"/><text x="9.2050%" y="319.50"></text></g><g><title>suballoc.exe`alloc::boxed::impl$8::drop(alloc::boxed::Box&lt;slice2$ (206 samples, 0.15%)</title><rect x="8.9550%" y="293" width="0.1457%" height="15" fill="rgb(218,138,4)" fg:x="12658" fg:w="206"/><text x="9.2050%" y="303.50"></text></g><g><title>`0x7FFCD82B47B1 (205 samples, 0.15%)</title><rect x="8.9557%" y="277" width="0.1450%" height="15" fill="rgb(250,191,14)" fg:x="12659" fg:w="205"/><text x="9.2057%" y="287.50"></text></g><g><title>`0x7FFCD82B5B74 (205 samples, 0.15%)</title><rect x="8.9557%" y="261" width="0.1450%" height="15" fill="rgb(239,60,40)" fg:x="12659" fg:w="205"/><text x="9.2057%" y="271.50"></text></g><g><title>suballoc.exe`core::ptr::drop_in_place (207 samples, 0.15%)</title><rect x="8.9550%" y="325" width="0.1464%" height="15" fill="rgb(206,27,48)" fg:x="12658" fg:w="207"/><text x="9.2050%" y="335.50"></text></g><g><title>suballoc.exe`rand::distr::uniform::impl$8::is_empty(core::ops::range::Range (78 samples, 0.06%)</title><rect x="9.1036%" y="309" width="0.0552%" height="15" fill="rgb(225,35,8)" fg:x="12868" fg:w="78"/><text x="9.3536%" y="319.50"></text></g><g><title>suballoc.exe`core::cmp::impls::impl$58::lt (78 samples, 0.06%)</title><rect x="9.1036%" y="293" width="0.0552%" height="15" fill="rgb(250,213,24)" fg:x="12868" fg:w="78"/><text x="9.3536%" y="303.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_neg (133 samples, 0.09%)</title><rect x="9.5592%" y="245" width="0.0941%" height="15" fill="rgb(247,123,22)" fg:x="13512" fg:w="133"/><text x="9.8092%" y="255.50"></text></g><g><title>suballoc.exe`core::num::impl$8::wrapping_sub (133 samples, 0.09%)</title><rect x="9.5592%" y="229" width="0.0941%" height="15" fill="rgb(231,138,38)" fg:x="13512" fg:w="133"/><text x="9.8092%" y="239.50"></text></g><g><title>suballoc.exe`rand::distr::utils::impl$5::wmul (562 samples, 0.40%)</title><rect x="9.6533%" y="245" width="0.3976%" height="15" fill="rgb(231,145,46)" fg:x="13645" fg:w="562"/><text x="9.9033%" y="255.50"></text></g><g><title>suballoc.exe`chacha20::ChaChaCore&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::generate&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt; (308 samples, 0.22%)</title><rect x="10.2992%" y="117" width="0.2179%" height="15" fill="rgb(251,118,11)" fg:x="14558" fg:w="308"/><text x="10.5492%" y="127.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi32 (384 samples, 0.27%)</title><rect x="10.6204%" y="37" width="0.2717%" height="15" fill="rgb(217,147,25)" fg:x="15012" fg:w="384"/><text x="10.8704%" y="47.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi8 (231 samples, 0.16%)</title><rect x="10.8920%" y="37" width="0.1634%" height="15" fill="rgb(247,81,37)" fg:x="15396" fg:w="231"/><text x="11.1420%" y="47.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_slli_epi32 (454 samples, 0.32%)</title><rect x="11.0555%" y="37" width="0.3212%" height="15" fill="rgb(209,12,38)" fg:x="15627" fg:w="454"/><text x="11.3055%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::add_xor_rot (1,103 samples, 0.78%)</title><rect x="10.6204%" y="53" width="0.7803%" height="15" fill="rgb(227,1,9)" fg:x="15012" fg:w="1103"/><text x="10.8704%" y="63.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_xor_si256 (34 samples, 0.02%)</title><rect x="11.3766%" y="37" width="0.0241%" height="15" fill="rgb(248,47,43)" fg:x="16081" fg:w="34"/><text x="11.6266%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::cols_to_rows (51 samples, 0.04%)</title><rect x="11.4007%" y="53" width="0.0361%" height="15" fill="rgb(221,10,30)" fg:x="16115" fg:w="51"/><text x="11.6507%" y="63.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (51 samples, 0.04%)</title><rect x="11.4007%" y="37" width="0.0361%" height="15" fill="rgb(210,229,1)" fg:x="16115" fg:w="51"/><text x="11.6507%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::double_quarter_round (1,178 samples, 0.83%)</title><rect x="10.6204%" y="69" width="0.8334%" height="15" fill="rgb(222,148,37)" fg:x="15012" fg:w="1178"/><text x="10.8704%" y="79.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rows_to_cols (24 samples, 0.02%)</title><rect x="11.4368%" y="53" width="0.0170%" height="15" fill="rgb(234,67,33)" fg:x="16166" fg:w="24"/><text x="11.6868%" y="63.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_shuffle_epi32 (24 samples, 0.02%)</title><rect x="11.4368%" y="37" width="0.0170%" height="15" fill="rgb(247,98,35)" fg:x="16166" fg:w="24"/><text x="11.6868%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rounds (1,192 samples, 0.84%)</title><rect x="10.6204%" y="85" width="0.8433%" height="15" fill="rgb(247,138,52)" fg:x="15012" fg:w="1192"/><text x="10.8704%" y="95.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::Backend&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;::rng_gen_par_ks_blocks (1,268 samples, 0.90%)</title><rect x="10.6204%" y="101" width="0.8971%" height="15" fill="rgb(213,79,30)" fg:x="15012" fg:w="1268"/><text x="10.8704%" y="111.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::sse2::_mm_storeu_si128 (76 samples, 0.05%)</title><rect x="11.4637%" y="85" width="0.0538%" height="15" fill="rgb(246,177,23)" fg:x="16204" fg:w="76"/><text x="11.7137%" y="95.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::write_unaligned (76 samples, 0.05%)</title><rect x="11.4637%" y="69" width="0.0538%" height="15" fill="rgb(230,62,27)" fg:x="16204" fg:w="76"/><text x="11.7137%" y="79.50"></text></g><g><title>suballoc.exe`core::ptr::write_unaligned (76 samples, 0.05%)</title><rect x="11.4637%" y="53" width="0.0538%" height="15" fill="rgb(216,154,8)" fg:x="16204" fg:w="76"/><text x="11.7137%" y="63.50"></text></g><g><title>suballoc.exe`core::ptr::copy_nonoverlapping (76 samples, 0.05%)</title><rect x="11.4637%" y="37" width="0.0538%" height="15" fill="rgb(244,35,45)" fg:x="16204" fg:w="76"/><text x="11.7137%" y="47.50"></text></g><g><title>suballoc.exe`chacha20::rng::impl$42::generate (1,751 samples, 1.24%)</title><rect x="10.2985%" y="133" width="1.2388%" height="15" fill="rgb(251,115,12)" fg:x="14557" fg:w="1751"/><text x="10.5485%" y="143.50"></text></g><g><title>suballoc.exe`chacha20::backends::avx2::rng_inner&lt;chacha20::R12,enum2$&lt;chacha20::variants::Legacy&gt; &gt;(chacha20::ChaChaCore&lt;chacha20::R12,enum2$ (1,442 samples, 1.02%)</title><rect x="10.5171%" y="117" width="1.0202%" height="15" fill="rgb(240,54,50)" fg:x="14866" fg:w="1442"/><text x="10.7671%" y="127.50"></text></g><g><title>suballoc.exe`core::core_arch::x86::avx2::_mm256_add_epi64 (28 samples, 0.02%)</title><rect x="11.5174%" y="101" width="0.0198%" height="15" fill="rgb(233,84,52)" fg:x="16280" fg:w="28"/><text x="11.7674%" y="111.50"></text></g><g><title>`0x7FFCD59453DF (23 samples, 0.02%)</title><rect x="11.5613%" y="69" width="0.0163%" height="15" fill="rgb(207,117,47)" fg:x="16342" fg:w="23"/><text x="11.8113%" y="79.50"></text></g><g><title>`0x7FFCD5946849 (23 samples, 0.02%)</title><rect x="11.5613%" y="53" width="0.0163%" height="15" fill="rgb(249,43,39)" fg:x="16342" fg:w="23"/><text x="11.8113%" y="63.50"></text></g><g><title>`0x7FFCD594513C (34 samples, 0.02%)</title><rect x="11.5542%" y="85" width="0.0241%" height="15" fill="rgb(209,38,44)" fg:x="16332" fg:w="34"/><text x="11.8042%" y="95.50"></text></g><g><title>suballoc.exe`rand::rng::Rng::random_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (3,505 samples, 2.48%)</title><rect x="9.1015%" y="325" width="2.4796%" height="15" fill="rgb(236,212,23)" fg:x="12865" fg:w="3505"/><text x="9.3515%" y="335.50">su..</text></g><g><title>suballoc.exe`rand::distr::uniform::impl$8::sample_single(core::ops::range::Range (3,424 samples, 2.42%)</title><rect x="9.1588%" y="309" width="2.4223%" height="15" fill="rgb(242,79,21)" fg:x="12946" fg:w="3424"/><text x="9.4088%" y="319.50">su..</text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$1::sample_single (3,424 samples, 2.42%)</title><rect x="9.1588%" y="293" width="2.4223%" height="15" fill="rgb(211,96,35)" fg:x="12946" fg:w="3424"/><text x="9.4088%" y="303.50">su..</text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single (2,974 samples, 2.10%)</title><rect x="9.4771%" y="277" width="2.1040%" height="15" fill="rgb(253,215,40)" fg:x="13396" fg:w="2974"/><text x="9.7271%" y="287.50">s..</text></g><g><title>suballoc.exe`rand::distr::uniform::int::impl$23::sample_single_inclusive (2,974 samples, 2.10%)</title><rect x="9.4771%" y="261" width="2.1040%" height="15" fill="rgb(211,81,21)" fg:x="13396" fg:w="2974"/><text x="9.7271%" y="271.50">s..</text></g><g><title>suballoc.exe`rand::rng::Rng::random (2,163 samples, 1.53%)</title><rect x="10.0509%" y="245" width="1.5302%" height="15" fill="rgb(208,190,38)" fg:x="14207" fg:w="2163"/><text x="10.3009%" y="255.50"></text></g><g><title>suballoc.exe`rand::distr::integer::impl$2::sample (2,163 samples, 1.53%)</title><rect x="10.0509%" y="229" width="1.5302%" height="15" fill="rgb(235,213,38)" fg:x="14207" fg:w="2163"/><text x="10.3009%" y="239.50"></text></g><g><title>suballoc.exe`rand::rngs::thread::impl$3::next_u32 (2,163 samples, 1.53%)</title><rect x="10.0509%" y="213" width="1.5302%" height="15" fill="rgb(237,122,38)" fg:x="14207" fg:w="2163"/><text x="10.3009%" y="223.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$1::next_u32(rand::rngs::reseeding::ReseedingRng (2,163 samples, 1.53%)</title><rect x="10.0509%" y="197" width="1.5302%" height="15" fill="rgb(244,218,35)" fg:x="14207" fg:w="2163"/><text x="10.3009%" y="207.50"></text></g><g><title>suballoc.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore (2,163 samples, 1.53%)</title><rect x="10.0509%" y="181" width="1.5302%" height="15" fill="rgb(240,68,47)" fg:x="14207" fg:w="2163"/><text x="10.3009%" y="191.50"></text></g><g><title>suballoc.exe`rand_core::block::BlockRng&lt;rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (1,840 samples, 1.30%)</title><rect x="10.2794%" y="165" width="1.3017%" height="15" fill="rgb(210,16,53)" fg:x="14530" fg:w="1840"/><text x="10.5294%" y="175.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::impl$4::generate(rand::rngs::reseeding::ReseedingCore (1,840 samples, 1.30%)</title><rect x="10.2794%" y="149" width="1.3017%" height="15" fill="rgb(235,124,12)" fg:x="14530" fg:w="1840"/><text x="10.5294%" y="159.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed_and_generate&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt; (62 samples, 0.04%)</title><rect x="11.5372%" y="133" width="0.0439%" height="15" fill="rgb(224,169,11)" fg:x="16308" fg:w="62"/><text x="11.7872%" y="143.50"></text></g><g><title>suballoc.exe`rand::rngs::reseeding::ReseedingCore&lt;chacha20::rng::ChaCha12Core,rand_core::os::OsRng&gt;::reseed (55 samples, 0.04%)</title><rect x="11.5422%" y="117" width="0.0389%" height="15" fill="rgb(250,166,2)" fg:x="16315" fg:w="55"/><text x="11.7922%" y="127.50"></text></g><g><title>suballoc.exe`rand_core::SeedableRng::try_from_rng (55 samples, 0.04%)</title><rect x="11.5422%" y="101" width="0.0389%" height="15" fill="rgb(242,216,29)" fg:x="16315" fg:w="55"/><text x="11.7922%" y="111.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mapping_search (69 samples, 0.05%)</title><rect x="11.5818%" y="309" width="0.0488%" height="15" fill="rgb(230,116,27)" fg:x="16371" fg:w="69"/><text x="11.8318%" y="319.50"></text></g><g><title>suballoc.exe`core::num::impl$8::trailing_zeros (28 samples, 0.02%)</title><rect x="11.6108%" y="293" width="0.0198%" height="15" fill="rgb(228,99,48)" fg:x="16412" fg:w="28"/><text x="11.8608%" y="303.50"></text></g><g><title>suballoc.exe`enum2$&lt;core::option::Option&lt;ptr_mut$&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;::take (2,711 samples, 1.92%)</title><rect x="12.9797%" y="293" width="1.9179%" height="15" fill="rgb(253,11,6)" fg:x="18347" fg:w="2711"/><text x="13.2297%" y="303.50">s..</text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;ptr_mut$&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;ptr_mut$ (395 samples, 0.28%)</title><rect x="14.6182%" y="277" width="0.2794%" height="15" fill="rgb(247,143,39)" fg:x="20663" fg:w="395"/><text x="14.8682%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::link_offsets (1,504 samples, 1.06%)</title><rect x="14.8977%" y="293" width="1.0640%" height="15" fill="rgb(236,97,10)" fg:x="21058" fg:w="1504"/><text x="15.1477%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_from_mem_offset (383 samples, 0.27%)</title><rect x="15.9617%" y="293" width="0.2710%" height="15" fill="rgb(233,208,19)" fg:x="22562" fg:w="383"/><text x="16.2117%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::popf_free_link (6,947 samples, 4.91%)</title><rect x="11.6306%" y="309" width="4.9147%" height="15" fill="rgb(216,164,2)" fg:x="16440" fg:w="6947"/><text x="11.8806%" y="319.50">suball..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::set_bitmap_index_empty (442 samples, 0.31%)</title><rect x="16.2326%" y="293" width="0.3127%" height="15" fill="rgb(220,129,5)" fg:x="22945" fg:w="442"/><text x="16.4826%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (66 samples, 0.05%)</title><rect x="16.8220%" y="293" width="0.0467%" height="15" fill="rgb(242,17,10)" fg:x="23778" fg:w="66"/><text x="17.0720%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (48 samples, 0.03%)</title><rect x="16.8686%" y="293" width="0.0340%" height="15" fill="rgb(242,107,0)" fg:x="23844" fg:w="48"/><text x="17.1186%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (4,660 samples, 3.30%)</title><rect x="16.9026%" y="277" width="3.2968%" height="15" fill="rgb(251,28,31)" fg:x="23892" fg:w="4660"/><text x="17.1526%" y="287.50">sub..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::head_from_tail_ptr (20 samples, 0.01%)</title><rect x="20.1994%" y="277" width="0.0141%" height="15" fill="rgb(233,223,10)" fg:x="28552" fg:w="20"/><text x="20.4494%" y="287.50"></text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;ptr_mut$&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;ptr_mut$ (1,396 samples, 0.99%)</title><rect x="21.2407%" y="261" width="0.9876%" height="15" fill="rgb(215,21,27)" fg:x="30024" fg:w="1396"/><text x="21.4907%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (2,947 samples, 2.08%)</title><rect x="22.2284%" y="261" width="2.0849%" height="15" fill="rgb(232,23,21)" fg:x="31420" fg:w="2947"/><text x="22.4784%" y="271.50">s..</text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_prev_link (1,635 samples, 1.16%)</title><rect x="24.3132%" y="261" width="1.1567%" height="15" fill="rgb(244,5,23)" fg:x="34367" fg:w="1635"/><text x="24.5632%" y="271.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (395 samples, 0.28%)</title><rect x="25.4713%" y="245" width="0.2794%" height="15" fill="rgb(226,81,46)" fg:x="36004" fg:w="395"/><text x="25.7213%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mapping_insert (799 samples, 0.57%)</title><rect x="25.4699%" y="261" width="0.5653%" height="15" fill="rgb(247,70,30)" fg:x="36002" fg:w="799"/><text x="25.7199%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::calc_sl_index_for_fl (402 samples, 0.28%)</title><rect x="25.7508%" y="245" width="0.2844%" height="15" fill="rgb(212,68,19)" fg:x="36399" fg:w="402"/><text x="26.0008%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::push_leftover_block (13,262 samples, 9.38%)</title><rect x="16.9026%" y="293" width="9.3823%" height="15" fill="rgb(240,187,13)" fg:x="23892" fg:w="13262"/><text x="17.1526%" y="303.50">suballoc.exe`..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::pushf_free_link (8,582 samples, 6.07%)</title><rect x="20.2135%" y="277" width="6.0714%" height="15" fill="rgb(223,113,26)" fg:x="28572" fg:w="8582"/><text x="20.4635%" y="287.50">suballoc..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::set_bitmap_index_available (353 samples, 0.25%)</title><rect x="26.0352%" y="261" width="0.2497%" height="15" fill="rgb(206,192,2)" fg:x="36801" fg:w="353"/><text x="26.2852%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::or_flags (2,100 samples, 1.49%)</title><rect x="26.3606%" y="277" width="1.4857%" height="15" fill="rgb(241,108,4)" fg:x="37261" fg:w="2100"/><text x="26.6106%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::is_block_first (167 samples, 0.12%)</title><rect x="27.8463%" y="277" width="0.1181%" height="15" fill="rgb(247,173,49)" fg:x="39361" fg:w="167"/><text x="28.0963%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_eq_mem_start (167 samples, 0.12%)</title><rect x="27.8463%" y="261" width="0.1181%" height="15" fill="rgb(224,114,35)" fg:x="39361" fg:w="167"/><text x="28.0963%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_sub (263 samples, 0.19%)</title><rect x="28.3231%" y="245" width="0.1861%" height="15" fill="rgb(245,159,27)" fg:x="40035" fg:w="263"/><text x="28.5731%" y="255.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_sub (263 samples, 0.19%)</title><rect x="28.3231%" y="229" width="0.1861%" height="15" fill="rgb(245,172,44)" fg:x="40035" fg:w="263"/><text x="28.5731%" y="239.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::sub (263 samples, 0.19%)</title><rect x="28.3231%" y="213" width="0.1861%" height="15" fill="rgb(236,23,11)" fg:x="40035" fg:w="263"/><text x="28.5731%" y="223.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (934 samples, 0.66%)</title><rect x="27.9644%" y="261" width="0.6608%" height="15" fill="rgb(205,117,38)" fg:x="39528" fg:w="934"/><text x="28.2144%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_head (164 samples, 0.12%)</title><rect x="28.5092%" y="245" width="0.1160%" height="15" fill="rgb(237,72,25)" fg:x="40298" fg:w="164"/><text x="28.7592%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::set_prev_next_used (3,309 samples, 2.34%)</title><rect x="26.2849%" y="293" width="2.3410%" height="15" fill="rgb(244,70,9)" fg:x="37154" fg:w="3309"/><text x="26.5349%" y="303.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::prev_block_meta (935 samples, 0.66%)</title><rect x="27.9644%" y="277" width="0.6615%" height="15" fill="rgb(217,125,39)" fg:x="39528" fg:w="935"/><text x="28.2144%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (89 samples, 0.06%)</title><rect x="28.6259%" y="277" width="0.0630%" height="15" fill="rgb(235,36,10)" fg:x="40463" fg:w="89"/><text x="28.8759%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (89 samples, 0.06%)</title><rect x="28.6259%" y="261" width="0.0630%" height="15" fill="rgb(251,123,47)" fg:x="40463" fg:w="89"/><text x="28.8759%" y="271.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (89 samples, 0.06%)</title><rect x="28.6259%" y="245" width="0.0630%" height="15" fill="rgb(221,13,13)" fg:x="40463" fg:w="89"/><text x="28.8759%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::allocate (24,204 samples, 17.12%)</title><rect x="11.5818%" y="325" width="17.1233%" height="15" fill="rgb(238,131,9)" fg:x="16371" fg:w="24204"/><text x="11.8318%" y="335.50">suballoc.exe`suballoc::tlsf..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::set_block_used (17,188 samples, 12.16%)</title><rect x="16.5453%" y="309" width="12.1598%" height="15" fill="rgb(211,50,8)" fg:x="23387" fg:w="17188"/><text x="16.7953%" y="319.50">suballoc.exe`subal..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::tail_from_head_ptr (112 samples, 0.08%)</title><rect x="28.6259%" y="293" width="0.0792%" height="15" fill="rgb(245,182,24)" fg:x="40463" fg:w="112"/><text x="28.8759%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_head (23 samples, 0.02%)</title><rect x="28.6889%" y="277" width="0.0163%" height="15" fill="rgb(242,14,37)" fg:x="40552" fg:w="23"/><text x="28.9389%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::set_size_flags (63 samples, 0.04%)</title><rect x="29.0808%" y="309" width="0.0446%" height="15" fill="rgb(246,228,12)" fg:x="41106" fg:w="63"/><text x="29.3308%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (51,388 samples, 36.35%)</title><rect x="29.1254%" y="309" width="36.3549%" height="15" fill="rgb(213,55,15)" fg:x="41169" fg:w="51388"/><text x="29.3754%" y="319.50">suballoc.exe`suballoc::block::BlockInterface::size</text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::clear_or_flags (327 samples, 0.23%)</title><rect x="65.6826%" y="293" width="0.2313%" height="15" fill="rgb(209,9,3)" fg:x="92843" fg:w="327"/><text x="65.9326%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (5,363 samples, 3.79%)</title><rect x="65.9139%" y="293" width="3.7941%" height="15" fill="rgb(230,59,30)" fg:x="93170" fg:w="5363"/><text x="66.1639%" y="303.50">suba..</text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (800 samples, 0.57%)</title><rect x="69.8509%" y="277" width="0.5660%" height="15" fill="rgb(209,121,21)" fg:x="98735" fg:w="800"/><text x="70.1009%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mapping_insert (1,647 samples, 1.17%)</title><rect x="69.7080%" y="293" width="1.1652%" height="15" fill="rgb(220,109,13)" fg:x="98533" fg:w="1647"/><text x="69.9580%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::calc_sl_index_for_fl (645 samples, 0.46%)</title><rect x="70.4169%" y="277" width="0.4563%" height="15" fill="rgb(232,18,1)" fg:x="99535" fg:w="645"/><text x="70.6669%" y="287.50"></text></g><g><title>suballoc.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$&lt;array$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (19 samples, 0.01%)</title><rect x="72.5548%" y="277" width="0.0134%" height="15" fill="rgb(215,41,42)" fg:x="102557" fg:w="19"/><text x="72.8048%" y="287.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$&lt;array$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (19 samples, 0.01%)</title><rect x="72.5548%" y="261" width="0.0134%" height="15" fill="rgb(224,123,36)" fg:x="102557" fg:w="19"/><text x="72.8048%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::link_offsets (697 samples, 0.49%)</title><rect x="72.5697%" y="277" width="0.4931%" height="15" fill="rgb(240,125,3)" fg:x="102578" fg:w="697"/><text x="72.8197%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_next_link (18 samples, 0.01%)</title><rect x="73.0628%" y="277" width="0.0127%" height="15" fill="rgb(205,98,50)" fg:x="103275" fg:w="18"/><text x="73.3128%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_prev_link (7,612 samples, 5.39%)</title><rect x="73.0755%" y="277" width="5.3852%" height="15" fill="rgb(205,185,37)" fg:x="103293" fg:w="7612"/><text x="73.3255%" y="287.50">suballo..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::remove_free_link (10,742 samples, 7.60%)</title><rect x="70.8732%" y="293" width="7.5995%" height="15" fill="rgb(238,207,15)" fg:x="100180" fg:w="10742"/><text x="71.1232%" y="303.50">suballoc.e..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_from_mem_offset (17 samples, 0.01%)</title><rect x="78.4607%" y="277" width="0.0120%" height="15" fill="rgb(213,199,42)" fg:x="110905" fg:w="17"/><text x="78.7107%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (350 samples, 0.25%)</title><rect x="78.4727%" y="277" width="0.2476%" height="15" fill="rgb(235,201,11)" fg:x="110922" fg:w="350"/><text x="78.7227%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (350 samples, 0.25%)</title><rect x="78.4727%" y="261" width="0.2476%" height="15" fill="rgb(207,46,11)" fg:x="110922" fg:w="350"/><text x="78.7227%" y="271.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (350 samples, 0.25%)</title><rect x="78.4727%" y="245" width="0.2476%" height="15" fill="rgb(241,35,35)" fg:x="110922" fg:w="350"/><text x="78.7227%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::coalesce_next (19,052 samples, 13.48%)</title><rect x="65.4803%" y="309" width="13.4785%" height="15" fill="rgb(243,32,47)" fg:x="92557" fg:w="19052"/><text x="65.7303%" y="319.50">suballoc.exe`suballo..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::tail_from_head_ptr (687 samples, 0.49%)</title><rect x="78.4727%" y="293" width="0.4860%" height="15" fill="rgb(247,202,23)" fg:x="110922" fg:w="687"/><text x="78.7227%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_head (337 samples, 0.24%)</title><rect x="78.7203%" y="277" width="0.2384%" height="15" fill="rgb(219,102,11)" fg:x="111272" fg:w="337"/><text x="78.9703%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::clear_or_flags (4,656 samples, 3.29%)</title><rect x="78.9970%" y="293" width="3.2939%" height="15" fill="rgb(243,110,44)" fg:x="111663" fg:w="4656"/><text x="79.2470%" y="303.50">sub..</text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (1,986 samples, 1.41%)</title><rect x="82.2909%" y="293" width="1.4050%" height="15" fill="rgb(222,74,54)" fg:x="116319" fg:w="1986"/><text x="82.5409%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_sub (253 samples, 0.18%)</title><rect x="83.6966%" y="277" width="0.1790%" height="15" fill="rgb(216,99,12)" fg:x="118306" fg:w="253"/><text x="83.9466%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_sub (253 samples, 0.18%)</title><rect x="83.6966%" y="261" width="0.1790%" height="15" fill="rgb(226,22,26)" fg:x="118306" fg:w="253"/><text x="83.9466%" y="271.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::sub (253 samples, 0.18%)</title><rect x="83.6966%" y="245" width="0.1790%" height="15" fill="rgb(217,163,10)" fg:x="118306" fg:w="253"/><text x="83.9466%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::head_from_tail_ptr (289 samples, 0.20%)</title><rect x="83.6966%" y="293" width="0.2045%" height="15" fill="rgb(213,25,53)" fg:x="118306" fg:w="289"/><text x="83.9466%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_head (36 samples, 0.03%)</title><rect x="83.8756%" y="277" width="0.0255%" height="15" fill="rgb(252,105,26)" fg:x="118559" fg:w="36"/><text x="84.1256%" y="287.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (491 samples, 0.35%)</title><rect x="83.9732%" y="277" width="0.3474%" height="15" fill="rgb(220,39,43)" fg:x="118697" fg:w="491"/><text x="84.2232%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mapping_insert (840 samples, 0.59%)</title><rect x="83.9011%" y="293" width="0.5943%" height="15" fill="rgb(229,68,48)" fg:x="118595" fg:w="840"/><text x="84.1511%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::calc_sl_index_for_fl (247 samples, 0.17%)</title><rect x="84.3206%" y="277" width="0.1747%" height="15" fill="rgb(252,8,32)" fg:x="119188" fg:w="247"/><text x="84.5706%" y="287.50"></text></g><g><title>suballoc.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$&lt;array$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (43 samples, 0.03%)</title><rect x="85.7780%" y="277" width="0.0304%" height="15" fill="rgb(223,20,43)" fg:x="121248" fg:w="43"/><text x="86.0280%" y="287.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$&lt;array$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (43 samples, 0.03%)</title><rect x="85.7780%" y="261" width="0.0304%" height="15" fill="rgb(229,81,49)" fg:x="121248" fg:w="43"/><text x="86.0280%" y="271.50"></text></g><g><title>suballoc.exe`core::slice::impl$0::get_unchecked_mut(ref_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (17 samples, 0.01%)</title><rect x="85.8084%" y="277" width="0.0120%" height="15" fill="rgb(236,28,36)" fg:x="121291" fg:w="17"/><text x="86.0584%" y="287.50"></text></g><g><title>suballoc.exe`core::slice::index::impl$2::get_unchecked_mut(unsigned long long, ptr_mut$&lt;slice2$&lt;enum2$&lt;core::option::Option&lt;ptr_mut$ (17 samples, 0.01%)</title><rect x="85.8084%" y="261" width="0.0120%" height="15" fill="rgb(249,185,26)" fg:x="121291" fg:w="17"/><text x="86.0584%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::link_offsets (3,907 samples, 2.76%)</title><rect x="85.8204%" y="277" width="2.7640%" height="15" fill="rgb(249,174,33)" fg:x="121308" fg:w="3907"/><text x="86.0704%" y="287.50">su..</text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_next_link (53 samples, 0.04%)</title><rect x="88.5844%" y="277" width="0.0375%" height="15" fill="rgb(233,201,37)" fg:x="125215" fg:w="53"/><text x="88.8344%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_prev_link (5,186 samples, 3.67%)</title><rect x="88.6219%" y="277" width="3.6689%" height="15" fill="rgb(221,78,26)" fg:x="125268" fg:w="5186"/><text x="88.8719%" y="287.50">suba..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::coalesce_prev (18,995 samples, 13.44%)</title><rect x="78.9588%" y="309" width="13.4382%" height="15" fill="rgb(250,127,30)" fg:x="111609" fg:w="18995"/><text x="79.2088%" y="319.50">suballoc.exe`suballo..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::remove_free_link (11,169 samples, 7.90%)</title><rect x="84.4953%" y="293" width="7.9016%" height="15" fill="rgb(230,49,44)" fg:x="119435" fg:w="11169"/><text x="84.7453%" y="303.50">suballoc.ex..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_from_mem_offset (150 samples, 0.11%)</title><rect x="92.2908%" y="277" width="0.1061%" height="15" fill="rgb(229,67,23)" fg:x="130454" fg:w="150"/><text x="92.5408%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::byte_add (43 samples, 0.03%)</title><rect x="92.3665%" y="261" width="0.0304%" height="15" fill="rgb(249,83,47)" fg:x="130561" fg:w="43"/><text x="92.6165%" y="271.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::add (43 samples, 0.03%)</title><rect x="92.3665%" y="245" width="0.0304%" height="15" fill="rgb(215,43,3)" fg:x="130561" fg:w="43"/><text x="92.6165%" y="255.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::is_block_first (2,693 samples, 1.91%)</title><rect x="92.3969%" y="309" width="1.9052%" height="15" fill="rgb(238,154,13)" fg:x="130604" fg:w="2693"/><text x="92.6469%" y="319.50">s..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_eq_mem_start (2,693 samples, 1.91%)</title><rect x="92.3969%" y="293" width="1.9052%" height="15" fill="rgb(219,56,2)" fg:x="130604" fg:w="2693"/><text x="92.6469%" y="303.50">s..</text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (20 samples, 0.01%)</title><rect x="94.3021%" y="293" width="0.0141%" height="15" fill="rgb(233,0,4)" fg:x="133297" fg:w="20"/><text x="94.5521%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (20 samples, 0.01%)</title><rect x="94.3021%" y="277" width="0.0141%" height="15" fill="rgb(235,30,7)" fg:x="133297" fg:w="20"/><text x="94.5521%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (20 samples, 0.01%)</title><rect x="94.3021%" y="261" width="0.0141%" height="15" fill="rgb(250,79,13)" fg:x="133297" fg:w="20"/><text x="94.5521%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_eq_mem_end (47 samples, 0.03%)</title><rect x="94.3163%" y="293" width="0.0333%" height="15" fill="rgb(211,146,34)" fg:x="133317" fg:w="47"/><text x="94.5663%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::add (31 samples, 0.02%)</title><rect x="94.3276%" y="277" width="0.0219%" height="15" fill="rgb(228,22,38)" fg:x="133333" fg:w="31"/><text x="94.5776%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::is_block_last (429 samples, 0.30%)</title><rect x="94.3021%" y="309" width="0.3035%" height="15" fill="rgb(235,168,5)" fg:x="133297" fg:w="429"/><text x="94.5521%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_meta (362 samples, 0.26%)</title><rect x="94.3495%" y="293" width="0.2561%" height="15" fill="rgb(221,155,16)" fg:x="133364" fg:w="362"/><text x="94.5995%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::ptr_from_mem_offset_unchecked (117 samples, 0.08%)</title><rect x="94.6056%" y="309" width="0.0828%" height="15" fill="rgb(215,215,53)" fg:x="133726" fg:w="117"/><text x="94.8556%" y="319.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::offset (54 samples, 0.04%)</title><rect x="94.6502%" y="293" width="0.0382%" height="15" fill="rgb(223,4,10)" fg:x="133789" fg:w="54"/><text x="94.9002%" y="303.50"></text></g><g><title>suballoc.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;ptr_mut$&lt;suballoc::block::FreeBlockHead&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;ptr_mut$ (1,121 samples, 0.79%)</title><rect x="95.0761%" y="293" width="0.7931%" height="15" fill="rgb(234,103,6)" fg:x="134391" fg:w="1121"/><text x="95.3261%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::BlockInterface::size (2,243 samples, 1.59%)</title><rect x="95.8691%" y="293" width="1.5868%" height="15" fill="rgb(227,97,0)" fg:x="135512" fg:w="2243"/><text x="96.1191%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::block::FreeBlockHead::set_prev_link (570 samples, 0.40%)</title><rect x="97.4560%" y="293" width="0.4033%" height="15" fill="rgb(234,150,53)" fg:x="137755" fg:w="570"/><text x="97.7060%" y="303.50"></text></g><g><title>suballoc.exe`core::num::impl$8::leading_zeros (494 samples, 0.35%)</title><rect x="97.9363%" y="277" width="0.3495%" height="15" fill="rgb(228,201,54)" fg:x="138434" fg:w="494"/><text x="98.1863%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mapping_insert (1,064 samples, 0.75%)</title><rect x="97.8592%" y="293" width="0.7527%" height="15" fill="rgb(222,22,37)" fg:x="138325" fg:w="1064"/><text x="98.1092%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::calc_sl_index_for_fl (461 samples, 0.33%)</title><rect x="98.2858%" y="277" width="0.3261%" height="15" fill="rgb(237,53,32)" fg:x="138928" fg:w="461"/><text x="98.5358%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::mem_offset_from_ptr (322 samples, 0.23%)</title><rect x="98.6120%" y="293" width="0.2278%" height="15" fill="rgb(233,25,53)" fg:x="139389" fg:w="322"/><text x="98.8620%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::offset_from (280 samples, 0.20%)</title><rect x="98.6417%" y="277" width="0.1981%" height="15" fill="rgb(210,40,34)" fg:x="139431" fg:w="280"/><text x="98.8917%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::pushf_free_link (6,996 samples, 4.95%)</title><rect x="94.6884%" y="309" width="4.9494%" height="15" fill="rgb(241,220,44)" fg:x="133843" fg:w="6996"/><text x="94.9384%" y="319.50">suball..</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::set_bitmap_index_available (1,128 samples, 0.80%)</title><rect x="98.8398%" y="293" width="0.7980%" height="15" fill="rgb(235,28,35)" fg:x="139711" fg:w="1128"/><text x="99.0898%" y="303.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::size_between_meta_ptrs (106 samples, 0.07%)</title><rect x="99.6378%" y="309" width="0.0750%" height="15" fill="rgb(210,56,17)" fg:x="140839" fg:w="106"/><text x="99.8878%" y="319.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::byte_offset_from (106 samples, 0.07%)</title><rect x="99.6378%" y="293" width="0.0750%" height="15" fill="rgb(224,130,29)" fg:x="140839" fg:w="106"/><text x="99.8878%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::const_ptr::impl$0::offset_from (106 samples, 0.07%)</title><rect x="99.6378%" y="277" width="0.0750%" height="15" fill="rgb(235,212,8)" fg:x="140839" fg:w="106"/><text x="99.8878%" y="287.50"></text></g><g><title>suballoc.exe`suballoc::block::impl$1::block_add (229 samples, 0.16%)</title><rect x="99.7128%" y="293" width="0.1620%" height="15" fill="rgb(223,33,50)" fg:x="140945" fg:w="229"/><text x="99.9628%" y="303.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::byte_add (229 samples, 0.16%)</title><rect x="99.7128%" y="277" width="0.1620%" height="15" fill="rgb(219,149,13)" fg:x="140945" fg:w="229"/><text x="99.9628%" y="287.50"></text></g><g><title>suballoc.exe`core::ptr::mut_ptr::impl$0::add (229 samples, 0.16%)</title><rect x="99.7128%" y="261" width="0.1620%" height="15" fill="rgb(250,156,29)" fg:x="140945" fg:w="229"/><text x="99.9628%" y="271.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::deallocate (100,742 samples, 71.27%)</title><rect x="28.7051%" y="325" width="71.2708%" height="15" fill="rgb(216,193,19)" fg:x="40575" fg:w="100742"/><text x="28.9551%" y="335.50">suballoc.exe`suballoc::tlsf::SubAllocator::deallocate</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::tail_from_head_ptr (372 samples, 0.26%)</title><rect x="99.7128%" y="309" width="0.2632%" height="15" fill="rgb(216,135,14)" fg:x="140945" fg:w="372"/><text x="99.9628%" y="319.50"></text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::with_head (143 samples, 0.10%)</title><rect x="99.8748%" y="293" width="0.1012%" height="15" fill="rgb(241,47,5)" fg:x="141174" fg:w="143"/><text x="100.1248%" y="303.50"></text></g><g><title>`0x7FFCD82DCC91 (141,336 samples, 99.99%)</title><rect x="0.0007%" y="453" width="99.9894%" height="15" fill="rgb(233,42,35)" fg:x="1" fg:w="141336"/><text x="0.2507%" y="463.50">`0x7FFCD82DCC91</text></g><g><title>`0x7FFCD6C77374 (141,336 samples, 99.99%)</title><rect x="0.0007%" y="437" width="99.9894%" height="15" fill="rgb(231,13,6)" fg:x="1" fg:w="141336"/><text x="0.2507%" y="447.50">`0x7FFCD6C77374</text></g><g><title>suballoc.exe`__scrt_common_main_seh() (141,331 samples, 99.99%)</title><rect x="0.0042%" y="421" width="99.9859%" height="15" fill="rgb(207,181,40)" fg:x="6" fg:w="141331"/><text x="0.2542%" y="431.50">suballoc.exe`__scrt_common_main_seh()</text></g><g><title>suballoc.exe`invoke_main() (141,324 samples, 99.98%)</title><rect x="0.0092%" y="405" width="99.9809%" height="15" fill="rgb(254,173,49)" fg:x="13" fg:w="141324"/><text x="0.2592%" y="415.50">suballoc.exe`invoke_main()</text></g><g><title>suballoc.exe`main (141,324 samples, 99.98%)</title><rect x="0.0092%" y="389" width="99.9809%" height="15" fill="rgb(221,1,38)" fg:x="13" fg:w="141324"/><text x="0.2592%" y="399.50">suballoc.exe`main</text></g><g><title>suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (141,324 samples, 99.98%)</title><rect x="0.0092%" y="373" width="99.9809%" height="15" fill="rgb(206,124,46)" fg:x="13" fg:w="141324"/><text x="0.2592%" y="383.50">suballoc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>suballoc.exe`suballoc::main (141,324 samples, 99.98%)</title><rect x="0.0092%" y="357" width="99.9809%" height="15" fill="rgb(249,21,11)" fg:x="13" fg:w="141324"/><text x="0.2592%" y="367.50">suballoc.exe`suballoc::main</text></g><g><title>suballoc.exe`suballoc::test_tlsf (141,121 samples, 99.84%)</title><rect x="0.1528%" y="341" width="99.8373%" height="15" fill="rgb(222,201,40)" fg:x="216" fg:w="141121"/><text x="0.4028%" y="351.50">suballoc.exe`suballoc::test_tlsf</text></g><g><title>suballoc.exe`suballoc::tlsf::SubAllocator::new (20 samples, 0.01%)</title><rect x="99.9759%" y="325" width="0.0141%" height="15" fill="rgb(235,61,29)" fg:x="141317" fg:w="20"/><text x="100.2259%" y="335.50"></text></g><g><title>all (141,351 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="141351"/><text x="0.2500%" y="479.50"></text></g></svg></svg>