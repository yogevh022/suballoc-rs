<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="5090"><g><title>`0x7FF8C4D1CC70 (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0196%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>`0x7FF8C4D30128 (1 samples, 0.02%)</title><rect x="0.0196%" y="389" width="0.0196%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2696%" y="399.50"></text></g><g><title>`0x7FF8C4D02736 (1 samples, 0.02%)</title><rect x="0.0196%" y="373" width="0.0196%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2696%" y="383.50"></text></g><g><title>`0x7FF8C4D30BD6 (1 samples, 0.02%)</title><rect x="0.0393%" y="373" width="0.0196%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2893%" y="383.50"></text></g><g><title>`0x7FF8C4D303C1 (1 samples, 0.02%)</title><rect x="0.0393%" y="357" width="0.0196%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2893%" y="367.50"></text></g><g><title>`0x7FF8C4D314C2 (1 samples, 0.02%)</title><rect x="0.0393%" y="341" width="0.0196%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.2893%" y="351.50"></text></g><g><title>`0x7FF8C4CE15D0 (1 samples, 0.02%)</title><rect x="0.0393%" y="325" width="0.0196%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2893%" y="335.50"></text></g><g><title>`0x7FF8C4CE17B1 (1 samples, 0.02%)</title><rect x="0.0393%" y="309" width="0.0196%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.2893%" y="319.50"></text></g><g><title>`0x7FF8C4D3D79F (1 samples, 0.02%)</title><rect x="0.0393%" y="293" width="0.0196%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.2893%" y="303.50"></text></g><g><title>`0x7FF8C4D3D855 (1 samples, 0.02%)</title><rect x="0.0393%" y="277" width="0.0196%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.2893%" y="287.50"></text></g><g><title>`0x7FF8C4D30160 (2 samples, 0.04%)</title><rect x="0.0393%" y="389" width="0.0393%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="0.2893%" y="399.50"></text></g><g><title>`0x7FF8C4D30CA0 (1 samples, 0.02%)</title><rect x="0.0589%" y="373" width="0.0196%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.3089%" y="383.50"></text></g><g><title>`0x7FF8C4D311EE (1 samples, 0.02%)</title><rect x="0.0589%" y="357" width="0.0196%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.3089%" y="367.50"></text></g><g><title>`0x7FF8C4D6DE34 (1 samples, 0.02%)</title><rect x="0.0589%" y="341" width="0.0196%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.3089%" y="351.50"></text></g><g><title>`0x7FF8C4D1D79A (4 samples, 0.08%)</title><rect x="0.0196%" y="437" width="0.0786%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="4"/><text x="0.2696%" y="447.50"></text></g><g><title>`0x7FF8C4D33720 (4 samples, 0.08%)</title><rect x="0.0196%" y="421" width="0.0786%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="4"/><text x="0.2696%" y="431.50"></text></g><g><title>`0x7FF8C4D300D3 (4 samples, 0.08%)</title><rect x="0.0196%" y="405" width="0.0786%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="4"/><text x="0.2696%" y="415.50"></text></g><g><title>`0x7FF8C4D302DC (1 samples, 0.02%)</title><rect x="0.0786%" y="389" width="0.0196%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3286%" y="399.50"></text></g><g><title>`0x7FF8C4D6D6B4 (1 samples, 0.02%)</title><rect x="0.0786%" y="373" width="0.0196%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="0.3286%" y="383.50"></text></g><g><title>`0x7FF8C4D30F02 (1 samples, 0.02%)</title><rect x="0.0982%" y="277" width="0.0196%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3482%" y="287.50"></text></g><g><title>`0x7FF8C4D306F7 (1 samples, 0.02%)</title><rect x="0.0982%" y="261" width="0.0196%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3482%" y="271.50"></text></g><g><title>`0x7FF8C4D3086B (1 samples, 0.02%)</title><rect x="0.0982%" y="245" width="0.0196%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3482%" y="255.50"></text></g><g><title>`0x7FF8C4D6DC94 (1 samples, 0.02%)</title><rect x="0.0982%" y="229" width="0.0196%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3482%" y="239.50"></text></g><g><title>`0x7FF8C4CE4AAA (1 samples, 0.02%)</title><rect x="0.1179%" y="245" width="0.0196%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.3679%" y="255.50"></text></g><g><title>`0x7FF8C4CE4D42 (1 samples, 0.02%)</title><rect x="0.1179%" y="229" width="0.0196%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3679%" y="239.50"></text></g><g><title>`0x7FF8C4D6D9F4 (1 samples, 0.02%)</title><rect x="0.1179%" y="213" width="0.0196%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3679%" y="223.50"></text></g><g><title>`0x7FF8C4CE4AAA (1 samples, 0.02%)</title><rect x="0.1375%" y="181" width="0.0196%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="0.3875%" y="191.50"></text></g><g><title>`0x7FF8C4CE4D42 (1 samples, 0.02%)</title><rect x="0.1375%" y="165" width="0.0196%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3875%" y="175.50"></text></g><g><title>`0x7FF8C4D6D9F4 (1 samples, 0.02%)</title><rect x="0.1375%" y="149" width="0.0196%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3875%" y="159.50"></text></g><g><title>`0x7FF8C4CEFB53 (4 samples, 0.08%)</title><rect x="0.0982%" y="309" width="0.0786%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="4"/><text x="0.3482%" y="319.50"></text></g><g><title>`0x7FF8C4D3020F (4 samples, 0.08%)</title><rect x="0.0982%" y="293" width="0.0786%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="4"/><text x="0.3482%" y="303.50"></text></g><g><title>`0x7FF8C4D30F70 (3 samples, 0.06%)</title><rect x="0.1179%" y="277" width="0.0589%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="3"/><text x="0.3679%" y="287.50"></text></g><g><title>`0x7FF8C4D31243 (3 samples, 0.06%)</title><rect x="0.1179%" y="261" width="0.0589%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="3"/><text x="0.3679%" y="271.50"></text></g><g><title>`0x7FF8C4CE4C14 (2 samples, 0.04%)</title><rect x="0.1375%" y="245" width="0.0393%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="2"/><text x="0.3875%" y="255.50"></text></g><g><title>`0x7FF8C4CE7B29 (2 samples, 0.04%)</title><rect x="0.1375%" y="229" width="0.0393%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="2"/><text x="0.3875%" y="239.50"></text></g><g><title>`0x7FF8C4CE88A8 (2 samples, 0.04%)</title><rect x="0.1375%" y="213" width="0.0393%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="2"/><text x="0.3875%" y="223.50"></text></g><g><title>`0x7FF8C4CE4479 (2 samples, 0.04%)</title><rect x="0.1375%" y="197" width="0.0393%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="2"/><text x="0.3875%" y="207.50"></text></g><g><title>`0x7FF8C4CE4C14 (1 samples, 0.02%)</title><rect x="0.1572%" y="181" width="0.0196%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="0.4072%" y="191.50"></text></g><g><title>`0x7FF8C4CE79D2 (1 samples, 0.02%)</title><rect x="0.1572%" y="165" width="0.0196%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="0.4072%" y="175.50"></text></g><g><title>`0x7FF8C4CE5096 (1 samples, 0.02%)</title><rect x="0.1572%" y="149" width="0.0196%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.4072%" y="159.50"></text></g><g><title>`0x7FF8C2B1045F (5 samples, 0.10%)</title><rect x="0.0982%" y="421" width="0.0982%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="5"/><text x="0.3482%" y="431.50"></text></g><g><title>`0x7FF8C2B105A2 (5 samples, 0.10%)</title><rect x="0.0982%" y="405" width="0.0982%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="5"/><text x="0.3482%" y="415.50"></text></g><g><title>`0x7FF8C2B119C7 (5 samples, 0.10%)</title><rect x="0.0982%" y="389" width="0.0982%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="5"/><text x="0.3482%" y="399.50"></text></g><g><title>`0x7FF8C2B0C050 (5 samples, 0.10%)</title><rect x="0.0982%" y="373" width="0.0982%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="5"/><text x="0.3482%" y="383.50"></text></g><g><title>`0x7FF8C239DB72 (5 samples, 0.10%)</title><rect x="0.0982%" y="357" width="0.0982%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="5"/><text x="0.3482%" y="367.50"></text></g><g><title>`0x7FF8C4CE6AF4 (5 samples, 0.10%)</title><rect x="0.0982%" y="341" width="0.0982%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="5"/><text x="0.3482%" y="351.50"></text></g><g><title>`0x7FF8C4CE73E4 (5 samples, 0.10%)</title><rect x="0.0982%" y="325" width="0.0982%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="5"/><text x="0.3482%" y="335.50"></text></g><g><title>`0x7FF8C4CEFBAE (1 samples, 0.02%)</title><rect x="0.1768%" y="309" width="0.0196%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.4268%" y="319.50"></text></g><g><title>`0x7FF8C4D0D947 (1 samples, 0.02%)</title><rect x="0.1768%" y="293" width="0.0196%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.4268%" y="303.50"></text></g><g><title>`0x7FF8C4D3D110 (1 samples, 0.02%)</title><rect x="0.1768%" y="277" width="0.0196%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.4268%" y="287.50"></text></g><g><title>`0x7FF8C4D3D08A (1 samples, 0.02%)</title><rect x="0.1768%" y="261" width="0.0196%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="0.4268%" y="271.50"></text></g><g><title>`0x7FF8C4D3D2F7 (1 samples, 0.02%)</title><rect x="0.1768%" y="245" width="0.0196%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="0.4268%" y="255.50"></text></g><g><title>`0x7FF8C4CE9A1D (1 samples, 0.02%)</title><rect x="0.1768%" y="229" width="0.0196%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.4268%" y="239.50"></text></g><g><title>`0x7FF8C2DB78A7 (1 samples, 0.02%)</title><rect x="0.1768%" y="213" width="0.0196%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.4268%" y="223.50"></text></g><g><title>`0x7FF8C2DB7B4A (1 samples, 0.02%)</title><rect x="0.1768%" y="197" width="0.0196%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.4268%" y="207.50"></text></g><g><title>`0x7FF8C23DB070 (1 samples, 0.02%)</title><rect x="0.1768%" y="181" width="0.0196%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.4268%" y="191.50"></text></g><g><title>`0x7FF8C4CF47B1 (1 samples, 0.02%)</title><rect x="0.1965%" y="357" width="0.0196%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="1"/><text x="0.4465%" y="367.50"></text></g><g><title>`0x7FF8C4CF5B74 (1 samples, 0.02%)</title><rect x="0.1965%" y="341" width="0.0196%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="1"/><text x="0.4465%" y="351.50"></text></g><g><title>`0x7FF8C4CF6F37 (1 samples, 0.02%)</title><rect x="0.1965%" y="325" width="0.0196%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="1"/><text x="0.4465%" y="335.50"></text></g><g><title>`0x7FF8C4CD9B1A (1 samples, 0.02%)</title><rect x="0.1965%" y="309" width="0.0196%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="1"/><text x="0.4465%" y="319.50"></text></g><g><title>`0x7FF8C4D6D8B4 (1 samples, 0.02%)</title><rect x="0.1965%" y="293" width="0.0196%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="1"/><text x="0.4465%" y="303.50"></text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::pop (50 samples, 0.98%)</title><rect x="0.3143%" y="341" width="0.9823%" height="15" fill="rgb(221,10,30)" fg:x="16" fg:w="50"/><text x="0.5643%" y="351.50"></text></g><g><title>malloc.exe`core::ptr::read (6 samples, 0.12%)</title><rect x="1.1788%" y="325" width="0.1179%" height="15" fill="rgb(210,229,1)" fg:x="60" fg:w="6"/><text x="1.4288%" y="335.50"></text></g><g><title>`0x7FF8C4CF1E7F (1 samples, 0.02%)</title><rect x="17.6621%" y="165" width="0.0196%" height="15" fill="rgb(222,148,37)" fg:x="899" fg:w="1"/><text x="17.9121%" y="175.50"></text></g><g><title>`0x7FF8C4D74453 (1 samples, 0.02%)</title><rect x="17.6817%" y="149" width="0.0196%" height="15" fill="rgb(234,67,33)" fg:x="900" fg:w="1"/><text x="17.9317%" y="159.50"></text></g><g><title>`0x7FF8C4D74462 (1 samples, 0.02%)</title><rect x="17.7014%" y="149" width="0.0196%" height="15" fill="rgb(247,98,35)" fg:x="901" fg:w="1"/><text x="17.9514%" y="159.50"></text></g><g><title>`0x7FF8C4D74513 (96 samples, 1.89%)</title><rect x="17.7210%" y="149" width="1.8861%" height="15" fill="rgb(247,138,52)" fg:x="902" fg:w="96"/><text x="17.9710%" y="159.50">`..</text></g><g><title>`0x7FF8C4D74517 (5 samples, 0.10%)</title><rect x="19.6071%" y="149" width="0.0982%" height="15" fill="rgb(213,79,30)" fg:x="998" fg:w="5"/><text x="19.8571%" y="159.50"></text></g><g><title>`0x7FF8C4D7451B (1 samples, 0.02%)</title><rect x="19.7053%" y="149" width="0.0196%" height="15" fill="rgb(246,177,23)" fg:x="1003" fg:w="1"/><text x="19.9553%" y="159.50"></text></g><g><title>`0x7FF8C4D74520 (1 samples, 0.02%)</title><rect x="19.7250%" y="149" width="0.0196%" height="15" fill="rgb(230,62,27)" fg:x="1004" fg:w="1"/><text x="19.9750%" y="159.50"></text></g><g><title>`0x7FF8C4D74527 (5 samples, 0.10%)</title><rect x="19.7446%" y="149" width="0.0982%" height="15" fill="rgb(216,154,8)" fg:x="1005" fg:w="5"/><text x="19.9946%" y="159.50"></text></g><g><title>`0x7FF8C4D7452B (8 samples, 0.16%)</title><rect x="19.8428%" y="149" width="0.1572%" height="15" fill="rgb(244,35,45)" fg:x="1010" fg:w="8"/><text x="20.0928%" y="159.50"></text></g><g><title>`0x7FF8C4D7452F (3 samples, 0.06%)</title><rect x="20.0000%" y="149" width="0.0589%" height="15" fill="rgb(251,115,12)" fg:x="1018" fg:w="3"/><text x="20.2500%" y="159.50"></text></g><g><title>`0x7FF8C4CF27D9 (125 samples, 2.46%)</title><rect x="17.6817%" y="165" width="2.4558%" height="15" fill="rgb(240,54,50)" fg:x="900" fg:w="125"/><text x="17.9317%" y="175.50">`0..</text></g><g><title>`0x7FF8C4D74532 (4 samples, 0.08%)</title><rect x="20.0589%" y="149" width="0.0786%" height="15" fill="rgb(233,84,52)" fg:x="1021" fg:w="4"/><text x="20.3089%" y="159.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::grow_one&lt;usize,alloc::alloc::Global&gt; (132 samples, 2.59%)</title><rect x="17.6621%" y="325" width="2.5933%" height="15" fill="rgb(207,117,47)" fg:x="899" fg:w="132"/><text x="17.9121%" y="335.50">ma..</text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (132 samples, 2.59%)</title><rect x="17.6621%" y="309" width="2.5933%" height="15" fill="rgb(249,43,39)" fg:x="899" fg:w="132"/><text x="17.9121%" y="319.50">ma..</text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (132 samples, 2.59%)</title><rect x="17.6621%" y="293" width="2.5933%" height="15" fill="rgb(209,38,44)" fg:x="899" fg:w="132"/><text x="17.9121%" y="303.50">ma..</text></g><g><title>malloc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (132 samples, 2.59%)</title><rect x="17.6621%" y="277" width="2.5933%" height="15" fill="rgb(236,212,23)" fg:x="899" fg:w="132"/><text x="17.9121%" y="287.50">ma..</text></g><g><title>malloc.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (132 samples, 2.59%)</title><rect x="17.6621%" y="261" width="2.5933%" height="15" fill="rgb(242,79,21)" fg:x="899" fg:w="132"/><text x="17.9121%" y="271.50">ma..</text></g><g><title>malloc.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (132 samples, 2.59%)</title><rect x="17.6621%" y="245" width="2.5933%" height="15" fill="rgb(211,96,35)" fg:x="899" fg:w="132"/><text x="17.9121%" y="255.50">ma..</text></g><g><title>malloc.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (132 samples, 2.59%)</title><rect x="17.6621%" y="229" width="2.5933%" height="15" fill="rgb(253,215,40)" fg:x="899" fg:w="132"/><text x="17.9121%" y="239.50">ma..</text></g><g><title>malloc.exe`core::result::impl$27::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (132 samples, 2.59%)</title><rect x="17.6621%" y="213" width="2.5933%" height="15" fill="rgb(211,81,21)" fg:x="899" fg:w="132"/><text x="17.9121%" y="223.50">ma..</text></g><g><title>`0x7FF8C4CF36BD (132 samples, 2.59%)</title><rect x="17.6621%" y="197" width="2.5933%" height="15" fill="rgb(208,190,38)" fg:x="899" fg:w="132"/><text x="17.9121%" y="207.50">`0..</text></g><g><title>`0x7FF8C4CF38E3 (132 samples, 2.59%)</title><rect x="17.6621%" y="181" width="2.5933%" height="15" fill="rgb(235,213,38)" fg:x="899" fg:w="132"/><text x="17.9121%" y="191.50">`0..</text></g><g><title>`0x7FF8C4CF27F0 (6 samples, 0.12%)</title><rect x="20.1375%" y="165" width="0.1179%" height="15" fill="rgb(237,122,38)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="175.50"></text></g><g><title>`0x7FF8C4CF47B1 (6 samples, 0.12%)</title><rect x="20.1375%" y="149" width="0.1179%" height="15" fill="rgb(244,218,35)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="159.50"></text></g><g><title>`0x7FF8C4CF5B74 (6 samples, 0.12%)</title><rect x="20.1375%" y="133" width="0.1179%" height="15" fill="rgb(240,68,47)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="143.50"></text></g><g><title>`0x7FF8C4CF6F37 (6 samples, 0.12%)</title><rect x="20.1375%" y="117" width="0.1179%" height="15" fill="rgb(210,16,53)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="127.50"></text></g><g><title>`0x7FF8C4CD9B1A (6 samples, 0.12%)</title><rect x="20.1375%" y="101" width="0.1179%" height="15" fill="rgb(235,124,12)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="111.50"></text></g><g><title>`0x7FF8C4D6D8B4 (6 samples, 0.12%)</title><rect x="20.1375%" y="85" width="0.1179%" height="15" fill="rgb(224,169,11)" fg:x="1025" fg:w="6"/><text x="20.3875%" y="95.50"></text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_ptr (44 samples, 0.86%)</title><rect x="20.2554%" y="325" width="0.8644%" height="15" fill="rgb(250,166,2)" fg:x="1031" fg:w="44"/><text x="20.5054%" y="335.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (44 samples, 0.86%)</title><rect x="20.2554%" y="309" width="0.8644%" height="15" fill="rgb(242,216,29)" fg:x="1031" fg:w="44"/><text x="20.5054%" y="319.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (44 samples, 0.86%)</title><rect x="20.2554%" y="293" width="0.8644%" height="15" fill="rgb(230,116,27)" fg:x="1031" fg:w="44"/><text x="20.5054%" y="303.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (44 samples, 0.86%)</title><rect x="20.2554%" y="277" width="0.8644%" height="15" fill="rgb(228,99,48)" fg:x="1031" fg:w="44"/><text x="20.5054%" y="287.50"></text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::push (1,100 samples, 21.61%)</title><rect x="1.2967%" y="341" width="21.6110%" height="15" fill="rgb(253,11,6)" fg:x="66" fg:w="1100"/><text x="1.5467%" y="351.50">malloc.exe`alloc::vec::Vec&lt;usize,a..</text></g><g><title>malloc.exe`core::ptr::write (91 samples, 1.79%)</title><rect x="21.1198%" y="325" width="1.7878%" height="15" fill="rgb(247,143,39)" fg:x="1075" fg:w="91"/><text x="21.3698%" y="335.50">m..</text></g><g><title>malloc.exe`core::iter::range::impl$6::next(core::ops::range::Range (91 samples, 1.79%)</title><rect x="22.9077%" y="341" width="1.7878%" height="15" fill="rgb(236,97,10)" fg:x="1166" fg:w="91"/><text x="23.1577%" y="351.50">m..</text></g><g><title>malloc.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (91 samples, 1.79%)</title><rect x="22.9077%" y="325" width="1.7878%" height="15" fill="rgb(233,208,19)" fg:x="1166" fg:w="91"/><text x="23.1577%" y="335.50">m..</text></g><g><title>malloc.exe`core::cmp::impls::impl$58::lt (41 samples, 0.81%)</title><rect x="23.8900%" y="309" width="0.8055%" height="15" fill="rgb(216,164,2)" fg:x="1216" fg:w="41"/><text x="24.1400%" y="319.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 0.02%)</title><rect x="24.6955%" y="325" width="0.0196%" height="15" fill="rgb(220,129,5)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="335.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 0.02%)</title><rect x="24.6955%" y="309" width="0.0196%" height="15" fill="rgb(242,17,10)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="319.50"></text></g><g><title>malloc.exe`alloc::raw_vec::impl$3::drop(alloc::raw_vec::RawVec (1 samples, 0.02%)</title><rect x="24.6955%" y="293" width="0.0196%" height="15" fill="rgb(242,107,0)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="303.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 0.02%)</title><rect x="24.6955%" y="277" width="0.0196%" height="15" fill="rgb(251,28,31)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="287.50"></text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (1 samples, 0.02%)</title><rect x="24.6955%" y="261" width="0.0196%" height="15" fill="rgb(233,223,10)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="271.50"></text></g><g><title>`0x7FF8C4CF47B1 (1 samples, 0.02%)</title><rect x="24.6955%" y="245" width="0.0196%" height="15" fill="rgb(215,21,27)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="255.50"></text></g><g><title>`0x7FF8C4CF5B74 (1 samples, 0.02%)</title><rect x="24.6955%" y="229" width="0.0196%" height="15" fill="rgb(232,23,21)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="239.50"></text></g><g><title>`0x7FF8C4CF6F37 (1 samples, 0.02%)</title><rect x="24.6955%" y="213" width="0.0196%" height="15" fill="rgb(244,5,23)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="223.50"></text></g><g><title>`0x7FF8C4CD9B1A (1 samples, 0.02%)</title><rect x="24.6955%" y="197" width="0.0196%" height="15" fill="rgb(226,81,46)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="207.50"></text></g><g><title>`0x7FF8C4D6D8B4 (1 samples, 0.02%)</title><rect x="24.6955%" y="181" width="0.0196%" height="15" fill="rgb(247,70,30)" fg:x="1257" fg:w="1"/><text x="24.9455%" y="191.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place (2 samples, 0.04%)</title><rect x="24.6955%" y="341" width="0.0393%" height="15" fill="rgb(212,68,19)" fg:x="1257" fg:w="2"/><text x="24.9455%" y="351.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap (1 samples, 0.02%)</title><rect x="24.7151%" y="325" width="0.0196%" height="15" fill="rgb(240,187,13)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="335.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place(hashbrown::map::HashMap (1 samples, 0.02%)</title><rect x="24.7151%" y="309" width="0.0196%" height="15" fill="rgb(223,113,26)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="319.50"></text></g><g><title>malloc.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$ (1 samples, 0.02%)</title><rect x="24.7151%" y="293" width="0.0196%" height="15" fill="rgb(206,192,2)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="303.50"></text></g><g><title>malloc.exe`hashbrown::raw::impl$18::drop(hashbrown::raw::RawTable&lt;tuple$ (1 samples, 0.02%)</title><rect x="24.7151%" y="277" width="0.0196%" height="15" fill="rgb(241,108,4)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="287.50"></text></g><g><title>malloc.exe`hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.02%)</title><rect x="24.7151%" y="261" width="0.0196%" height="15" fill="rgb(247,173,49)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="271.50"></text></g><g><title>`0x7FF8C4CF47B1 (1 samples, 0.02%)</title><rect x="24.7151%" y="245" width="0.0196%" height="15" fill="rgb(224,114,35)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="255.50"></text></g><g><title>`0x7FF8C4CF5B74 (1 samples, 0.02%)</title><rect x="24.7151%" y="229" width="0.0196%" height="15" fill="rgb(245,159,27)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="239.50"></text></g><g><title>`0x7FF8C4CF6F37 (1 samples, 0.02%)</title><rect x="24.7151%" y="213" width="0.0196%" height="15" fill="rgb(245,172,44)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="223.50"></text></g><g><title>`0x7FF8C4CD9B1A (1 samples, 0.02%)</title><rect x="24.7151%" y="197" width="0.0196%" height="15" fill="rgb(236,23,11)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="207.50"></text></g><g><title>`0x7FF8C4D6D8B4 (1 samples, 0.02%)</title><rect x="24.7151%" y="181" width="0.0196%" height="15" fill="rgb(205,117,38)" fg:x="1258" fg:w="1"/><text x="24.9651%" y="191.50"></text></g><g><title>malloc.exe`alloc::vec::impl$13::index(alloc::vec::Vec (41 samples, 0.81%)</title><rect x="42.1022%" y="325" width="0.8055%" height="15" fill="rgb(237,72,25)" fg:x="2143" fg:w="41"/><text x="42.3522%" y="335.50"></text></g><g><title>malloc.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (41 samples, 0.81%)</title><rect x="42.1022%" y="309" width="0.8055%" height="15" fill="rgb(244,70,9)" fg:x="2143" fg:w="41"/><text x="42.3522%" y="319.50"></text></g><g><title>malloc.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (41 samples, 0.81%)</title><rect x="42.1022%" y="293" width="0.8055%" height="15" fill="rgb(217,125,39)" fg:x="2143" fg:w="41"/><text x="42.3522%" y="303.50"></text></g><g><title>malloc.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (280 samples, 5.50%)</title><rect x="42.9077%" y="325" width="5.5010%" height="15" fill="rgb(235,36,10)" fg:x="2184" fg:w="280"/><text x="43.1577%" y="335.50">malloc...</text></g><g><title>malloc.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (280 samples, 5.50%)</title><rect x="42.9077%" y="309" width="5.5010%" height="15" fill="rgb(251,123,47)" fg:x="2184" fg:w="280"/><text x="43.1577%" y="319.50">malloc...</text></g><g><title>malloc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (280 samples, 5.50%)</title><rect x="42.9077%" y="293" width="5.5010%" height="15" fill="rgb(221,13,13)" fg:x="2184" fg:w="280"/><text x="43.1577%" y="303.50">malloc...</text></g><g><title>malloc.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (5 samples, 0.10%)</title><rect x="48.4086%" y="325" width="0.0982%" height="15" fill="rgb(238,131,9)" fg:x="2464" fg:w="5"/><text x="48.6586%" y="335.50"></text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_slice (5 samples, 0.10%)</title><rect x="48.4086%" y="309" width="0.0982%" height="15" fill="rgb(211,50,8)" fg:x="2464" fg:w="5"/><text x="48.6586%" y="319.50"></text></g><g><title>malloc.exe`core::iter::adapters::enumerate::impl$1::next(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (148 samples, 2.91%)</title><rect x="48.5069%" y="325" width="2.9077%" height="15" fill="rgb(245,182,24)" fg:x="2469" fg:w="148"/><text x="48.7569%" y="335.50">ma..</text></g><g><title>malloc.exe`core::slice::iter::impl$183::next(core::slice::iter::Iter (148 samples, 2.91%)</title><rect x="48.5069%" y="309" width="2.9077%" height="15" fill="rgb(242,14,37)" fg:x="2469" fg:w="148"/><text x="48.7569%" y="319.50">ma..</text></g><g><title>malloc.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (133 samples, 2.61%)</title><rect x="48.8016%" y="293" width="2.6130%" height="15" fill="rgb(246,228,12)" fg:x="2484" fg:w="133"/><text x="49.0516%" y="303.50">ma..</text></g><g><title>malloc.exe`malloc::firstfit::Malloc::alloc (1,363 samples, 26.78%)</title><rect x="24.7348%" y="341" width="26.7780%" height="15" fill="rgb(213,55,15)" fg:x="1259" fg:w="1363"/><text x="24.9848%" y="351.50">malloc.exe`malloc::firstfit::Malloc::alloc</text></g><g><title>malloc.exe`malloc::firstfit::Malloc::partition_leftover (5 samples, 0.10%)</title><rect x="51.4145%" y="325" width="0.0982%" height="15" fill="rgb(209,9,3)" fg:x="2617" fg:w="5"/><text x="51.6645%" y="335.50"></text></g><g><title>malloc.exe`alloc::vec::Vec&lt;malloc::firstfit::MemBlock,alloc::alloc::Global&gt;::as_slice (9 samples, 0.18%)</title><rect x="74.8134%" y="293" width="0.1768%" height="15" fill="rgb(230,59,30)" fg:x="3808" fg:w="9"/><text x="75.0634%" y="303.50"></text></g><g><title>malloc.exe`alloc::vec::impl$13::index(alloc::vec::Vec (276 samples, 5.42%)</title><rect x="74.8134%" y="325" width="5.4224%" height="15" fill="rgb(209,121,21)" fg:x="3808" fg:w="276"/><text x="75.0634%" y="335.50">malloc...</text></g><g><title>malloc.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (276 samples, 5.42%)</title><rect x="74.8134%" y="309" width="5.4224%" height="15" fill="rgb(220,109,13)" fg:x="3808" fg:w="276"/><text x="75.0634%" y="319.50">malloc...</text></g><g><title>malloc.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (267 samples, 5.25%)</title><rect x="74.9902%" y="293" width="5.2456%" height="15" fill="rgb(232,18,1)" fg:x="3817" fg:w="267"/><text x="75.2402%" y="303.50">malloc..</text></g><g><title>malloc.exe`alloc::vec::impl$14::index_mut(alloc::vec::Vec (427 samples, 8.39%)</title><rect x="80.2358%" y="325" width="8.3890%" height="15" fill="rgb(215,41,42)" fg:x="4084" fg:w="427"/><text x="80.4858%" y="335.50">malloc.exe`a..</text></g><g><title>malloc.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (427 samples, 8.39%)</title><rect x="80.2358%" y="309" width="8.3890%" height="15" fill="rgb(224,123,36)" fg:x="4084" fg:w="427"/><text x="80.4858%" y="319.50">malloc.exe`c..</text></g><g><title>malloc.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (427 samples, 8.39%)</title><rect x="80.2358%" y="293" width="8.3890%" height="15" fill="rgb(240,125,3)" fg:x="4084" fg:w="427"/><text x="80.4858%" y="303.50">malloc.exe`c..</text></g><g><title>malloc.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (119 samples, 2.34%)</title><rect x="88.6248%" y="325" width="2.3379%" height="15" fill="rgb(205,98,50)" fg:x="4511" fg:w="119"/><text x="88.8748%" y="335.50">m..</text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_slice (119 samples, 2.34%)</title><rect x="88.6248%" y="309" width="2.3379%" height="15" fill="rgb(205,185,37)" fg:x="4511" fg:w="119"/><text x="88.8748%" y="319.50">m..</text></g><g><title>malloc.exe`alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;::as_mut_ptr (106 samples, 2.08%)</title><rect x="88.8802%" y="293" width="2.0825%" height="15" fill="rgb(238,207,15)" fg:x="4524" fg:w="106"/><text x="89.1302%" y="303.50">m..</text></g><g><title>malloc.exe`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::ptr (106 samples, 2.08%)</title><rect x="88.8802%" y="277" width="2.0825%" height="15" fill="rgb(213,199,42)" fg:x="4524" fg:w="106"/><text x="89.1302%" y="287.50">m..</text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (106 samples, 2.08%)</title><rect x="88.8802%" y="261" width="2.0825%" height="15" fill="rgb(235,201,11)" fg:x="4524" fg:w="106"/><text x="89.1302%" y="271.50">m..</text></g><g><title>malloc.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (106 samples, 2.08%)</title><rect x="88.8802%" y="245" width="2.0825%" height="15" fill="rgb(207,46,11)" fg:x="4524" fg:w="106"/><text x="89.1302%" y="255.50">m..</text></g><g><title>malloc.exe`core::slice::iter::impl$191::next(core::slice::iter::IterMut (43 samples, 0.84%)</title><rect x="93.9686%" y="309" width="0.8448%" height="15" fill="rgb(241,35,35)" fg:x="4783" fg:w="43"/><text x="94.2186%" y="319.50"></text></g><g><title>malloc.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;usize&gt;*, core::ptr::non_null::NonNull (2 samples, 0.04%)</title><rect x="94.7741%" y="293" width="0.0393%" height="15" fill="rgb(243,32,47)" fg:x="4824" fg:w="2"/><text x="95.0241%" y="303.50"></text></g><g><title>malloc.exe`malloc::firstfit::Malloc::free (2,218 samples, 43.58%)</title><rect x="51.5128%" y="341" width="43.5756%" height="15" fill="rgb(247,202,23)" fg:x="2622" fg:w="2218"/><text x="51.7628%" y="351.50">malloc.exe`malloc::firstfit::Malloc::free</text></g><g><title>malloc.exe`core::slice::iter::impl$191::find(core::slice::iter::IterMut (210 samples, 4.13%)</title><rect x="90.9627%" y="325" width="4.1257%" height="15" fill="rgb(219,102,11)" fg:x="4630" fg:w="210"/><text x="91.2127%" y="335.50">mall..</text></g><g><title>malloc.exe`malloc::firstfit::impl$1::free::closure$0 (14 samples, 0.28%)</title><rect x="94.8134%" y="309" width="0.2750%" height="15" fill="rgb(243,110,44)" fg:x="4826" fg:w="14"/><text x="95.0634%" y="319.50"></text></g><g><title>`0x7FF8A8481C84 (1 samples, 0.02%)</title><rect x="95.0884%" y="325" width="0.0196%" height="15" fill="rgb(222,74,54)" fg:x="4840" fg:w="1"/><text x="95.3384%" y="335.50"></text></g><g><title>`0x7FF8A8481C89 (21 samples, 0.41%)</title><rect x="95.1081%" y="325" width="0.4126%" height="15" fill="rgb(216,99,12)" fg:x="4841" fg:w="21"/><text x="95.3581%" y="335.50"></text></g><g><title>`0x7FF8A8481C8E (2 samples, 0.04%)</title><rect x="95.5206%" y="325" width="0.0393%" height="15" fill="rgb(226,22,26)" fg:x="4862" fg:w="2"/><text x="95.7706%" y="335.50"></text></g><g><title>`0x7FF8A8481C93 (9 samples, 0.18%)</title><rect x="95.5599%" y="325" width="0.1768%" height="15" fill="rgb(217,163,10)" fg:x="4864" fg:w="9"/><text x="95.8099%" y="335.50"></text></g><g><title>`0x7FF8A8481C9B (162 samples, 3.18%)</title><rect x="95.7367%" y="325" width="3.1827%" height="15" fill="rgb(213,25,53)" fg:x="4873" fg:w="162"/><text x="95.9867%" y="335.50">`0x..</text></g><g><title>`0x7FF8A8481CA3 (19 samples, 0.37%)</title><rect x="98.9194%" y="325" width="0.3733%" height="15" fill="rgb(252,105,26)" fg:x="5035" fg:w="19"/><text x="99.1694%" y="335.50"></text></g><g><title>`0x7FF8A8481CAB (3 samples, 0.06%)</title><rect x="99.2927%" y="325" width="0.0589%" height="15" fill="rgb(220,39,43)" fg:x="5054" fg:w="3"/><text x="99.5427%" y="335.50"></text></g><g><title>malloc.exe`malloc::firstfit::Malloc::new (233 samples, 4.58%)</title><rect x="95.0884%" y="341" width="4.5776%" height="15" fill="rgb(229,68,48)" fg:x="4840" fg:w="233"/><text x="95.3384%" y="351.50">mallo..</text></g><g><title>`0x7FF8A8481CB3 (16 samples, 0.31%)</title><rect x="99.3517%" y="325" width="0.3143%" height="15" fill="rgb(252,8,32)" fg:x="5057" fg:w="16"/><text x="99.6017%" y="335.50"></text></g><g><title>malloc.exe`std::sys::stdio::windows::is_console (1 samples, 0.02%)</title><rect x="99.6660%" y="85" width="0.0196%" height="15" fill="rgb(223,20,43)" fg:x="5073" fg:w="1"/><text x="99.9160%" y="95.50"></text></g><g><title>`0x7FF8C23D3D50 (1 samples, 0.02%)</title><rect x="99.6660%" y="69" width="0.0196%" height="15" fill="rgb(229,81,49)" fg:x="5073" fg:w="1"/><text x="99.9160%" y="79.50"></text></g><g><title>`0x7FF8C4D6D5D4 (1 samples, 0.02%)</title><rect x="99.6660%" y="53" width="0.0196%" height="15" fill="rgb(236,28,36)" fg:x="5073" fg:w="1"/><text x="99.9160%" y="63.50"></text></g><g><title>malloc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (5,065 samples, 99.51%)</title><rect x="0.1965%" y="389" width="99.5088%" height="15" fill="rgb(249,185,26)" fg:x="10" fg:w="5065"/><text x="0.4465%" y="399.50">malloc.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>malloc.exe`malloc::main (5,065 samples, 99.51%)</title><rect x="0.1965%" y="373" width="99.5088%" height="15" fill="rgb(249,174,33)" fg:x="10" fg:w="5065"/><text x="0.4465%" y="383.50">malloc.exe`malloc::main</text></g><g><title>malloc.exe`malloc::test::test_malloc (5,064 samples, 99.49%)</title><rect x="0.2161%" y="357" width="99.4892%" height="15" fill="rgb(233,201,37)" fg:x="11" fg:w="5064"/><text x="0.4661%" y="367.50">malloc.exe`malloc::test::test_malloc</text></g><g><title>malloc.exe`std::io::stdio::_print (2 samples, 0.04%)</title><rect x="99.6660%" y="341" width="0.0393%" height="15" fill="rgb(221,78,26)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="351.50"></text></g><g><title>malloc.exe`std::io::stdio::print_to (2 samples, 0.04%)</title><rect x="99.6660%" y="325" width="0.0393%" height="15" fill="rgb(250,127,30)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="335.50"></text></g><g><title>malloc.exe`std::io::stdio::impl$15::write_fmt (2 samples, 0.04%)</title><rect x="99.6660%" y="309" width="0.0393%" height="15" fill="rgb(230,49,44)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="319.50"></text></g><g><title>malloc.exe`std::io::stdio::impl$16::write_fmt (2 samples, 0.04%)</title><rect x="99.6660%" y="293" width="0.0393%" height="15" fill="rgb(229,67,23)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="303.50"></text></g><g><title>malloc.exe`std::io::Write::write_fmt (2 samples, 0.04%)</title><rect x="99.6660%" y="277" width="0.0393%" height="15" fill="rgb(249,83,47)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="287.50"></text></g><g><title>malloc.exe`std::io::default_write_fmt (2 samples, 0.04%)</title><rect x="99.6660%" y="261" width="0.0393%" height="15" fill="rgb(215,43,3)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="271.50"></text></g><g><title>malloc.exe`core::fmt::write (2 samples, 0.04%)</title><rect x="99.6660%" y="245" width="0.0393%" height="15" fill="rgb(238,154,13)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="255.50"></text></g><g><title>malloc.exe`std::io::default_write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (2 samples, 0.04%)</title><rect x="99.6660%" y="229" width="0.0393%" height="15" fill="rgb(219,56,2)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="239.50"></text></g><g><title>malloc.exe`std::io::stdio::impl$19::write_all (2 samples, 0.04%)</title><rect x="99.6660%" y="213" width="0.0393%" height="15" fill="rgb(233,0,4)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="223.50"></text></g><g><title>malloc.exe`core::cell::RefCell::borrow_mut (2 samples, 0.04%)</title><rect x="99.6660%" y="197" width="0.0393%" height="15" fill="rgb(235,30,7)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="207.50"></text></g><g><title>malloc.exe`std::io::buffered::linewritershim::impl$1::write_all (2 samples, 0.04%)</title><rect x="99.6660%" y="181" width="0.0393%" height="15" fill="rgb(250,79,13)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="191.50"></text></g><g><title>malloc.exe`core::result::impl$27::branch (2 samples, 0.04%)</title><rect x="99.6660%" y="165" width="0.0393%" height="15" fill="rgb(211,146,34)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="175.50"></text></g><g><title>malloc.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (2 samples, 0.04%)</title><rect x="99.6660%" y="149" width="0.0393%" height="15" fill="rgb(228,22,38)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="159.50"></text></g><g><title>malloc.exe`std::io::stdio::impl$1::write (2 samples, 0.04%)</title><rect x="99.6660%" y="133" width="0.0393%" height="15" fill="rgb(235,168,5)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="143.50"></text></g><g><title>malloc.exe`std::io::stdio::handle_ebadf (2 samples, 0.04%)</title><rect x="99.6660%" y="117" width="0.0393%" height="15" fill="rgb(221,155,16)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="127.50"></text></g><g><title>malloc.exe`std::sys::stdio::windows::write (2 samples, 0.04%)</title><rect x="99.6660%" y="101" width="0.0393%" height="15" fill="rgb(215,215,53)" fg:x="5073" fg:w="2"/><text x="99.9160%" y="111.50"></text></g><g><title>malloc.exe`std::sys::stdio::windows::is_utf8_console (1 samples, 0.02%)</title><rect x="99.6857%" y="85" width="0.0196%" height="15" fill="rgb(223,4,10)" fg:x="5074" fg:w="1"/><text x="99.9357%" y="95.50"></text></g><g><title>`0x7FF8C2383677 (1 samples, 0.02%)</title><rect x="99.6857%" y="69" width="0.0196%" height="15" fill="rgb(234,103,6)" fg:x="5074" fg:w="1"/><text x="99.9357%" y="79.50"></text></g><g><title>`0x7FF8C4D6D5D4 (1 samples, 0.02%)</title><rect x="99.6857%" y="53" width="0.0196%" height="15" fill="rgb(227,97,0)" fg:x="5074" fg:w="1"/><text x="99.9357%" y="63.50"></text></g><g><title>`0x7FF8C4D1CC91 (5,075 samples, 99.71%)</title><rect x="0.0196%" y="469" width="99.7053%" height="15" fill="rgb(234,150,53)" fg:x="1" fg:w="5075"/><text x="0.2696%" y="479.50">`0x7FF8C4D1CC91</text></g><g><title>`0x7FF8C3A07374 (5,075 samples, 99.71%)</title><rect x="0.0196%" y="453" width="99.7053%" height="15" fill="rgb(228,201,54)" fg:x="1" fg:w="5075"/><text x="0.2696%" y="463.50">`0x7FF8C3A07374</text></g><g><title>malloc.exe`__scrt_common_main_seh() (5,071 samples, 99.63%)</title><rect x="0.0982%" y="437" width="99.6267%" height="15" fill="rgb(222,22,37)" fg:x="5" fg:w="5071"/><text x="0.3482%" y="447.50">malloc.exe`__scrt_common_main_seh()</text></g><g><title>malloc.exe`invoke_main() (5,066 samples, 99.53%)</title><rect x="0.1965%" y="421" width="99.5285%" height="15" fill="rgb(237,53,32)" fg:x="10" fg:w="5066"/><text x="0.4465%" y="431.50">malloc.exe`invoke_main()</text></g><g><title>malloc.exe`main (5,066 samples, 99.53%)</title><rect x="0.1965%" y="405" width="99.5285%" height="15" fill="rgb(233,25,53)" fg:x="10" fg:w="5066"/><text x="0.4465%" y="415.50">malloc.exe`main</text></g><g><title>malloc.exe`std::sys::sync::once::futex::Once::call (1 samples, 0.02%)</title><rect x="99.7053%" y="389" width="0.0196%" height="15" fill="rgb(210,40,34)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="399.50"></text></g><g><title>malloc.exe`core::cell::Cell::get (1 samples, 0.02%)</title><rect x="99.7053%" y="373" width="0.0196%" height="15" fill="rgb(241,220,44)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="383.50"></text></g><g><title>malloc.exe`std::sync::poison::once::impl$2::call_once::closure$0&lt;std::rt::cleanup::closure_env$0&gt; (1 samples, 0.02%)</title><rect x="99.7053%" y="357" width="0.0196%" height="15" fill="rgb(235,28,35)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="367.50"></text></g><g><title>malloc.exe`std::rt::cleanup::closure$0 (1 samples, 0.02%)</title><rect x="99.7053%" y="341" width="0.0196%" height="15" fill="rgb(210,56,17)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="351.50"></text></g><g><title>malloc.exe`std::io::stdio::cleanup (1 samples, 0.02%)</title><rect x="99.7053%" y="325" width="0.0196%" height="15" fill="rgb(224,130,29)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="335.50"></text></g><g><title>`0x7FF8C4CF47B1 (1 samples, 0.02%)</title><rect x="99.7053%" y="309" width="0.0196%" height="15" fill="rgb(235,212,8)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="319.50"></text></g><g><title>`0x7FF8C4CF5B74 (1 samples, 0.02%)</title><rect x="99.7053%" y="293" width="0.0196%" height="15" fill="rgb(223,33,50)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="303.50"></text></g><g><title>`0x7FF8C4CF65F6 (1 samples, 0.02%)</title><rect x="99.7053%" y="277" width="0.0196%" height="15" fill="rgb(219,149,13)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="287.50"></text></g><g><title>`0x7FF8C4CEE412 (1 samples, 0.02%)</title><rect x="99.7053%" y="261" width="0.0196%" height="15" fill="rgb(250,156,29)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="271.50"></text></g><g><title>`0x7FF8C4CEF35E (1 samples, 0.02%)</title><rect x="99.7053%" y="245" width="0.0196%" height="15" fill="rgb(216,193,19)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="255.50"></text></g><g><title>`0x7FF8C4CF095C (1 samples, 0.02%)</title><rect x="99.7053%" y="229" width="0.0196%" height="15" fill="rgb(216,135,14)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="239.50"></text></g><g><title>`0x7FF8C4CD9B1A (1 samples, 0.02%)</title><rect x="99.7053%" y="213" width="0.0196%" height="15" fill="rgb(241,47,5)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="223.50"></text></g><g><title>`0x7FF8C4D6D8B4 (1 samples, 0.02%)</title><rect x="99.7053%" y="197" width="0.0196%" height="15" fill="rgb(233,42,35)" fg:x="5075" fg:w="1"/><text x="99.9553%" y="207.50"></text></g><g><title>`0x7FF8C4DA1EA9 (1 samples, 0.02%)</title><rect x="99.7250%" y="421" width="0.0196%" height="15" fill="rgb(231,13,6)" fg:x="5076" fg:w="1"/><text x="99.9750%" y="431.50"></text></g><g><title>`0x7FF8C4DA1D40 (1 samples, 0.02%)</title><rect x="99.7250%" y="405" width="0.0196%" height="15" fill="rgb(207,181,40)" fg:x="5076" fg:w="1"/><text x="99.9750%" y="415.50"></text></g><g><title>`0x7FF8C4DB54A1 (1 samples, 0.02%)</title><rect x="99.7250%" y="389" width="0.0196%" height="15" fill="rgb(254,173,49)" fg:x="5076" fg:w="1"/><text x="99.9750%" y="399.50"></text></g><g><title>`0x7FF8C4D74603 (1 samples, 0.02%)</title><rect x="99.7250%" y="373" width="0.0196%" height="15" fill="rgb(221,1,38)" fg:x="5076" fg:w="1"/><text x="99.9750%" y="383.50"></text></g><g><title>`0x7FF8C4DA2878 (1 samples, 0.02%)</title><rect x="99.7446%" y="421" width="0.0196%" height="15" fill="rgb(206,124,46)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="431.50"></text></g><g><title>`0x7FF8C4D12EA0 (1 samples, 0.02%)</title><rect x="99.7446%" y="405" width="0.0196%" height="15" fill="rgb(249,21,11)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="415.50"></text></g><g><title>`0x7FF8C4D130E5 (1 samples, 0.02%)</title><rect x="99.7446%" y="389" width="0.0196%" height="15" fill="rgb(222,201,40)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="399.50"></text></g><g><title>`0x7FF8C4D12F43 (1 samples, 0.02%)</title><rect x="99.7446%" y="373" width="0.0196%" height="15" fill="rgb(235,61,29)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="383.50"></text></g><g><title>`0x7FF8C4D138C0 (1 samples, 0.02%)</title><rect x="99.7446%" y="357" width="0.0196%" height="15" fill="rgb(219,207,3)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="367.50"></text></g><g><title>`0x7FF8C4D4E461 (1 samples, 0.02%)</title><rect x="99.7446%" y="341" width="0.0196%" height="15" fill="rgb(222,56,46)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="351.50"></text></g><g><title>`0x7FF8C4D70D84 (1 samples, 0.02%)</title><rect x="99.7446%" y="325" width="0.0196%" height="15" fill="rgb(239,76,54)" fg:x="5077" fg:w="1"/><text x="99.9946%" y="335.50"></text></g><g><title>`0x7FF8C4CE43EA (1 samples, 0.02%)</title><rect x="99.7642%" y="341" width="0.0196%" height="15" fill="rgb(231,124,27)" fg:x="5078" fg:w="1"/><text x="100.0142%" y="351.50"></text></g><g><title>`0x7FF8C4CE5157 (1 samples, 0.02%)</title><rect x="99.7642%" y="325" width="0.0196%" height="15" fill="rgb(249,195,6)" fg:x="5078" fg:w="1"/><text x="100.0142%" y="335.50"></text></g><g><title>`0x7FF8C4D6DBD4 (1 samples, 0.02%)</title><rect x="99.7642%" y="309" width="0.0196%" height="15" fill="rgb(237,174,47)" fg:x="5078" fg:w="1"/><text x="100.0142%" y="319.50"></text></g><g><title>`0x7FF8C4CE7B29 (1 samples, 0.02%)</title><rect x="99.7839%" y="309" width="0.0196%" height="15" fill="rgb(206,201,31)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="319.50"></text></g><g><title>`0x7FF8C4CE88A8 (1 samples, 0.02%)</title><rect x="99.7839%" y="293" width="0.0196%" height="15" fill="rgb(231,57,52)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="303.50"></text></g><g><title>`0x7FF8C4CE4479 (1 samples, 0.02%)</title><rect x="99.7839%" y="277" width="0.0196%" height="15" fill="rgb(248,177,22)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="287.50"></text></g><g><title>`0x7FF8C4CE4BCF (1 samples, 0.02%)</title><rect x="99.7839%" y="261" width="0.0196%" height="15" fill="rgb(215,211,37)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="271.50"></text></g><g><title>`0x7FF8C4CDFA99 (1 samples, 0.02%)</title><rect x="99.7839%" y="245" width="0.0196%" height="15" fill="rgb(241,128,51)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="255.50"></text></g><g><title>`0x7FF8C4CE06A3 (1 samples, 0.02%)</title><rect x="99.7839%" y="229" width="0.0196%" height="15" fill="rgb(227,165,31)" fg:x="5079" fg:w="1"/><text x="100.0339%" y="239.50"></text></g><g><title>`0x7FF8C4CEFB31 (4 samples, 0.08%)</title><rect x="99.7642%" y="373" width="0.0786%" height="15" fill="rgb(228,167,24)" fg:x="5078" fg:w="4"/><text x="100.0142%" y="383.50"></text></g><g><title>`0x7FF8C4D3C2ED (4 samples, 0.08%)</title><rect x="99.7642%" y="357" width="0.0786%" height="15" fill="rgb(228,143,12)" fg:x="5078" fg:w="4"/><text x="100.0142%" y="367.50"></text></g><g><title>`0x7FF8C4CE4479 (3 samples, 0.06%)</title><rect x="99.7839%" y="341" width="0.0589%" height="15" fill="rgb(249,149,8)" fg:x="5079" fg:w="3"/><text x="100.0339%" y="351.50"></text></g><g><title>`0x7FF8C4CE4C14 (3 samples, 0.06%)</title><rect x="99.7839%" y="325" width="0.0589%" height="15" fill="rgb(243,35,44)" fg:x="5079" fg:w="3"/><text x="100.0339%" y="335.50"></text></g><g><title>`0x7FF8C4CE7BC4 (2 samples, 0.04%)</title><rect x="99.8035%" y="309" width="0.0393%" height="15" fill="rgb(246,89,9)" fg:x="5080" fg:w="2"/><text x="100.0535%" y="319.50"></text></g><g><title>`0x7FF8C4D026B7 (2 samples, 0.04%)</title><rect x="99.8035%" y="293" width="0.0393%" height="15" fill="rgb(233,213,13)" fg:x="5080" fg:w="2"/><text x="100.0535%" y="303.50"></text></g><g><title>`0x7FF8C23B9AE2 (1 samples, 0.02%)</title><rect x="99.8428%" y="261" width="0.0196%" height="15" fill="rgb(233,141,41)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="271.50"></text></g><g><title>`0x7FF8C23BA9CC (1 samples, 0.02%)</title><rect x="99.8428%" y="245" width="0.0196%" height="15" fill="rgb(239,167,4)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="255.50"></text></g><g><title>`0x7FF8C23BAA3B (1 samples, 0.02%)</title><rect x="99.8428%" y="229" width="0.0196%" height="15" fill="rgb(209,217,16)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="239.50"></text></g><g><title>`0x7FF8C23BB06F (1 samples, 0.02%)</title><rect x="99.8428%" y="213" width="0.0196%" height="15" fill="rgb(219,88,35)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="223.50"></text></g><g><title>`0x7FF8C4CFB44D (1 samples, 0.02%)</title><rect x="99.8428%" y="197" width="0.0196%" height="15" fill="rgb(220,193,23)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="207.50"></text></g><g><title>`0x7FF8C4CFDF6F (1 samples, 0.02%)</title><rect x="99.8428%" y="181" width="0.0196%" height="15" fill="rgb(230,90,52)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="191.50"></text></g><g><title>`0x7FF8C4D746B7 (1 samples, 0.02%)</title><rect x="99.8428%" y="165" width="0.0196%" height="15" fill="rgb(252,106,19)" fg:x="5082" fg:w="1"/><text x="100.0928%" y="175.50"></text></g><g><title>`0x7FF8C23B954D (2 samples, 0.04%)</title><rect x="99.8428%" y="277" width="0.0393%" height="15" fill="rgb(206,74,20)" fg:x="5082" fg:w="2"/><text x="100.0928%" y="287.50"></text></g><g><title>`0x7FF8C23B9B31 (1 samples, 0.02%)</title><rect x="99.8625%" y="261" width="0.0196%" height="15" fill="rgb(230,138,44)" fg:x="5083" fg:w="1"/><text x="100.1125%" y="271.50"></text></g><g><title>`0x7FF8C23E4CF0 (1 samples, 0.02%)</title><rect x="99.8625%" y="245" width="0.0196%" height="15" fill="rgb(235,182,43)" fg:x="5083" fg:w="1"/><text x="100.1125%" y="255.50"></text></g><g><title>`0x7FF8C4DA37CE (7 samples, 0.14%)</title><rect x="99.7642%" y="421" width="0.1375%" height="15" fill="rgb(242,16,51)" fg:x="5078" fg:w="7"/><text x="100.0142%" y="431.50"></text></g><g><title>`0x7FF8C4CE6AF4 (7 samples, 0.14%)</title><rect x="99.7642%" y="405" width="0.1375%" height="15" fill="rgb(248,9,4)" fg:x="5078" fg:w="7"/><text x="100.0142%" y="415.50"></text></g><g><title>`0x7FF8C4CE73E4 (7 samples, 0.14%)</title><rect x="99.7642%" y="389" width="0.1375%" height="15" fill="rgb(210,31,22)" fg:x="5078" fg:w="7"/><text x="100.0142%" y="399.50"></text></g><g><title>`0x7FF8C4CEFBAE (3 samples, 0.06%)</title><rect x="99.8428%" y="373" width="0.0589%" height="15" fill="rgb(239,54,39)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="383.50"></text></g><g><title>`0x7FF8C4D0D947 (3 samples, 0.06%)</title><rect x="99.8428%" y="357" width="0.0589%" height="15" fill="rgb(230,99,41)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="367.50"></text></g><g><title>`0x7FF8C4D3D110 (3 samples, 0.06%)</title><rect x="99.8428%" y="341" width="0.0589%" height="15" fill="rgb(253,106,12)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="351.50"></text></g><g><title>`0x7FF8C4D3D08A (3 samples, 0.06%)</title><rect x="99.8428%" y="325" width="0.0589%" height="15" fill="rgb(213,46,41)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="335.50"></text></g><g><title>`0x7FF8C4D3D2F7 (3 samples, 0.06%)</title><rect x="99.8428%" y="309" width="0.0589%" height="15" fill="rgb(215,133,35)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="319.50"></text></g><g><title>`0x7FF8C4CE9A1D (3 samples, 0.06%)</title><rect x="99.8428%" y="293" width="0.0589%" height="15" fill="rgb(213,28,5)" fg:x="5082" fg:w="3"/><text x="100.0928%" y="303.50"></text></g><g><title>`0x7FF8C23B957E (1 samples, 0.02%)</title><rect x="99.8821%" y="277" width="0.0196%" height="15" fill="rgb(215,77,49)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="287.50"></text></g><g><title>`0x7FF8C2406567 (1 samples, 0.02%)</title><rect x="99.8821%" y="261" width="0.0196%" height="15" fill="rgb(248,100,22)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="271.50"></text></g><g><title>`0x7FF8C2422DCE (1 samples, 0.02%)</title><rect x="99.8821%" y="245" width="0.0196%" height="15" fill="rgb(208,67,9)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="255.50"></text></g><g><title>`0x7FF8C2408C05 (1 samples, 0.02%)</title><rect x="99.8821%" y="229" width="0.0196%" height="15" fill="rgb(219,133,21)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="239.50"></text></g><g><title>`0x7FF8C2415363 (1 samples, 0.02%)</title><rect x="99.8821%" y="213" width="0.0196%" height="15" fill="rgb(246,46,29)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="223.50"></text></g><g><title>`0x7FF8C24201EB (1 samples, 0.02%)</title><rect x="99.8821%" y="197" width="0.0196%" height="15" fill="rgb(246,185,52)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="207.50"></text></g><g><title>`0x7FF8C2418456 (1 samples, 0.02%)</title><rect x="99.8821%" y="181" width="0.0196%" height="15" fill="rgb(252,136,11)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="191.50"></text></g><g><title>`0x7FF8C2419A12 (1 samples, 0.02%)</title><rect x="99.8821%" y="165" width="0.0196%" height="15" fill="rgb(219,138,53)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="175.50"></text></g><g><title>`0x7FF8C2405660 (1 samples, 0.02%)</title><rect x="99.8821%" y="149" width="0.0196%" height="15" fill="rgb(211,51,23)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="159.50"></text></g><g><title>`0x7FF8C2403B75 (1 samples, 0.02%)</title><rect x="99.8821%" y="133" width="0.0196%" height="15" fill="rgb(247,221,28)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="143.50"></text></g><g><title>`0x7FF8C2453498 (1 samples, 0.02%)</title><rect x="99.8821%" y="117" width="0.0196%" height="15" fill="rgb(251,222,45)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="127.50"></text></g><g><title>`0x7FF8C245355E (1 samples, 0.02%)</title><rect x="99.8821%" y="101" width="0.0196%" height="15" fill="rgb(217,162,53)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="111.50"></text></g><g><title>`0x7FF8C4D2E0F4 (1 samples, 0.02%)</title><rect x="99.8821%" y="85" width="0.0196%" height="15" fill="rgb(229,93,14)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="95.50"></text></g><g><title>`0x7FF8C4D2E214 (1 samples, 0.02%)</title><rect x="99.8821%" y="69" width="0.0196%" height="15" fill="rgb(209,67,49)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="79.50"></text></g><g><title>`0x7FF8C4D2DE5B (1 samples, 0.02%)</title><rect x="99.8821%" y="53" width="0.0196%" height="15" fill="rgb(213,87,29)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="63.50"></text></g><g><title>`0x7FF8C4D70124 (1 samples, 0.02%)</title><rect x="99.8821%" y="37" width="0.0196%" height="15" fill="rgb(205,151,52)" fg:x="5084" fg:w="1"/><text x="100.1321%" y="47.50"></text></g><g><title>`0x7FF8C4DA389D (1 samples, 0.02%)</title><rect x="99.9018%" y="421" width="0.0196%" height="15" fill="rgb(253,215,39)" fg:x="5085" fg:w="1"/><text x="100.1518%" y="431.50"></text></g><g><title>`0x7FF8C4CE7010 (1 samples, 0.02%)</title><rect x="99.9018%" y="405" width="0.0196%" height="15" fill="rgb(221,220,41)" fg:x="5085" fg:w="1"/><text x="100.1518%" y="415.50"></text></g><g><title>`0x7FF8C4CEA7DD (1 samples, 0.02%)</title><rect x="99.9018%" y="389" width="0.0196%" height="15" fill="rgb(218,133,21)" fg:x="5085" fg:w="1"/><text x="100.1518%" y="399.50"></text></g><g><title>`0x7FF8C4CED7B1 (1 samples, 0.02%)</title><rect x="99.9018%" y="373" width="0.0196%" height="15" fill="rgb(221,193,43)" fg:x="5085" fg:w="1"/><text x="100.1518%" y="383.50"></text></g><g><title>`0x7FF8C4CE79C4 (1 samples, 0.02%)</title><rect x="99.9214%" y="405" width="0.0196%" height="15" fill="rgb(240,128,52)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="415.50"></text></g><g><title>`0x7FF8C4CE4EDA (1 samples, 0.02%)</title><rect x="99.9214%" y="389" width="0.0196%" height="15" fill="rgb(253,114,12)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="399.50"></text></g><g><title>`0x7FF8C3A05489 (1 samples, 0.02%)</title><rect x="99.9214%" y="373" width="0.0196%" height="15" fill="rgb(215,223,47)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="383.50"></text></g><g><title>`0x7FF8C23CEBBB (1 samples, 0.02%)</title><rect x="99.9214%" y="357" width="0.0196%" height="15" fill="rgb(248,225,23)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="367.50"></text></g><g><title>`0x7FF8C4D138C0 (1 samples, 0.02%)</title><rect x="99.9214%" y="341" width="0.0196%" height="15" fill="rgb(250,108,0)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="351.50"></text></g><g><title>`0x7FF8C3A0CC0F (1 samples, 0.02%)</title><rect x="99.9214%" y="325" width="0.0196%" height="15" fill="rgb(228,208,7)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="335.50"></text></g><g><title>`0x7FF8C3A0B9A9 (1 samples, 0.02%)</title><rect x="99.9214%" y="309" width="0.0196%" height="15" fill="rgb(244,45,10)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="319.50"></text></g><g><title>`0x7FF8C4D3AB0C (1 samples, 0.02%)</title><rect x="99.9214%" y="293" width="0.0196%" height="15" fill="rgb(207,125,25)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="303.50"></text></g><g><title>`0x7FF8C4D3AC9C (1 samples, 0.02%)</title><rect x="99.9214%" y="277" width="0.0196%" height="15" fill="rgb(210,195,18)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="287.50"></text></g><g><title>`0x7FF8C4D70044 (1 samples, 0.02%)</title><rect x="99.9214%" y="261" width="0.0196%" height="15" fill="rgb(249,80,12)" fg:x="5086" fg:w="1"/><text x="100.1714%" y="271.50"></text></g><g><title>`0x7FF8C4DA3B6D (2 samples, 0.04%)</title><rect x="99.9214%" y="421" width="0.0393%" height="15" fill="rgb(221,65,9)" fg:x="5086" fg:w="2"/><text x="100.1714%" y="431.50"></text></g><g><title>`0x7FF8C4CE7B29 (1 samples, 0.02%)</title><rect x="99.9411%" y="405" width="0.0196%" height="15" fill="rgb(235,49,36)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="415.50"></text></g><g><title>`0x7FF8C4CE88A8 (1 samples, 0.02%)</title><rect x="99.9411%" y="389" width="0.0196%" height="15" fill="rgb(225,32,20)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="399.50"></text></g><g><title>`0x7FF8C4CE4479 (1 samples, 0.02%)</title><rect x="99.9411%" y="373" width="0.0196%" height="15" fill="rgb(215,141,46)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="383.50"></text></g><g><title>`0x7FF8C4CE4C14 (1 samples, 0.02%)</title><rect x="99.9411%" y="357" width="0.0196%" height="15" fill="rgb(250,160,47)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="367.50"></text></g><g><title>`0x7FF8C4CE7B29 (1 samples, 0.02%)</title><rect x="99.9411%" y="341" width="0.0196%" height="15" fill="rgb(216,222,40)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="351.50"></text></g><g><title>`0x7FF8C4CE7EC7 (1 samples, 0.02%)</title><rect x="99.9411%" y="325" width="0.0196%" height="15" fill="rgb(234,217,39)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="335.50"></text></g><g><title>`0x7FF8C4CEA7DD (1 samples, 0.02%)</title><rect x="99.9411%" y="309" width="0.0196%" height="15" fill="rgb(207,178,40)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="319.50"></text></g><g><title>`0x7FF8C4CED79A (1 samples, 0.02%)</title><rect x="99.9411%" y="293" width="0.0196%" height="15" fill="rgb(221,136,13)" fg:x="5087" fg:w="1"/><text x="100.1911%" y="303.50"></text></g><g><title>`0x7FF8C2B07704 (1 samples, 0.02%)</title><rect x="99.9607%" y="309" width="0.0196%" height="15" fill="rgb(249,199,10)" fg:x="5088" fg:w="1"/><text x="100.2107%" y="319.50"></text></g><g><title>`0x7FF8C2B39694 (1 samples, 0.02%)</title><rect x="99.9607%" y="293" width="0.0196%" height="15" fill="rgb(249,222,13)" fg:x="5088" fg:w="1"/><text x="100.2107%" y="303.50"></text></g><g><title>`0x7FF8C2B39CBC (1 samples, 0.02%)</title><rect x="99.9607%" y="277" width="0.0196%" height="15" fill="rgb(244,185,38)" fg:x="5088" fg:w="1"/><text x="100.2107%" y="287.50"></text></g><g><title>`0x7FF8C2B3A0D6 (1 samples, 0.02%)</title><rect x="99.9607%" y="261" width="0.0196%" height="15" fill="rgb(236,202,9)" fg:x="5088" fg:w="1"/><text x="100.2107%" y="271.50"></text></g><g><title>`0x7FF8C2B39DFD (1 samples, 0.02%)</title><rect x="99.9607%" y="245" width="0.0196%" height="15" fill="rgb(250,229,37)" fg:x="5088" fg:w="1"/><text x="100.2107%" y="255.50"></text></g><g><title>all (5,090 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="5090"/><text x="0.2500%" y="495.50"></text></g><g><title>`0x7FF8C4D45C1E (14 samples, 0.28%)</title><rect x="99.7250%" y="469" width="0.2750%" height="15" fill="rgb(211,33,43)" fg:x="5076" fg:w="14"/><text x="99.9750%" y="479.50"></text></g><g><title>`0x7FF8C4D45C73 (14 samples, 0.28%)</title><rect x="99.7250%" y="453" width="0.2750%" height="15" fill="rgb(245,58,50)" fg:x="5076" fg:w="14"/><text x="99.9750%" y="463.50"></text></g><g><title>`0x7FF8C4D45DEB (14 samples, 0.28%)</title><rect x="99.7250%" y="437" width="0.2750%" height="15" fill="rgb(244,68,36)" fg:x="5076" fg:w="14"/><text x="99.9750%" y="447.50"></text></g><g><title>`0x7FF8C4DA3CB2 (2 samples, 0.04%)</title><rect x="99.9607%" y="421" width="0.0393%" height="15" fill="rgb(232,229,15)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="431.50"></text></g><g><title>`0x7FF8C4D3D110 (2 samples, 0.04%)</title><rect x="99.9607%" y="405" width="0.0393%" height="15" fill="rgb(254,30,23)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="415.50"></text></g><g><title>`0x7FF8C4D3D110 (2 samples, 0.04%)</title><rect x="99.9607%" y="389" width="0.0393%" height="15" fill="rgb(235,160,14)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="399.50"></text></g><g><title>`0x7FF8C4D3D08A (2 samples, 0.04%)</title><rect x="99.9607%" y="373" width="0.0393%" height="15" fill="rgb(212,155,44)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="383.50"></text></g><g><title>`0x7FF8C4D3D2F7 (2 samples, 0.04%)</title><rect x="99.9607%" y="357" width="0.0393%" height="15" fill="rgb(226,2,50)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="367.50"></text></g><g><title>`0x7FF8C4CE9A1D (2 samples, 0.04%)</title><rect x="99.9607%" y="341" width="0.0393%" height="15" fill="rgb(234,177,6)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="351.50"></text></g><g><title>`0x7FF8C2B06216 (2 samples, 0.04%)</title><rect x="99.9607%" y="325" width="0.0393%" height="15" fill="rgb(217,24,9)" fg:x="5088" fg:w="2"/><text x="100.2107%" y="335.50"></text></g><g><title>`0x7FF8C2B07730 (1 samples, 0.02%)</title><rect x="99.9804%" y="309" width="0.0196%" height="15" fill="rgb(220,13,46)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="319.50"></text></g><g><title>`0x7FF8C2B0F9C9 (1 samples, 0.02%)</title><rect x="99.9804%" y="293" width="0.0196%" height="15" fill="rgb(239,221,27)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="303.50"></text></g><g><title>`0x7FF8C2B0FA24 (1 samples, 0.02%)</title><rect x="99.9804%" y="277" width="0.0196%" height="15" fill="rgb(222,198,25)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="287.50"></text></g><g><title>`0x7FF8C2AFDC74 (1 samples, 0.02%)</title><rect x="99.9804%" y="261" width="0.0196%" height="15" fill="rgb(211,99,13)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="271.50"></text></g><g><title>`0x7FF8C2AFDD3E (1 samples, 0.02%)</title><rect x="99.9804%" y="245" width="0.0196%" height="15" fill="rgb(232,111,31)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="255.50"></text></g><g><title>`0x7FF8C4CFB3C7 (1 samples, 0.02%)</title><rect x="99.9804%" y="229" width="0.0196%" height="15" fill="rgb(245,82,37)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="239.50"></text></g><g><title>`0x7FF8C4CFB6A6 (1 samples, 0.02%)</title><rect x="99.9804%" y="213" width="0.0196%" height="15" fill="rgb(227,149,46)" fg:x="5089" fg:w="1"/><text x="100.2304%" y="223.50"></text></g></svg></svg>